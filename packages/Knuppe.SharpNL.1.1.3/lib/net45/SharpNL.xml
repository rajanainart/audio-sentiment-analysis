<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpNL</name>
    </assembly>
    <members>
        <member name="T:SharpNL.BaseObject">
            <summary>
            Provides the basic properties for data holder objects.
            </summary>
        </member>
        <member name="M:SharpNL.BaseObject.GetData``1(System.String,``0)">
            <summary>
            Retrieves the value associated with the specified <paramref name="key"/>. If the key is not found,
            returns a default value that you provide.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="key">The data key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/> is not found.</returns>
            <exception cref="T:System.InvalidOperationException">The specified return type is not valid!</exception>
        </member>
        <member name="M:SharpNL.BaseObject.TryGetData``1(System.String,``0@)">
            <summary>
            Attempts to get data from the current instance and returns a value indicating if the operation succeeded.
            </summary>
            <param name="key">The data key.</param>
            <param name="value">The data value.</param>
            <returns><c>true</c> if the operation succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SharpNL.BaseObject.Data">
            <summary>
            Gets the data dictionary stored on this instance.
            </summary>
            <value>The data dictionary stored on this instance.</value>
        </member>
        <member name="P:SharpNL.BaseObject.HasData">
            <summary>
            Gets a value indicating whether this instance has data.
            </summary>
            <value><c>true</c> if this instance has data; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.Chunker.Chunk">
            <summary>
            Represents a chunk.
            </summary>
        </member>
        <member name="T:SharpNL.Chunker.IChunk">
            <summary>
            Represents a chunk.
            </summary>
        </member>
        <member name="P:SharpNL.Chunker.IChunk.End">
            <summary>
            Gets the chunk end position.
            </summary>
            <value>The chunk end position.</value>
        </member>
        <member name="P:SharpNL.Chunker.IChunk.HeadIndex">
            <summary>
            Gets or sets the index of the head. Default value is -1.
            </summary>
            <value>The index of the head.</value>
        </member>
        <member name="P:SharpNL.Chunker.IChunk.Length">
            <summary>
            Gets the chunk length.
            </summary>
            <value>The chunk length.</value>
        </member>
        <member name="P:SharpNL.Chunker.IChunk.Start">
            <summary>
            Gets the chunk start position.
            </summary>
            <value>The chunk start position.</value>
        </member>
        <member name="P:SharpNL.Chunker.IChunk.Tag">
            <summary>
            Gets the chunk tag.
            </summary>
            <value>The chunk tag.</value>
        </member>
        <member name="P:SharpNL.Chunker.IChunk.Tokens">
            <summary>
            Gets the chunk tokens.
            </summary>
            <value>The chunk tokens.</value>
        </member>
        <member name="M:SharpNL.Chunker.Chunk.#ctor(SharpNL.SentenceDetector.Sentence,SharpNL.Utility.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.Chunk"/> class.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="span">The chunk span.</param>
        </member>
        <member name="M:SharpNL.Chunker.Chunk.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Chunker.Chunk.End">
            <summary>
            Gets the chunk end position.
            </summary>
            <value>The chunk end position.</value>
        </member>
        <member name="P:SharpNL.Chunker.Chunk.HeadIndex">
            <summary>
            Gets or sets the index of the head. Default value is -1.
            </summary>
            <value>The index of the head.</value>
        </member>
        <member name="P:SharpNL.Chunker.Chunk.Length">
            <summary>
            Gets the chunk length.
            </summary>
            <value>The chunk length.</value>
        </member>
        <member name="P:SharpNL.Chunker.Chunk.Start">
            <summary>
            Gets the chunk start position.
            </summary>
            <value>The chunk start position.</value>
        </member>
        <member name="P:SharpNL.Chunker.Chunk.Span">
            <summary>
            Gets the chunk span.
            </summary>
            <value>The chunk span.</value>
        </member>
        <member name="P:SharpNL.Chunker.Chunk.Tag">
            <summary>
            Gets the chunk tag.
            </summary>
            <value>The chunk tag.</value>
        </member>
        <member name="P:SharpNL.Chunker.Chunk.Tokens">
            <summary>
            Gets the chunk tokens.
            </summary>
            <value>The chunk tokens.</value>
        </member>
        <member name="T:SharpNL.Chunker.ChunkerAnalyzer">
            <summary>
            Represents a chunker analyzer which allows the easy abstraction of the chunking. This class is thread-safe.
            </summary>
        </member>
        <member name="T:SharpNL.Analyzer.AbstractAnalyzer">
            <summary>
            Represents a abstract analyzer.
            </summary>
        </member>
        <member name="T:SharpNL.Analyzer.IAnalyzer">
            <summary>
            Defines a method to analyze a <see cref="T:SharpNL.IDocument"/> object 
            which can be several sentences, a sentence or even a single word.
            </summary>
        </member>
        <member name="M:SharpNL.Analyzer.IAnalyzer.Analyze(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Analyzes the specified document which can be several sentences, a sentence or even a single word.
            </summary>
            <param name="factory">The text factory. if this argument is <c>null</c> the <see cref="T:SharpNL.DefaultTextFactory"/> must 
            be used during the analysis.</param>
            <param name="document">The <see cref="T:SharpNL.IDocument"/> to be analyzed.</param>
        </member>
        <member name="P:SharpNL.Analyzer.IAnalyzer.Weight">
            <summary>
            Property used to control the influence of a analyzer during the execution in the <see cref="T:SharpNL.Analyzer.AggregateAnalyzer"/>.
            The lower values will be executed first.
            </summary>
            <value>Returns a floating point value indicating the relative weight a task.</value>
            <remarks>
            The standard weights are:
            <list type="table">
             <listheader>
              <term>Weight</term><description>Analyzer</description>
             </listheader>
             <item><term>0.0</term><description>Sentence detection.</description></item>
             <item><term>1.0</term><description>Tokenization.</description></item>
             <item><term>2.0</term><description>Document categorizer.</description></item>
             <item><term>3.0</term><description>Entity recognition.</description></item>
             <item><term>4.0</term><description>Part-Of-Speech tagging.</description></item>
             <item><term>5.0</term><description>Chunking</description></item>
             <item><term>6.0</term><description>Parsing</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpNL.Analyzer.AbstractAnalyzer.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Analyzer.AbstractAnalyzer"/> with the specified weight.
            </summary>
            <param name="weight">The analyzer weight.</param>
        </member>
        <member name="M:SharpNL.Analyzer.AbstractAnalyzer.Analyze(SharpNL.IDocument)">
            <summary>
            Analyzes the specified document which can be several sentences, a sentence or even a single word.
            The <see cref="T:SharpNL.DefaultTextFactory"/> will be used to create the objects in the <see cref="T:SharpNL.IDocument"/>.
            </summary>
            <param name="document">The <see cref="T:SharpNL.IDocument"/> to be analyzed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="document"/>
            </exception>
        </member>
        <member name="M:SharpNL.Analyzer.AbstractAnalyzer.Analyze(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Analyzes the specified document which can be several sentences, a sentence or even a single word.
            </summary>
            <param name="factory">The text factory. if this argument is <c>null</c> the <see cref="T:SharpNL.DefaultTextFactory"/> will be used during the analysis.</param>
            <param name="document">The <see cref="T:SharpNL.IDocument"/> to be analyzed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="document"/>
            </exception>
        </member>
        <member name="M:SharpNL.Analyzer.AbstractAnalyzer.Evaluate(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Evaluates the specified document.
            </summary>
            <param name="factory">The factory used in this analysis.</param>
            <param name="document">The document to be analyzed.</param>
        </member>
        <member name="P:SharpNL.Analyzer.AbstractAnalyzer.Weight">
            <summary>
            Property used to control the influence of a analyzer during the execution in the <see cref="T:SharpNL.Analyzer.AggregateAnalyzer"/>.
            The lower values will be executed first.
            </summary>
            <value>Returns a floating point value indicating the relative weight a analyzer.</value>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerAnalyzer.#ctor(SharpNL.Chunker.IChunker)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerAnalyzer"/> class.
            </summary>
            <param name="chunker">The chunker.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerAnalyzer.#ctor(SharpNL.Chunker.IChunker,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Analyzer.AbstractAnalyzer"/> with the specified weight.
            </summary>
            <param name="chunker">The chunker used in this analyzer.</param>
            <param name="weight">The analyzer weight.</param>
            <exception cref="T:System.ArgumentNullException">chunker</exception>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerAnalyzer.Evaluate(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Evaluates the specified document.
            </summary>
            <param name="factory">The factory used in this analysis.</param>
            <param name="document">The document to be analyzed.</param>
        </member>
        <member name="P:SharpNL.Chunker.ChunkerAnalyzer.Chunker">
            <summary>
            Gets the chunker.
            </summary>
            <value>The chunker.</value>
        </member>
        <member name="T:SharpNL.Classifier.AbstractClass`1">
            <summary>
            Represents a abstract classifier class.
            </summary>
        </member>
        <member name="T:SharpNL.Classifier.IClass`1">
            <summary>
            Represents a class.
            </summary>
            <typeparam name="T">The feature type.</typeparam>
        </member>
        <member name="M:SharpNL.Classifier.IClass`1.Contains(`0)">
            <summary>
            Determines whether the class contains the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns><c>true</c> if the class contains the specified feature; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SharpNL.Classifier.IClass`1.Name">
            <summary>
            Gets the class name.
            </summary>
            <value>The class name.</value>
        </member>
        <member name="P:SharpNL.Classifier.IClass`1.Features">
            <summary>
            Gets the class features.
            </summary>
            <value>The class features.</value>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClass`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.AbstractClass`1"/> class with its name.
            </summary>
            <param name="name">The class name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClass`1.Add(`0[])">
            <summary>
            Adds the specified features to the <see cref="T:SharpNL.Classifier.AbstractClass`1"/> .
            </summary>
            <param name="features">The features to be added.</param>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClass`1.Contains(`0)">
            <summary>
            Determines whether the class contains the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns><c>true</c> if the class contains the specified feature; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClass`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the features.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the features.
            </returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClass`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClass`1.Equals(SharpNL.Classifier.IClass{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClass`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClass`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SharpNL.Classifier.AbstractClass`1.Count">
            <summary>
            Gets the number of features in this class.
            </summary>
            <value>The number of features in this class.</value>
        </member>
        <member name="P:SharpNL.Classifier.AbstractClass`1.Name">
            <summary>
            Gets the class name.
            </summary>
            <value>The class name.</value>
        </member>
        <member name="P:SharpNL.Classifier.AbstractClass`1.Features">
            <summary>
            Gets the class features.
            </summary>
            <value>The class features.</value>
        </member>
        <member name="P:SharpNL.Classifier.AbstractClass`1.Tag">
            <summary>
            Gets or sets the object that contains data about the class.
            </summary>
            <value>An <see cref="T:System.Object"/> that contains data about the class. The default is <c>null</c>.</value>
        </member>
        <member name="T:SharpNL.Classifier.AbstractClassifier`3">
            <summary>
            Represents a abstract classifier.
            </summary>
            <typeparam name="C">The class type.</typeparam>
            <typeparam name="R">The result type.</typeparam>
            <typeparam name="F">The feature type.</typeparam>
        </member>
        <member name="T:SharpNL.Classifier.IClassClassifier`3">
            <summary>
            Represents a class classifier.
            </summary>
            <typeparam name="C">The class type.</typeparam>
            <typeparam name="R">The result type.</typeparam>
            <typeparam name="F">The feature type.</typeparam>
        </member>
        <member name="M:SharpNL.Classifier.IClassClassifier`3.Classify(`2[])">
            <summary>
            Classifies the specified <paramref name="features"/>.
            </summary>
            <param name="features">The features to be classified.</param>
            <returns>The classification values for the features, the higher, the better is the match.</returns>
        </member>
        <member name="P:SharpNL.Classifier.IClassClassifier`3.Classes">
            <summary>
            Gets the classes in this classifier.
            </summary>
            <value>The classes in this classifier.</value>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.AbstractClassifier`3"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.#ctor(System.Collections.Generic.IEqualityComparer{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.AbstractClassifier`3"/> using a specific <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> in the <see cref="P:SharpNL.Classifier.AbstractClassifier`3.IgnoredFeatures"/>.
            </summary>
            <param name="comparer">The equality comparer.</param>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.Evaluate(`2[])">
            <summary>
            Evaluates the specified features classes.
            </summary>
            <param name="features">The features to be classified.</param>
            <returns>The classification values for the features, the higher, the better is the match.</returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.Classify(`2[])">
            <summary>
            Classifies the specified <paramref name="features"/>.
            </summary>
            <param name="features">The features to be classified.</param>
            <returns>The classification values for the features, the higher, the better is the match.</returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.GetBestResult(`2[])">
            <summary>
            Gets the name of the class corresponding to the highest likelihood.
            </summary>
            <param name="features">The features to be evaluated.</param>
            <returns>The string name of the best class or a <c>null</c> value.</returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the classes.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the classes.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.IsIgnored(`2)">
            <summary>
            Determines whether the specified feature is ignored.
            </summary>
            <param name="feature">The feature.</param>
            <returns><c>true</c> if the specified feature is ignored; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Classifier.AbstractClassifier`3.Prepare(`2[])">
            <summary>
            Prepares the specified features to the classification.
            </summary>
            <param name="features">The features to be classified.</param>
            <returns>The features without the ignored features.</returns>
        </member>
        <member name="P:SharpNL.Classifier.AbstractClassifier`3.Classes">
            <summary>
            Gets the classes in this classifier.
            </summary>
            <value>The classes in this classifier.</value>
        </member>
        <member name="P:SharpNL.Classifier.AbstractClassifier`3.IgnoredFeatures">
            <summary>
            Gets the ignored features by this classifier.
            </summary>
            <value>The ignored features by this classifier.</value>
        </member>
        <member name="T:SharpNL.Classifier.AbstractResult`2">
            <summary>
            Represents a abstract class classifier result.
            </summary>
            <typeparam name="C">The class type.</typeparam>
            <typeparam name="F">The feature type.</typeparam>
        </member>
        <member name="T:SharpNL.Classifier.IClassClassifierResult`2">
            <summary>
            Interface IClassClassifierResult
            </summary>
            <typeparam name="C">The result class.</typeparam>
            <typeparam name="F">The feature type.</typeparam>
        </member>
        <member name="P:SharpNL.Classifier.IClassClassifierResult`2.Class">
            <summary>
            Gets the result class.
            </summary>
            <value>The result class.</value>
        </member>
        <member name="P:SharpNL.Classifier.IClassClassifierResult`2.Probability">
            <summary>
            Gets the result probability.
            </summary>
            <value>The result probability.</value>
        </member>
        <member name="M:SharpNL.Classifier.AbstractResult`2.CompareTo(SharpNL.Classifier.IClassClassifierResult{`0,`1})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:SharpNL.Classifier.AbstractResult`2.Class">
            <summary>
            Gets the result class.
            </summary>
            <value>The result class.</value>
        </member>
        <member name="P:SharpNL.Classifier.AbstractResult`2.Probability">
            <summary>
            Gets the result probability.
            </summary>
            <value>The result probability.</value>
        </member>
        <member name="T:SharpNL.Classifier.Bayesian.BayesianResult`1">
            <summary>
            Represents a bayesian classification result. This class cannot be inherited.
            </summary>
            <typeparam name="F">The feature type.</typeparam>
        </member>
        <member name="T:SharpNL.Classifier.Bayesian.BayesianSettings">
            <summary>
            Represents the bayesian theorem settings.
            </summary>
        </member>
        <member name="F:SharpNL.Classifier.Bayesian.BayesianSettings.DefaultClass">
            <summary>
            The default class name.
            </summary>
        </member>
        <member name="F:SharpNL.Classifier.Bayesian.BayesianSettings.NeutralProbability">
            <summary>
            The neutral probability of a bayesian feature.
            </summary>
        </member>
        <member name="F:SharpNL.Classifier.Bayesian.BayesianSettings.LowerBound">
            <summary>
            The minimum likelihood that a feature matches.
            </summary>
        </member>
        <member name="F:SharpNL.Classifier.Bayesian.BayesianSettings.UpperBound">
            <summary>
            The maximum likelihood that a feature matches.
            </summary>
        </member>
        <member name="F:SharpNL.Classifier.Bayesian.BayesianSettings.DefaultCutoff">
            <summary>
            The cutoff value used by the classifier. Any match probability greater than or equal to this value
            will be classified as a match.
            </summary>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianSettings.Normalize(System.Double)">
            <summary>
            Normalizes the specified probability.
            </summary>
            <param name="p">The probability.</param>
            <returns>The normalyzed probability.</returns>
        </member>
        <member name="T:SharpNL.Classifier.Bayesian.BayesianClass`1">
            <summary>
            Represents a Bayesian class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClass`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.Bayesian.BayesianClass`1"/> with its name.
            </summary>
            <param name="name">The class name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/>
            </exception>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClass`1.GetProbability(`0[])">
            <summary>
            Gets the class probability for the given <paramref name="features"/>.
            </summary>
            <param name="features">The features to analyze.</param>
            <returns>The class probability.</returns>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClass`1.GetFeatureProbabilities(`0[])">
            <summary>
            Computes the probability of the given features.
            </summary>
            <param name="features">The features.</param>
            <returns>The probability for each feature.</returns>
        </member>
        <member name="P:SharpNL.Classifier.Bayesian.BayesianClass`1.Comparer">
            <summary>
            Gets or sets the feature comparer.
            </summary>
            <value>The feature comparer.</value>
        </member>
        <member name="T:SharpNL.Classifier.Bayesian.BayesianClassifier`1">
            <summary>
            A implementation a classifier based on Bayes' theorem.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Bayes%27_theorem"/>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.Bayesian.BayesianClassifier`1"/> class using the default cutoff.
            </summary>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.Bayesian.BayesianClassifier`1"/> class with the specified cutoff value.
            </summary>
            <param name="cutoff">The cutoff.</param>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.TeachMatch(`0[])">
            <summary>
            Teaches the given features as matching in the default class.
            </summary>
            <param name="features">The matching features.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="features"/>
            </exception>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.TeachMatch(System.String,`0[])">
            <summary>
            Teaches the given features as matching in the specified class.
            </summary>
            <param name="className">The name of the class.</param>
            <param name="features">The matching features.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="className"/>
            or
            <paramref name="features"/>
            </exception>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.TeachNonMatch(`0[])">
            <summary>
            Teaches the given features as non matching in the default class.
            </summary>
            <param name="features">The non matching features.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="features"/>
            </exception>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.TeachNonMatch(System.String,`0[])">
            <summary>
            Teaches the given features as non matching in the specified class.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="features">The non matching features.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="className"/>
            or
            <paramref name="features"/>
            </exception>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.SetFeatureProbability(`0,System.Double)">
            <summary>
            Sets the feature probability in the default class.
            </summary>
            <param name="feature">The feature.</param>
            <param name="probability">The feature probability.</param>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.SetFeatureProbability(System.String,`0,System.Double)">
            <summary>
            Sets the feature probability in a specific class.
            </summary>
            <param name="className">The name of the class.</param>
            <param name="feature">The feature.</param>
            <param name="probability">The feature probability.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="className"/>
            </exception>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.GetClass(System.String,System.Boolean)">
            <summary>
            Gets the bayesian class by the class name.
            </summary>
            <param name="name">The class name.</param>
            <param name="create">if set to <c>true</c> the class will be created if it cannot be found.</param>
            <returns>The <see cref="T:SharpNL.Classifier.Bayesian.BayesianClass`1"/> or a <c>null</c> value.</returns>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianClassifier`1.Evaluate(`0[])">
            <summary>
            Evaluates the specified features classes.
            </summary>
            <param name="features">The features to be classified.</param>
            <returns>The classification values for the features, the higher, the better is the match.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:SharpNL.Classifier.Bayesian.BayesianClassifier`1.Cutoff">
            <summary>
            Gets or sets the classification cutoff.
            </summary>
            <value>The classification cutoff. The default value is <see cref="F:SharpNL.Classifier.Bayesian.BayesianSettings.DefaultCutoff"/>.</value>
        </member>
        <member name="T:SharpNL.Classifier.Bayesian.BayesianFeature`1">
            <summary>
            Represents a bayesian class feature. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianFeature`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.Bayesian.BayesianFeature`1"/> class.
            </summary>
            <param name="feature">The feature.</param>
            <exception cref="T:System.ArgumentNullException">feature</exception>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianFeature`1.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.Bayesian.BayesianFeature`1"/> class.
            </summary>
            <param name="feature">The feature.</param>
            <param name="matching">The matching count.</param>
            <param name="nonMatching">The non matching count.</param>
            <exception cref="T:System.ArgumentNullException">feature</exception>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianFeature`1.Equals(SharpNL.Classifier.Bayesian.BayesianFeature{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianFeature`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Classifier.Bayesian.BayesianFeature`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SharpNL.Classifier.Bayesian.BayesianFeature`1.Feature">
            <summary>
            Gets the feature.
            </summary>
            <value>The feature.</value>
        </member>
        <member name="P:SharpNL.Classifier.Bayesian.BayesianFeature`1.Probability">
            <summary>
            Gets or sets the feature probability.
            </summary>
            <value>The feature probability.</value>
        </member>
        <member name="P:SharpNL.Classifier.Bayesian.BayesianFeature`1.Matching">
            <summary>
            Gets the number of times that this feature matches.
            </summary>
            <value>The number of times that this feature matches.</value>
        </member>
        <member name="P:SharpNL.Classifier.Bayesian.BayesianFeature`1.NonMatching">
            <summary>
            Gets the number of times that this feature does not match.
            </summary>
            <value>The number of times that this feature foes not match.</value>
        </member>
        <member name="T:SharpNL.Classifier.StringClass">
            <summary>
            Represents a string classifier class.
            </summary>
        </member>
        <member name="M:SharpNL.Classifier.StringClass.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.StringClass"/> class with its name ignoring the feature case in the comparison.
            </summary>
            <param name="name">The class name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:SharpNL.Classifier.StringClass.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Classifier.StringClass"/> class with its name and a value indicating to ignore the case in the feature comparison.
            </summary>
            <param name="name">The class name.</param>
            <param name="ignoreCase">if set to <c>true</c> the feature comparison should ignore the case.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:SharpNL.Classifier.StringClass.Contains(System.String)">
            <summary>
            Determines whether the class contains the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns><c>true</c> if the class contains the specified feature; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SharpNL.Classifier.StringClass.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether the feature comparison should ignore the case.
            </summary>
            <value><c>true</c> if set to <c>true</c> the feature comparison should ignore the case.</value>
        </member>
        <member name="T:SharpNL.Globalization.Culture">
            <summary>
            Represents a abstract culture.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.IStopwordProvider">
            <summary>
            Provide the basic methods for stopword providers.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.IStopwordProvider.IsStopword(System.String)">
            <summary>
            Determines whether the specified word is a stopword.
            </summary>
            <param name="word">The word check.</param>
            <returns><c>true</c> if the specified word is a stopword; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SharpNL.Utility.IStopwordProvider.Stopwords">
            <summary>
            Gets the a set with all the stopwords.
            </summary>
            <value>The set with all the stopwords.</value>
        </member>
        <member name="M:SharpNL.Globalization.Culture.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Globalization.Culture"/> class.
            </summary>
            <param name="cultureName">The culture name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cultureName"/>.
            </exception>
            <exception cref="T:System.Globalization.CultureNotFoundException"/>
        </member>
        <member name="M:SharpNL.Globalization.Culture.GetCulture(System.String)">
            <summary>
            Gets the culture.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <returns>Culture.</returns>
            <exception cref="T:System.ArgumentNullException">cultureName</exception>
        </member>
        <member name="M:SharpNL.Globalization.Culture.IsStopword(System.String)">
            <summary>
            Determines whether the specified word is a stopword.
            </summary>
            <param name="word">The word to evaluate.</param>
            <returns><c>true</c> if the specified word is a stopword; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SharpNL.Globalization.Culture.CultureInfo">
            <summary>
            Gets the culture information.
            </summary>
            <value>The culture information.</value>
        </member>
        <member name="P:SharpNL.Globalization.Culture.Stopwords">
            <summary>
            Gets the a set with all the stopwords.
            </summary>
            <value>The set with all the stopwords.</value>
        </member>
        <member name="T:SharpNL.Globalization.Cultures.en">
            <summary>
            Represents a english culture object. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:SharpNL.Globalization.Cultures.en.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:SharpNL.Globalization.Cultures.pt_BR">
            <summary>
            Represents a Brazilian Portuguese culture object. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:SharpNL.Globalization.Cultures.pt_BR.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:SharpNL.DefaultTextFactory">
            <summary>
            The factory that provides the default implementations and resources for the SharpNL text objects. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="T:SharpNL.ITextFactory">
            <summary>
            A factory that provides text resources from any implementation.
            </summary>
        </member>
        <member name="M:SharpNL.ITextFactory.CreateCategory(SharpNL.SentenceDetector.ISentence,System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Creates the <see cref="T:SharpNL.DocumentCategorizer.ICategory"/> object.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="dict">The scored dictionary of categories.</param>
            <returns>The new <see cref="T:SharpNL.DocumentCategorizer.ICategory"/> object or a <c>null</c> value if the category is invalid or should be ignored.</returns>
        </member>
        <member name="M:SharpNL.ITextFactory.CreateChunk(SharpNL.SentenceDetector.ISentence,SharpNL.Utility.Span)">
            <summary>
            Creates the <see cref="T:SharpNL.Chunker.IChunk"/> object.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="span">The chunk span.</param>
            <returns>The created <see cref="T:SharpNL.Chunker.IChunk"/> object or a <c>null</c> value if the chunk is invalid or not needed.</returns>
        </member>
        <member name="M:SharpNL.ITextFactory.CreateDocument(System.String,System.String)">
            <summary>
            Creates the document object.
            </summary>
            <param name="language">The language.</param>
            <param name="text">The text.</param>
            <returns>The created <see cref="T:SharpNL.IDocument"/> object or a <c>null</c> value if the document is invalid or not needed.</returns>
        </member>
        <member name="M:SharpNL.ITextFactory.CreateEntity(SharpNL.SentenceDetector.ISentence,SharpNL.Utility.Span)">
            <summary>
            Creates an entity object.
            </summary>
            <param name="sentence">The sentence where the entity is present.</param>
            <param name="span">The entity span.</param>
            <returns>The new <see cref="T:SharpNL.NameFind.IEntity"/> object or a <c>null</c> value if the entity should be ignored.</returns>
        </member>
        <member name="M:SharpNL.ITextFactory.CreateSentence(SharpNL.Utility.Span,SharpNL.IDocument)">
            <summary>
            Creates a sentence object.
            </summary>
            <param name="span">The sentence span.</param>
            <param name="document">The document.</param>
            <returns>The created <see cref="T:SharpNL.SentenceDetector.ISentence"/> object or a <c>null</c> value if the sentence should be skipped.</returns>
        </member>
        <member name="M:SharpNL.ITextFactory.CreateToken(SharpNL.SentenceDetector.ISentence,SharpNL.Utility.Span,System.String)">
            <summary>
            Creates an token object.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="span">The span.</param>
            <param name="lexeme">The lexeme.</param>
            <returns>The created <see cref="T:SharpNL.Tokenize.IToken"/> object or a <c>null</c> value if the token is invalid or should be ignored.</returns>
        </member>
        <member name="P:SharpNL.ITextFactory.WordNet">
            <summary>
            Gets the WordNet instance.
            </summary>
            <returns>A WordNet instance or a <c>null</c> value if the WordNet is not necessary.</returns>
        </member>
        <member name="M:SharpNL.DefaultTextFactory.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.DefaultTextFactory"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.DefaultTextFactory.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SharpNL.DefaultTextFactory"/> class from being created.
            </summary>
        </member>
        <member name="M:SharpNL.DefaultTextFactory.CreateCategory(SharpNL.SentenceDetector.ISentence,System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Creates the <see cref="T:SharpNL.DocumentCategorizer.ICategory"/> object.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="dict">The scored dictionary of categories.</param>
            <returns>The new <see cref="T:SharpNL.DocumentCategorizer.ICategory"/> object or a <c>null</c> value if the category is invalid or should be ignored.</returns>
        </member>
        <member name="M:SharpNL.DefaultTextFactory.CreateChunk(SharpNL.SentenceDetector.Sentence,SharpNL.Utility.Span)">
            <summary>
            Creates the <see cref="T:SharpNL.Chunker.IChunk"/> object.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="span">The chunk span.</param>
            <returns>The <see cref="T:SharpNL.Chunker.IChunk"/> representation.</returns>
        </member>
        <member name="M:SharpNL.DefaultTextFactory.CreateDocument(System.String,System.String)">
            <summary>
            Creates the document object.
            </summary>
            <param name="language">The language.</param>
            <param name="text">The text.</param>
            <returns>The created <see cref="T:SharpNL.IDocument"/> object.</returns>
        </member>
        <member name="M:SharpNL.DefaultTextFactory.CreateEntity(SharpNL.SentenceDetector.Sentence,SharpNL.Utility.Span)">
            <summary>
            Creates an entity object.
            </summary>
            <param name="sentence">The sentence where the entity is present.</param>
            <param name="span">The entity span.</param>
            <returns>The new <see cref="T:SharpNL.NameFind.IEntity"/> object.</returns>
        </member>
        <member name="M:SharpNL.DefaultTextFactory.CreateSentence(SharpNL.Utility.Span,SharpNL.Document)">
            <summary>
            Creates a sentence object.
            </summary>
            <param name="span">The sentence span</param>
            <param name="document">The document.</param>
            <returns>The created <see cref="T:SharpNL.SentenceDetector.ISentence"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="span"/>
            or
            <paramref name="document"/>
            </exception>
        </member>
        <member name="M:SharpNL.DefaultTextFactory.CreateToken(SharpNL.SentenceDetector.Sentence,SharpNL.Utility.Span,System.String)">
            <summary>
            Creates an token object.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="span">The token span.</param>
            <param name="lexeme">The lexeme.</param>
            <returns>The created <see cref="T:SharpNL.Tokenize.IToken"/> object.</returns>
        </member>
        <member name="P:SharpNL.DefaultTextFactory.DefaultWordNet">
            <summary>
            Gets or sets the default WordNet instance.
            </summary>
            <value>The default WordNet instance. The default value is <c>null</c>.</value>
        </member>
        <member name="P:SharpNL.DefaultTextFactory.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.DefaultTextFactory"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.DefaultTextFactory"/> instance.</value>
        </member>
        <member name="P:SharpNL.DefaultTextFactory.WordNet">
            <summary>
            Gets the WordNet instance.
            </summary>
            <returns>Always return the value of the <see cref="P:SharpNL.DefaultTextFactory.DefaultWordNet"/> property.</returns>
        </member>
        <member name="T:SharpNL.Document">
            <summary>
            Represents a document with its texts and sentences.
            </summary>
        </member>
        <member name="T:SharpNL.IDocument">
            <summary>
            Represents a text document which can be several sentences, a sentence or even a single word.
            </summary>
        </member>
        <member name="P:SharpNL.IDocument.Text">
            <summary>
            Gets the document text.
            </summary>
            <value>The document text.</value>
        </member>
        <member name="P:SharpNL.IDocument.Language">
            <summary>
            Gets the language of this document.
            </summary>
            <value>The language of this document.</value>
        </member>
        <member name="P:SharpNL.IDocument.Sentences">
            <summary>
            Gets the document sentences.
            </summary>
            <value>The document sentences.</value>
        </member>
        <member name="P:SharpNL.IDocument.Factory">
            <summary>
            Gets the factory associated to this document.
            </summary>
            <value>The factory associated to this document.</value>
        </member>
        <member name="M:SharpNL.Document.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Document"/> class.
            </summary>
            <param name="language">The language of this document</param>
            <param name="text">The text.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/></exception>
        </member>
        <member name="M:SharpNL.Document.#ctor(System.String,System.Collections.Generic.List{SharpNL.SentenceDetector.Sentence})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Document"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="sentences">The sentences.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/>
            or
            <paramref name="sentences"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sentences"/></exception>
        </member>
        <member name="M:SharpNL.Document.GetEntities">
            <summary>
            Gets the all the entities in the sentences.
            </summary>
            <returns>All the entities in the sentences.</returns>
        </member>
        <member name="P:SharpNL.Document.Factory">
            <summary>
            Gets the factory associated to this document.
            </summary>
            <value>The factory associated to this document.</value>
        </member>
        <member name="P:SharpNL.Document.Language">
            <summary>
            Gets the language of this document.
            </summary>
            <value>The language of this document.</value>
        </member>
        <member name="P:SharpNL.Document.IsChunked">
            <summary>
            Gets a value indicating whether this document is chunked.
            </summary>
            <value><c>true</c> if this document is chunked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Document.IsParsed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SharpNL.Document"/> is parsed.
            </summary>
            <value><c>true</c> if parsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Document.IsSentencized">
            <summary>
            Gets a value indicating whether this instance is sentencized.
            </summary>
            <value><c>true</c> if this instance is sentencized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Document.IsTagged">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SharpNL.Document"/> has the Part-of-Speech tagged.
            </summary>
            <value><c>true</c> if this document has PoS tagged; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Document.IsTokenized">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpNL.Document"/> is tokenized.
            </summary>
            <value><c>true</c> if tokenized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Document.IsLemmatized">
            <summary>
            Gets a value indicating whether this instance is lemmatized.
            </summary>
            <value><c>true</c> if this instance is lemmatized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Document.Sentences">
            <summary>
            Gets the document sentences.
            </summary>
            <value>The document sentences.</value>
        </member>
        <member name="P:SharpNL.Document.Text">
            <summary>
            Gets the document text.
            </summary>
            <value>The document text.</value>
        </member>
        <member name="P:SharpNL.Document.GetEntityCount">
            <summary>
            Gets the get entity count.
            </summary>
            <value>The get entity count.</value>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.Category">
            <summary>
            Represents a category.
            </summary>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.ICategory">
            <summary>
            Represents a category.
            </summary>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.ICategory.Name">
            <summary>
            Gets or sets the category name.
            </summary>
            <value>The category name.</value>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.ICategory.Probability">
            <summary>
            Gets or sets the category probability.
            </summary>
            <value>The category probability.</value>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.Category.Name">
            <summary>
            Gets or sets the category name.
            </summary>
            <value>The category name string.</value>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.Category.Probability">
            <summary>
            Gets or sets the category probability.
            </summary>
            <value>The category probability.</value>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentCategorizerAnalyzer">
            <summary>
            Represents a document categorizer which allows the easy abstraction of the document categorization. 
            This class is thread-safe.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerAnalyzer.#ctor(SharpNL.DocumentCategorizer.IDocumentCategorizer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerAnalyzer"/> using the default weight.
            </summary>
            <param name="documentCategorizer">The document categorizer.</param>
            <exception cref="T:System.ArgumentNullException">documentCategorizer</exception>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerAnalyzer.#ctor(SharpNL.DocumentCategorizer.IDocumentCategorizer,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerAnalyzer"/> with the specified weight.
            </summary>
            <param name="documentCategorizer">The document categorizer.</param>
            <param name="weight">The analyzer weight.</param>
            <exception cref="T:System.ArgumentNullException">documentCategorizer</exception>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerAnalyzer.Evaluate(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Evaluates the specified document.
            </summary>
            <param name="factory">The factory used in this analysis.</param>
            <param name="document">The document to be analyzed.</param>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentCategorizerAnalyzer.DocumentCategorizer">
            <summary>
            Gets the document categorizer.
            </summary>
            <value>The document categorizer.</value>
        </member>
        <member name="T:SharpNL.Extensions.ArrayExtensions">
            <summary>
            Provide extension methods for arrays.
            </summary>
        </member>
        <member name="M:SharpNL.Extensions.ArrayExtensions.Add``1(``0[],``0)">
            <summary>
            Adds the specified <paramref name="value"/> to the array.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="array">The array.</param>
            <param name="value">The new element.</param>
            <returns>The original array with the new element.</returns>
        </member>
        <member name="T:SharpNL.Extensions.EnumerableExtensions">
            <summary>
            Provide a set of methods for enumerable data types.
            </summary>
        </member>
        <member name="M:SharpNL.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Iterates through an Enumerable and applies a <paramref name="action"/> for each element.
            </summary>
            <typeparam name="T">The type of the enumerator.</typeparam>
            <param name="ie">The enumerator.</param>
            <param name="action">The action.</param>
            <example>
            var values = new string[] { "a", "b", "c" };
            strings.Each( ( value, index ) =&gt; {
            // nice hack ;)
            });
            </example>
        </member>
        <member name="M:SharpNL.Extensions.EnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="first">The first enumerable.</param>
            <param name="second">The second enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">first or second.</exception>
        </member>
        <member name="T:SharpNL.Extensions.Extensions">
            <summary>
            Provides extensions methods for the <c>SharpNL.Text</c> namespace.
            </summary>
        </member>
        <member name="M:SharpNL.Extensions.Extensions.GetTokens(SharpNL.SentenceDetector.ISentence)">
            <summary>
            Gets the tokens from the <see cref="T:SharpNL.SentenceDetector.ISentence"/> object.
            </summary>
            <param name="sentence">The sentence.</param>
            <returns>
            A string array containing the tokens or a <c>null</c> value if the tokens are not available.
            </returns>
        </member>
        <member name="M:SharpNL.Extensions.Extensions.GetTags(SharpNL.SentenceDetector.ISentence)">
            <summary>
            Gets the part-of-speech tags from the <see cref="T:SharpNL.SentenceDetector.ISentence"/> object.
            </summary>
            <param name="sentence">The sentence.</param>
            <returns>A string array containing the tokens or a <c>null</c> value if the tokens are not available.</returns>
            <exception cref="T:System.ArgumentNullException">sentence</exception>
        </member>
        <member name="M:SharpNL.Extensions.Extensions.Stem(SharpNL.Tokenize.IToken,SharpNL.Stemmer.IStemmer)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="token">The token.</param>
            <param name="stemmer">The stemmer.</param>
            <returns>The stemmed word.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="token"/>
            or
            <paramref name="stemmer"/>
            </exception>
        </member>
        <member name="T:SharpNL.Extensions.GenericExtensions">
            <summary>
            Provide a set of methods for generic data types.
            </summary>
        </member>
        <member name="M:SharpNL.Extensions.GenericExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Performs the specified action on each element of the array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="array">The array.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:SharpNL.Extensions.GenericExtensions.In``1(``0,``0[])">
            <summary>
            Determines if the instance is equal to any of the specified values
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="input">The input object.</param>
            <param name="values">The values to be compared.</param>
            <returns><c>true</c> if the instance is equal to any of the specified values, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Extensions.GenericExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the instance is equal to any of the specified values
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="input">The input object.</param>
            <param name="values">The values to be compared.</param>
            <returns><c>true</c> if the instance is equal to any of the specified values, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Extensions.GenericExtensions.SubArray``1(``0[],System.Int32)">
            <summary>
            Gets sub array of an existing array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="data">The data.</param>
            <param name="index">The starting index of the sub array.</param>
            <returns>The sub array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/>
            </exception>
        </member>
        <member name="M:SharpNL.Extensions.GenericExtensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets sub array of an existing array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="data">The data.</param>
            <param name="index">The starting index of the sub array.</param>
            <param name="length">The length of the sub array.</param>
            <returns>The sub array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/>
            or
            <paramref name="length"/>
            </exception>
        </member>
        <member name="T:SharpNL.Extensions.ListExtensions">
            <summary>
            Provide a set of methods for lists.
            </summary>
        </member>
        <member name="M:SharpNL.Extensions.ListExtensions.Contains(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Determines whether the specified list contains the matching string value.
            </summary>
            <param name="list">The list.</param>
            <param name="value">The value to match.</param>
            <param name="ignoreCase">if set to <c>true</c> the case is ignored.</param>
            <returns><c>true</c> if the specified list contains the matching string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Extensions.ListExtensions.First``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first element of a list.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="list">The list.</param>
            <returns>The first element in the specified list.</returns>
        </member>
        <member name="M:SharpNL.Extensions.ListExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the last element of a list.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="list">The list.</param>
            <returns>The last element in the specified list.</returns>
        </member>
        <member name="M:SharpNL.Extensions.ListExtensions.Pop``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes the object at the top of the <see cref="T:System.Collections.Generic.IList`1"/>, and returns it.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="list">The list.</param>
            <returns>The object removed from the top of the <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            The <paramref name="list"/> is empty.
            or
            The <paramref name="list"/> is read-only.
            </exception>
        </member>
        <member name="T:SharpNL.Extensions.StringBuilderExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Extensions.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Reports the index number, or character position, of the first occurrence of a specified Unicode character in the current <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="value">The Unicode character you want to find.</param>
            <returns>The character position of the value parameter if the specified character is found, or -1 if it is not found.</returns>
            <remarks>
            The search for the value parameter is both case-sensitive and culture-sensitive.
            </remarks>
        </member>
        <member name="M:SharpNL.Extensions.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Reports the index number, or character position, of the first occurrence of a specified Unicode character in the current <see cref="T:System.Text.StringBuilder"/> object.
            The search starts at a specified character position.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="value">The Unicode character you want to find.</param>
            <param name="startIndex">The starting index number for the search.</param>
            <returns>The character position of the value parameter if the specified character is found, or -1 if it is not found.</returns>
            <remarks>
            <para>Index numbering starts at 0 (zero). The search ranges from <paramref name="startIndex"/> to the end of the string.</para>
            <para>The search for the value parameter is both case-sensitive and culture-sensitive.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex</exception>
        </member>
        <member name="M:SharpNL.Extensions.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String)">
            <summary>
            Reports the index number, or character position, of the first occurrence of the specified String object in the current <see cref="T:System.Text.StringBuilder"/> object.
            The search starts at a specified character position.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="value">The <see cref="T:System.String"/> object you want to find.</param>
            <returns>The character position of the <paramref name="value"/> parameter if the specified string is found, or -1 if it is not found. If value is empty, the return value is 0 (zero).</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.Boolean)">
            <summary>
            Reports the index number, or character position, of the first occurrence of the specified String object in the current <see cref="T:System.Text.StringBuilder"/> object.
            The search starts at a specified character position.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="value">The <see cref="T:System.String"/> object you want to find.</param>
            <param name="startIndex">The starting index number for the search.</param>
            <param name="ignoreCase">if set to <c>true</c> the case will be ignored during the comparison.</param>
            <returns>The character position of the <paramref name="value"/> parameter if the specified string is found, or -1 if it is not found. If value is empty, the return value is <paramref name="startIndex"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex</exception>
        </member>
        <member name="T:SharpNL.Extensions.StringExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.Contains(System.String[],System.String)">
            <summary>
            Determines whether the string array contains the specified <paramref name="value"/>.
            </summary>
            <param name="array">The string array.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the string array contains the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.EndsWith(System.String,System.String[])">
            <summary>
            Determines whether the end of this string instance matches any specified <paramref name="prefixes"/>.
            </summary>
            <param name="input">The input string.</param>
            <param name="prefixes">The prefixes to compare.</param>
            <returns><c>true</c> if a prefix from <paramref name="prefixes"/> matches the end of this string, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.EndsWith(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the end of this string instance matches any specified <paramref name="prefixes"/>.
            </summary>
            <param name="input">The input string.</param>
            <param name="comparison">One of the enumeration values that determines how this string and prefix are compared.</param>
            <param name="prefixes">The prefixes to compare.</param>
            <returns><c>true</c> if a prefix from <paramref name="prefixes"/> matches the end of this string, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the left part of a string. If the length is negative a relative length will be returned.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <returns>The left part of a string value.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.Replace(System.String,System.Char[],System.Char)">
            <summary>
            Returns a new string in which all occurrences of a specified Unicode characters in this instance are replaced with another specified Unicode character.
            </summary>
            <param name="value">The value.</param>
            <param name="oldChars">The Unicode characters to be replaced.</param>
            <param name="newChar">The Unicode character to replace all occurrences of <paramref name="oldChars"/>.</param>
            <returns>
            A string that is equivalent to this instance except that all instances of <paramref name="oldChars"/> are replaced with <paramref name="newChar"/>. 
            If any <paramref name="oldChars"/> is not found in the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the right part of a string. If the length is negative a relative length will be returned.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <returns>The right part of a string value.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.StartsWith(System.String,System.String[])">
            <summary>
            Determines whether the beginning of this string instance matches any specified <paramref name="prefixes"/>.
            </summary>
            <param name="input">The input string.</param>
            <param name="prefixes">The prefixes to compare.</param>
            <returns><c>true</c> if a prefix from <paramref name="prefixes"/> matches the beginning of this string, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.StartsWith(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the beginning of this string instance matches any specified <paramref name="prefixes"/>.
            </summary>
            <param name="input">The input string.</param>
            <param name="comparison">One of the enumeration values that determines how this string and prefix are compared.</param>
            <param name="prefixes">The prefixes to compare.</param>
            <returns><c>true</c> if a prefix from <paramref name="prefixes"/> matches the beginning of this string, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.TrimEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Trims the <paramref name="suffix"/> from the end of the input string.
            </summary>
            <param name="value">The input string.</param>
            <param name="suffix">The suffix to remove from the end of the input string.</param>
            <param name="comparison">One of the enumeration values that determines how this string and suffix are compared.</param>
            <returns>The trimmed result string.</returns>
        </member>
        <member name="M:SharpNL.Extensions.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Removes diacritics (diacritical mark, diacritical point, diacritical sign) from the input string.
            </summary>
            <param name="input">The input string.</param>
            <seealso href="http://en.wikipedia.org/wiki/Diacritic"/>
        </member>
        <member name="T:SharpNL.Formats.Brat.AttributeAnnotation">
            <summary>
            Represents a Brat attribute annotation.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Brat.BratAnnotation">
            <summary>
            Represents a Brat annotation.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratAnnotation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Brat.BratAnnotation"/> class.
            </summary>
            <param name="id">The annotation identifier.</param>
            <param name="type">The annotation type.</param>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratAnnotation.ToString">
            <summary>
            Returns a string that represents the current annotation.
            </summary>
            <returns>
            A string that represents the current annotation.
            </returns>
        </member>
        <member name="P:SharpNL.Formats.Brat.BratAnnotation.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:SharpNL.Formats.Brat.BratAnnotation.Type">
            <summary>
            Gets the annotation type.
            </summary>
            <value>The annotation type.</value>
        </member>
        <member name="M:SharpNL.Formats.Brat.AttributeAnnotation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Brat.AttributeAnnotation"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="type">The attribute type.</param>
            <param name="attachedTo">The attached to.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:SharpNL.Formats.Brat.AttributeAnnotation.ToString">
            <summary>
            Returns a string that represents the current annotation.
            </summary>
            <returns>
            A string that represents the current annotation.
            </returns>
        </member>
        <member name="P:SharpNL.Formats.Brat.AttributeAnnotation.AttachedTo">
            <summary>
            Gets the attached to.
            </summary>
            <value>The attached to.</value>
        </member>
        <member name="P:SharpNL.Formats.Brat.AttributeAnnotation.Value">
            <summary>
            Gets the attribute value.
            </summary>
            <value>The attribute value.</value>
        </member>
        <member name="T:SharpNL.Globalization.GenericCulture">
            <summary>
            Represents a generic/not implemented culture. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Globalization.GenericCulture.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Globalization.Culture"/> class.
            </summary>
            <param name="cultureName">The culture name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cultureName"/>.
            </exception>
            <exception cref="T:System.Globalization.CultureNotFoundException"/>
        </member>
        <member name="T:SharpNL.Inflecter.IInfleter">
            <summary>
            Represents a inflector that can manipulate a string pluralization. 
            </summary>
        </member>
        <member name="M:SharpNL.Inflecter.IInfleter.Pluralize(System.String,System.String)">
            <summary>
            Returns the plural of a given <paramref name="word" />.
            </summary>
            <param name="word">The word to pluralize.</param>
            <param name="pos">The part-of-speech tag.</param>
            <returns>The pluralized word.</returns>
        </member>
        <member name="M:SharpNL.Inflecter.IInfleter.Singularize(System.String,System.String)">
            <summary>
            Singularizes the specified <paramref name="word"/>.
            </summary>
            <param name="word">The word to singularize.</param>
            <param name="pos">The part-of-speech tag.</param>
            <returns>The singularized world.</returns>
        </member>
        <member name="T:SharpNL.Inflecter.Inflector">
            <summary>
            Represents the inflector manager. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Inflecter.Inflector.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Inflecter.Inflector"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Inflecter.Inflector.GetInfleter(System.String)">
            <summary>
            Gets the infleter associated to the given language code.
            </summary>
            <param name="language">The language code.</param>
            <returns>The associated language code or a <c>null</c> value if none.</returns>
        </member>
        <member name="M:SharpNL.Inflecter.Inflector.SetInflecter(System.String,SharpNL.Inflecter.IInfleter)">
            <summary>
            Sets a inflecter to the specified language code.
            </summary>
            <param name="language">The language code.</param>
            <param name="infleter">The infletor.</param>
            <exception cref="T:System.ArgumentNullException">
            language
            or
            infletor
            </exception>
        </member>
        <member name="M:SharpNL.Inflecter.Inflector.Pluralize(System.String,System.String)">
            <summary>
            Returns the plural of a given <paramref name="word" />.
            </summary>
            <param name="language">The language code.</param>
            <param name="word">The word to pluralize.</param>
            <returns>The pluralized word.</returns>
        </member>
        <member name="M:SharpNL.Inflecter.Inflector.Pluralize(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns the plural form of the given <paramref name="word" />.
            </summary>
            <param name="language">The language code.</param>
            <param name="word">The word to pluralize.</param>
            <param name="pos">The part-of-speech tag.</param>
            <param name="custom">The custom dictionary is for user-defined replacements. This value can be a <c>null</c> value.</param>
            <returns>The pluralized word.</returns>
        </member>
        <member name="M:SharpNL.Inflecter.Inflector.Singularize(System.String,System.String)">
            <summary>
            Returns the singular form of the given <paramref name="word" />.
            </summary>
            <param name="language">The language code.</param>
            <param name="word">The word to singularize.</param>
            <returns>The singularized word.</returns>
        </member>
        <member name="M:SharpNL.Inflecter.Inflector.Singularize(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns the singular form of the given <paramref name="word" />.
            </summary>
            <param name="language">The language code.</param>
            <param name="word">The word to singularize.</param>
            <param name="pos">The part-of-speech tag.</param>
            <param name="custom">The custom dictionary is for user-defined replacements. This value can be a <c>null</c> value.</param>
            <returns>The singularized word.</returns>
        </member>
        <member name="T:SharpNL.Inflecter.Lang.EnInflecter">
            <summary>
            Represents a english inflector.
            </summary>
            <remarks>
            The pluralizer is based on "An Algorithmic Approach to English Pluralization" by Damian Conway:
            <seealso href="http://www.csse.monash.edu.au/~damian/papers/HTML/Plurals.html"/> 
            
            The singularize is Adapted from Bermi Ferrer's Inflector for Python
            <see href="http://www.bermi.org/inflector/"/>
            
            License:
            
            Copyright (c) 2006 Bermi Ferrer Martinez
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software to deal in this software without restriction, including
            without limitation the rights to use, copy, modify, merge, publish,
            distribute, sublicense, and/or sell copies of this software, and to permit
            persons to whom this software is furnished to do so, subject to the following
            condition:
            
            THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THIS SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THIS SOFTWARE.
            </remarks>
        </member>
        <member name="M:SharpNL.Inflecter.Lang.EnInflecter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Inflecter.Lang.EnInflecter"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Inflecter.Lang.EnInflecter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Inflecter.Lang.EnInflecter"/> class using the classical inflection as default.
            </summary>
        </member>
        <member name="M:SharpNL.Inflecter.Lang.EnInflecter.Pluralize(System.String,System.String)">
            <summary>
            Returns the plural of a given <paramref name="word" />.
            </summary>
            <param name="word">The word to pluralize.</param>
            <param name="pos">The part-of-speec tag.</param>
            <returns>The pluralized word.</returns>
        </member>
        <member name="M:SharpNL.Inflecter.Lang.EnInflecter.Singularize(System.String,System.String)">
            <summary>
            Singularizes the specified <paramref name="word"/>.
            </summary>
            <param name="word">The word to singularize.</param>
            <param name="pos">The part-of-speech tag.</param>
            <returns>The singularized world.</returns>
        </member>
        <member name="P:SharpNL.Inflecter.Lang.EnInflecter.AdjectiveTag">
            <summary>
            Gets or sets the adjective tag.
            </summary>
            <value>The adjective tag.</value>
        </member>
        <member name="P:SharpNL.Inflecter.Lang.EnInflecter.AdverbTag">
            <summary>
            Gets or sets the adverb tag.
            </summary>
            <value>The adverb tag.</value>
        </member>
        <member name="P:SharpNL.Inflecter.Lang.EnInflecter.Classical">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SharpNL.Inflecter.Lang.EnInflecter"/> is using the classical inflection. e.g. where "matrix" pluralizes to "matrices" instead of "matrixes"
            </summary>
            <value><c>true</c> if using classical inflection; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Inflecter.Lang.EnInflecter.NounTag">
            <summary>
            Gets or sets the noun tag.
            </summary>
            <value>The noun tag.</value>
        </member>
        <member name="P:SharpNL.Inflecter.Lang.EnInflecter.VerbTag">
            <summary>
            Gets or sets the verb tag.
            </summary>
            <value>The verb tag.</value>
        </member>
        <member name="T:SharpNL.Lemmatizer.AbstractLemmatizer">
            <summary>
            Represents a abstract lemmatizer with cache support.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.Disposable">
            <summary>
            Represents a disposable object.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Disposable.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations 
            before the <see cref="T:SharpNL.Utility.Disposable"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Disposable.CheckDisposed">
            <summary>
            Checks the if the object is disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The object is disposed.</exception>
        </member>
        <member name="M:SharpNL.Utility.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SharpNL.Utility.Disposable.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Disposable.DisposeUnmanagedResources">
            <summary>
            Releases the native resources.
            </summary>
        </member>
        <member name="E:SharpNL.Utility.Disposable.Disposed">
            <summary>
            Occurs when the object is disposed.
            </summary>
        </member>
        <member name="P:SharpNL.Utility.Disposable.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.Lemmatizer.ILemmatizer">
            <summary>
            Represents a lemmatizer.
            </summary>
        </member>
        <member name="M:SharpNL.Lemmatizer.ILemmatizer.Lemmatize(System.String,System.String)">
            <summary>
            Returns the lemma of the specified word with the specified part-of-speech.
            </summary>
            <param name="word">The word whose lemmas are desired.</param>
            <param name="posTag">The part-of-speech of the specified word.</param>
            <returns>
            The lemma of the specified word given the specified part-of-speech.
            The inflected form may correspond to several lemmas (e.g. "found" -> find, found) - the correct choice depends on the context.
            </returns>
        </member>
        <member name="M:SharpNL.Lemmatizer.AbstractLemmatizer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Lemmatizer.AbstractLemmatizer"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Lemmatizer.AbstractLemmatizer.AddIgnore(System.String[])">
            <summary>
            Adds the specified words to the ignored list.
            </summary>
            <param name="words">The words to ignore.</param>
        </member>
        <member name="M:SharpNL.Lemmatizer.AbstractLemmatizer.CacheKey(System.String,System.String)">
            <summary>
            Gets the cache key using the given parameters.
            </summary>
            <param name="key">The key.</param>
            <param name="ns">The namespace.</param>
            <returns>The cache key.</returns>
        </member>
        <member name="M:SharpNL.Lemmatizer.AbstractLemmatizer.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Lemmatizer.AbstractLemmatizer.Lemmatize(System.String)">
            <summary>
            Returns the lemma of the specified word without a part-of-speech tag.
            </summary>
            <param name="word">The word whose lemmas are desired.</param>
            <returns>The lemma of the specified word without a part-of-speech tag.</returns>
        </member>
        <member name="M:SharpNL.Lemmatizer.AbstractLemmatizer.Lemmatize(System.String,System.String)">
            <summary>
            Returns the lemma of the specified word with the specified part-of-speech.
            </summary>
            <param name="word">The word whose lemmas are desired.</param>
            <param name="posTag">The part-of-speech of the specified word.</param>
            <returns>The lemma of the specified word given the specified part-of-speech.</returns>
        </member>
        <member name="M:SharpNL.Lemmatizer.AbstractLemmatizer.Process(System.String,System.String)">
            <summary>
            Processes the specified word into its lemmas form.
            A given inflected form may correspond to several lemmas (e.g. "found" -> find, found) - the correct choice depends on the context.
            </summary>
            <param name="word">The word to lemmatize.</param>
            <param name="posTag">The part-of-speech of the specified word.</param>
            <returns>The word lemmas.</returns>
        </member>
        <member name="T:SharpNL.Lemmatizer.DictionaryLemmatizer">
            <summary>
            Represents a dictionary based lemmatizer. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Lemmatizer.DictionaryLemmatizer.#ctor(System.IO.StreamReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Lemmatizer.DictionaryLemmatizer"/> using
            a <see cref="T:System.IO.StreamReader"/> to read the dictionary.
            </summary>
            <param name="reader">The stream reader.</param>
            <param name="cacheSize">The cache size.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/></exception>
            <remarks>Expected format per line (without spaces):
            <para>word [tab] tag [tab] lemma</para>
            or
            <para>word [tab] lemma</para></remarks>
        </member>
        <member name="M:SharpNL.Lemmatizer.DictionaryLemmatizer.Add(System.String,System.String)">
            <summary>
            Adds the specified lemma without a posTag.
            </summary>
            <param name="word">The word.</param>
            <param name="lemma">The lemma.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="word"/>
            or
            <paramref name="lemma"/>
            </exception>
        </member>
        <member name="M:SharpNL.Lemmatizer.DictionaryLemmatizer.Add(System.String,System.String,System.String[])">
            <summary>
            Adds the specified lemmas with a <paramref name="posTag"/>.
            </summary>
            <param name="word">The word.</param>
            <param name="posTag">The position tag.</param>
            <param name="lemmas">The lemmas.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="word"/>
            or
            <paramref name="lemmas"/>
            </exception>
        </member>
        <member name="M:SharpNL.Lemmatizer.DictionaryLemmatizer.Clear">
            <summary>
            Removes all the entries from this dictionary.
            </summary>
        </member>
        <member name="M:SharpNL.Lemmatizer.DictionaryLemmatizer.Process(System.String,System.String)">
            <summary>
            Processes the specified word into its lemma form.
            </summary>
            <param name="word">The word to lemmatize.</param>
            <param name="posTag">The part-of-speech of the specified word.</param>
            <returns>The word lemmas.</returns>
        </member>
        <member name="M:SharpNL.Lemmatizer.DictionaryLemmatizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Lemmatizer.DictionaryLemmatizer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SharpNL.Lemmatizer.DictionaryLemmatizer.Count">
            <summary>
            Gets the number of entries contained in the <see cref="T:SharpNL.Lemmatizer.DictionaryLemmatizer"/>.
            </summary>
            <value>The number of entries contained in the <see cref="T:SharpNL.Lemmatizer.DictionaryLemmatizer"/>.</value>
        </member>
        <member name="P:SharpNL.Lemmatizer.DictionaryLemmatizer.Item(System.String)">
            <summary>
            Gets the <see cref="T:ReadOnlyDictionary{string, string}"/> with the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns>The <see cref="T:ReadOnlyDictionary{string, string}"/> with the specified word or a <c>null</c> value.</returns>
        </member>
        <member name="T:SharpNL.Lemmatizer.LemmatizerAnalyzer">
            <summary>
            Represents a lemmatizer analyzer. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Lemmatizer.LemmatizerAnalyzer.#ctor(SharpNL.Lemmatizer.ILemmatizer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Lemmatizer.LemmatizerAnalyzer"/> class.
            </summary>
            <param name="lemmatizer">The lemmatizer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lemmatizer"/>
            </exception>
        </member>
        <member name="M:SharpNL.Lemmatizer.LemmatizerAnalyzer.Analyze(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Analyzes the specified document which can be several sentences, a sentence or even a single word.
            </summary>
            <param name="factory">The text factory. if this argument is <c>null</c> the <see cref="T:SharpNL.DefaultTextFactory"/> must 
            be used during the analysis.</param>
            <param name="document">The <see cref="T:SharpNL.IDocument"/> to be analyzed.</param>
        </member>
        <member name="P:SharpNL.Lemmatizer.LemmatizerAnalyzer.Weight">
            <summary>
            Property used to control the influence of a analyzer during the execution in the <see cref="T:SharpNL.Analyzer.AggregateAnalyzer"/>.
            The lower values will be executed first.
            </summary>
            <value>Returns a floating point value indicating the relative weight a task.</value>
            <remarks>
            The standard weights are:
            <list type="table">
             <listheader>
              <term>Weight</term><description>Analyzer</description>
             </listheader>
             <item><term>0.0</term><description>Sentence detection.</description></item>
             <item><term>1.0</term><description>Tokenization.</description></item>
             <item><term>2.0</term><description>Document categorizer.</description></item>
             <item><term>3.0</term><description>Entity recognition.</description></item>
             <item><term>4.0</term><description>Part-Of-Speech tagging.</description></item>
             <item><term>5.0</term><description>Chunking</description></item>
             <item><term>6.0</term><description>Parsing</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:SharpNL.NameFind.Entity">
            <summary>
            Represents a generic entity.
            </summary>
        </member>
        <member name="T:SharpNL.NameFind.IEntity">
            <summary>
            Represents a named entity.
            </summary>
        </member>
        <member name="P:SharpNL.NameFind.IEntity.Span">
            <summary>
            Gets the entity span.
            </summary>
            <value>The entity span.</value>
        </member>
        <member name="M:SharpNL.NameFind.Entity.#ctor(SharpNL.Utility.Span,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.Entity"/> class.
            </summary>
            <param name="span">The span.</param>
            <param name="tokens">The sentence tokens.</param>
            <exception cref="T:System.ArgumentNullException">span</exception>
        </member>
        <member name="M:SharpNL.NameFind.Entity.#ctor(SharpNL.Utility.Span,SharpNL.SentenceDetector.Sentence)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.Entity"/> class.
            </summary>
            <param name="span">The span.</param>
            <param name="sentence">The sentence.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="span"/>
            or
            <paramref name="sentence"/>
            </exception>
        </member>
        <member name="P:SharpNL.NameFind.Entity.Probability">
            <summary>
            Gets the entity probability.
            </summary>
            <value>The entity probability.</value>
        </member>
        <member name="P:SharpNL.NameFind.Entity.Span">
            <summary>
            Gets the entity span.
            </summary>
            <value>The entity span.</value>
        </member>
        <member name="P:SharpNL.NameFind.Entity.Start">
            <summary>
            Gets the start position in the sentence.
            </summary>
            <value>The start position in the sentence.</value>
        </member>
        <member name="P:SharpNL.NameFind.Entity.CoveredText">
            <summary>
            Gets the covered text.
            </summary>
            <value>The covered text.</value>
        </member>
        <member name="P:SharpNL.NameFind.Entity.Type">
            <summary>
            Gets the entity type.
            </summary>
            <value>The entity type.</value>
        </member>
        <member name="T:SharpNL.NameFind.NameFinderAnalyzer">
            <summary>
            Represents a name finder analyzer which allows the easy abstraction of 
            the name finder (Named Entity Recognizer). This class is thread-safe.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderAnalyzer.#ctor(SharpNL.NameFind.ITokenNameFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameFinderAnalyzer"/> using the default analyzer weight.
            </summary>
            <param name="nameFinder">The name finder.</param>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderAnalyzer.#ctor(SharpNL.NameFind.ITokenNameFinder,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameFinderAnalyzer"/> with the specified weight.
            </summary>
            <param name="nameFinder">The name finder.</param>
            <param name="weight">The analyzer weight.</param>
            <exception cref="T:System.ArgumentNullException">nameFinder</exception>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderAnalyzer.Evaluate(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Evaluates the specified document.
            </summary>
            <param name="factory">The factory used in this analysis.</param>
            <param name="document">The document to be analyzed.</param>
        </member>
        <member name="P:SharpNL.NameFind.NameFinderAnalyzer.NameFinder">
            <summary>
            Gets the name finder.
            </summary>
            <value>The name finder.</value>
        </member>
        <member name="T:SharpNL.Parser.ParserAnalyzer">
            <summary>
            Represents a parser analyzer which allows the easy abstraction of the parsing operation. 
            This class is thread-safe.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.ParserAnalyzer.#ctor(SharpNL.Parser.IParser)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ParserAnalyzer"/> using the default weight. 
            </summary>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:SharpNL.Parser.ParserAnalyzer.#ctor(SharpNL.Parser.IParser,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ParserAnalyzer"/> with the specified weight.
            </summary>
            <param name="parser">The parser.</param>
            <param name="weight">The analyzer weight.</param>
            <exception cref="T:System.ArgumentNullException">parser</exception>
        </member>
        <member name="M:SharpNL.Parser.ParserAnalyzer.Evaluate(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Evaluates the specified document.
            </summary>
            <param name="factory">The factory used in this analysis.</param>
            <param name="document">The document to be analyzed.</param>
        </member>
        <member name="P:SharpNL.Parser.ParserAnalyzer.Parser">
            <summary>
            Gets the parser.
            </summary>
            <value>The parser.</value>
        </member>
        <member name="T:SharpNL.Chunker.ChunkerFactory">
            <summary>
            Represent the default chunker factory.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.BaseToolFactory.Initialize(SharpNL.Utility.Serialization.ArtifactProvider)">
            <summary>
            Initializes the tool factory with the specified artifact provider.
            </summary>
            <param name="artifactProvider">The artifact provider.</param>
        </member>
        <member name="M:SharpNL.Utility.BaseToolFactory.CreateArtifactSerializers(SharpNL.Utility.Serialization.ArtifactProvider)">
            <summary>
            Creates the artifact serializers for the <see cref="P:SharpNL.Utility.BaseToolFactory.ArtifactProvider"/>.
            The subclasses should call the <see cref="M:SharpNL.Utility.Serialization.ArtifactProvider.RegisterArtifactType(System.String,SharpNL.Utility.Serialization.SerializeDelegate,SharpNL.Utility.Serialization.DeserializeDelegate)"/> method to register an new artifact type.
            </summary>
            <param name="provider">The artifact provider.</param>
        </member>
        <member name="M:SharpNL.Utility.BaseToolFactory.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts. 
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Invalid artifact map.</exception>
        </member>
        <member name="M:SharpNL.Utility.BaseToolFactory.CreateArtifactMap">
            <summary>
            Creates a dictionary with pairs of keys and objects. 
            The models implementation should call this constructor that creates a model programmatically.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.BaseToolFactory.CreateManifestEntries">
            <summary>
            Creates the manifest entries that will be added to the model manifest
            </summary>
            <returns>The manifest entries to added to the model manifest.</returns>
        </member>
        <member name="M:SharpNL.Utility.BaseToolFactory.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="P:SharpNL.Utility.BaseToolFactory.ArtifactProvider">
            <summary>
            Gets the artifact provider.
            </summary>
            <value>The artifact provider.</value>
        </member>
        <member name="P:SharpNL.Utility.BaseToolFactory.Name">
            <summary>
            Gets the tool factory name.
            </summary>
            <value>The tool factory name.</value>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerFactory.GetSequenceValidator">
            <summary>
            Gets the sequence validator.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerFactory.GetContextGenerator">
            <summary>
            Gets the context generator.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.ParserChunkerFactory.GetContextGenerator">
            <summary>
            Gets the context generator.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.ParserChunkerFactory.GetSequenceValidator">
            <summary>
            Gets the sequence validator.
            </summary>
        </member>
        <member name="T:SharpNL.Parser.ParserCrossEvaluator">
            <summary>
            Represents a cross validator for <see cref="T:SharpNL.Parser.ParserModel"/> models.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.Evaluation.CrossEvaluator`2">
            <summary>
            Provides the base class for cross evaluators.
            </summary>
            <typeparam name="T">The sample type.</typeparam>
            <typeparam name="P">The type of the objects to be evaluated.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossEvaluator`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Evaluation.CrossEvaluator`2"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossEvaluator`2.Evaluate(SharpNL.Utility.IObjectStream{`0},System.Int32)">
            <summary>
            Evaluates the samples with a given number of partitions.
            </summary>
            <param name="samples">The samples to train and test.</param>
            <param name="partitions">The number of folds.</param>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossEvaluator`2.Process(SharpNL.Utility.Evaluation.CrossValidationPartitioner{`0}.TrainingSampleStream)">
            <summary>
            Processes the specified sample stream.
            </summary>
            <param name="sampleStream">The sample stream.</param>
            <returns>The computed f-mesure of the sample stream.</returns>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.CrossEvaluator`2.FMeasure">
            <summary>
            Gets the f-measure.
            </summary>
            <value>The f-measure.</value>
        </member>
        <member name="M:SharpNL.Parser.ParserCrossEvaluator.#ctor(System.String,SharpNL.Utility.TrainingParameters,SharpNL.Parser.AbstractHeadRules,SharpNL.Parser.ParserType,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.Parser.Parse}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ParserCrossEvaluator"/> class.
            </summary>
            <param name="languageCode">The language of the training data.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <param name="parserType">The parser model type.</param>
            <param name="monitors">The training monitors.</param>
            <param name="headRules">The headrules.</param>
        </member>
        <member name="M:SharpNL.Parser.ParserCrossEvaluator.Process(SharpNL.Utility.Evaluation.CrossValidationPartitioner{SharpNL.Parser.Parse}.TrainingSampleStream)">
            <summary>
            Processes the specified sample stream.
            </summary>
            <param name="sampleStream">The sample stream.</param>
            <returns>The computed f-measure of the sample stream.</returns>
        </member>
        <member name="T:SharpNL.POSTag.POSTaggerAnalyzer">
            <summary>
            Represents a part-of-speech analyzer which allows the easy abstraction of 
            the part-of-speech tagging. This class is thread-safe.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerAnalyzer.#ctor(SharpNL.POSTag.POSTaggerME)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.POSTaggerAnalyzer"/> using the default analyzer weight.
            </summary>
            <param name="tagger">The part-of-speech tagger used by this analyzer.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerAnalyzer.#ctor(SharpNL.POSTag.POSTaggerME,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Analyzer.AbstractAnalyzer"/> using a custom analyzer weight.
            </summary>
            <param name="tagger">The part-of-speech tagger used by this analyzer.</param>
            <param name="weight">The analyzer weight.</param>
            <exception cref="T:System.ArgumentNullException">tagger</exception>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerAnalyzer.Evaluate(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Evaluates the specified document.
            </summary>
            <param name="factory">The factory used in this analysis.</param>
            <param name="document">The document to be analyzed.</param>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerAnalyzer.Tagger">
            <summary>
            Gets the part-of-speech tagger.
            </summary>
            <value>The part-of-speech tagger.</value>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerAnalyzer.AddContextProvider">
            <summary>
            Gets or sets the additional context provider.
            </summary>
            <value>The additional context provider.</value>
        </member>
        <member name="T:SharpNL.POSTag.POSTaggerAnalyzer.dAddContextProvider">
            <summary>
            Delegate that provides the additional context for the sentences to tag the part-of-speech tags.
            </summary>
            <param name="document">The document.</param>
            <param name="sentence">The sentence.</param>
            <returns>The return value must be a <c>string[][]</c> array or a <c>null</c> value.</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.ISentence">
            <summary>
            Represents a sentence.
            </summary>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Categories">
            <summary>
            Gets the sentence categories.
            </summary>
            <value>The sentence categories.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Chunks">
            <summary>
            Gets the sentence chunks.
            </summary>
            <value>The sentence chunks.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Document">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.End">
            <summary>
            Gets the sentence end position.
            </summary>
            <value>The sentence end position.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Entities">
            <summary>
            Gets the sentence entities.
            </summary>
            <value>The sentence entities.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Length">
            <summary>
            Gets the sentence length.
            </summary>
            <value>The sentence length.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Parse">
            <summary>
            Gets the parsed sentence.
            </summary>
            <value>The parsed sentence.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Start">
            <summary>
            Gets the sentence start position.
            </summary>
            <value>The sentence start position.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Text">
            <summary>
            Gets the sentence text.
            </summary>
            <value>The sentence text.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.TagProbability">
            <summary>
            Gets the part-of-speech tagging probability.
            </summary>
            <value>The part-of-speech tagging probability.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.ISentence.Tokens">
            <summary>
            Gets the sentence tokens.
            </summary>
            <value>The sentence tokens.</value>
        </member>
        <member name="T:SharpNL.SentenceDetector.Sentence">
            <summary>
            Represents a sentence.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.Sentence.#ctor(System.Int32,System.Int32,SharpNL.IDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.Sentence"/> class.
            </summary>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
            <param name="document">The document where the sentence is located.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.Sentence.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{SharpNL.Tokenize.Token},SharpNL.IDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.Sentence"/> class.
            </summary>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
            <param name="tokens">The sentence tokens.</param>
            <param name="document">The document where the sentence is located.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.Sentence.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from the current <see cref="T:SharpNL.SentenceDetector.Sentence"/> object. 
            The substring starts at a specified index number, or character position, in the <see cref="T:SharpNL.SentenceDetector.Sentence"/> object and has a specified length.
            </summary>
            <param name="startIndex">The starting index number in the substring.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A <see cref="T:System.String"/> object equivalent to the substring of the length specified in the length parameter, beginning at the starting index number in the current sentence object.</returns>
            <remarks>The startIndex parameter is zero-based.</remarks>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Categories">
            <summary>
            Gets the sentence categories.
            </summary>
            <value>The sentence categories.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Chunks">
            <summary>
            Gets the sentence chunks.
            </summary>
            <value>The sentence chunks.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Document">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.End">
            <summary>
            Gets the sentence end position.
            </summary>
            <value>The sentence end position.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Entities">
            <summary>
            Gets the sentence entities.
            </summary>
            <value>The sentence entities.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Length">
            <summary>
            Gets the sentence length.
            </summary>
            <value>The sentence length.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Parse">
            <summary>
            Gets the parsed sentence.
            </summary>
            <value>The parsed sentence.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Start">
            <summary>
            Gets the sentence start position.
            </summary>
            <value>The sentence start position.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Text">
            <summary>
            Gets the sentence text.
            </summary>
            <value>The sentence text.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.Tokens">
            <summary>
            Gets the sentence tokens.
            </summary>
            <value>The sentence tokens.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.Sentence.TagProbability">
            <summary>
            Gets the tokens probability.
            </summary>
            <value>The tokens probability.</value>
        </member>
        <member name="T:SharpNL.Stemmer.AbstractStemmer">
            <summary>
            Represents a abstract stemmer.
            </summary>
        </member>
        <member name="T:SharpNL.Stemmer.IStemmer">
            <summary>
            The stemmer is reducing a word to its stem.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.IStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractStemmer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.AbstractStemmer"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractStemmer.AddIgnore(System.String[])">
            <summary>
            Adds the specified words to the ignored list.
            </summary>
            <param name="words">The words to ignore.</param>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractStemmer.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed form.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractStemmer.Stem(System.String,System.String)">
            <summary>
            Reduces the given word with a specific part-of-speech tag into its stem.
            </summary>
            <param name="word">The word to be stemmed.</param>
            <param name="posTag">The part-of-speech tag.</param>
            <returns>The stemmed form.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractStemmer.GetStem(System.String)">
            <summary>
            Gets a <see cref="T:SharpNL.Stemmer.Stem"/> representation from the given <paramref name="word"/>.
            </summary>
            <param name="word">The word to be stemmed.</param>
            <returns>A <see cref="T:SharpNL.Stemmer.Stem"/> object.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractStemmer.GetStem(System.String,System.String)">
            <summary>
            Gets a <see cref="T:SharpNL.Stemmer.Stem"/> representation from the given <paramref name="word"/>
            with a specific part-of-speech.
            </summary>
            <param name="word">The word to be stemmed.</param>
            <param name="posTag">The part-of-speech tag.</param>
            <returns>A <see cref="T:SharpNL.Stemmer.Stem"/> object.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractStemmer.Stemming(System.String,System.String)">
            <summary>
            Performs stemming on the specified word.
            </summary>
            <param name="word">The word to be stemmed.</param>
            <param name="posTag">The part-of-speech tag or a <c>null</c> value if none.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="T:SharpNL.Stemmer.AbstractAlgorithm">
            <summary>
            Represents a abstract stemming algorithm.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractAlgorithm.ContainsVowel(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> contains a vowel.
            </summary>
            <param name="value">The input string.</param>
            <returns><c>true</c> if the specified <see cref="T:System.String"/> contains a vowel; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractAlgorithm.IsConsonant(System.Char)">
            <summary>
            Determines whether the specified character is a consonant.
            </summary>
            <param name="chr">The character.</param>
            <returns><c>true</c> if the specified character is a consonant; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractAlgorithm.IsConsonant(System.Text.StringBuilder,System.Int32)">
            <summary>
            Determines whether the character at the specified <paramref name="index"/> is a consonant.
            </summary>
            <param name="sb">The sb.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the character at the specified <paramref name="index"/> is a consonant; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractAlgorithm.IsVowel(System.Char)">
            <summary>
            Determines whether the specified character is vowel.
            </summary>
            <param name="chr">The character.</param>
            <returns><c>true</c> if the specified character is vowel; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.AbstractAlgorithm.IsVowel(System.Text.StringBuilder,System.Int32)">
            <summary>
            Determines whether the character at the specified <paramref name="index"/> is vowel.
            </summary>
            <param name="sb">The sb.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the character is vowel; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="P:SharpNL.Stemmer.AbstractAlgorithm.Vowels">
            <summary>
            Gets or sets the vowels.
            </summary>
            <value>The vowels.</value>
        </member>
        <member name="T:SharpNL.Stemmer.Porter.Algorithm.English">
            <summary>
            Represents a English Porter Stemmer algorithm. 
            This class cannot be inherited.
            </summary>
            <remarks>
            The English stemming algorithm can be found in
            <see cref="!:http://snowball.tartarus.org/algorithms/english/stemmer.html"/>
            </remarks>
        </member>
        <member name="T:SharpNL.Stemmer.Porter.PorterAlgorithm">
            <summary>
            Represents a Porter stemming algorithm.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.PorterAlgorithm.Cons(System.Text.StringBuilder,System.Int32)">
            <summary>
            cons(i) is true &lt;=&gt; b[i] is a consonant.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.PorterAlgorithm.FindR(System.String)">
            <summary>
            Return the standard interpretations of the string regions (R1 and R2).
            </summary>
            <param name="word">The word whose regions R1 and R2 are determined.</param>
            <returns>The region for the respective word.</returns>
            <remarks>
            A detailed description of how to define R1 and R2 
            can be found at <see cref="!:http://snowball.tartarus.org/texts/r1r2.html"/>
            </remarks>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.PorterAlgorithm.FindRV(System.String)">
            <summary>
            Return the standard interpretation of the string region RV.
            </summary>
            <param name="word">The word whose region RV is determined.</param>
            <returns>The region RV for the respective word.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.PorterAlgorithm.Stem(System.String)">
            <summary>
            Stems the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns>The stem.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.Algorithm.English.Stem(System.String)">
            <summary>
            Stems the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns>The stem.</returns>
        </member>
        <member name="T:SharpNL.Stemmer.Porter.Algorithm.Portuguese">
            <summary>
            Represents a Portuguese stemmer using Porter's algorithm. This class cannot be inherited.
            </summary>
            <remarks>
            This implementation follows the definition in:
            <see cref="!:http://snowball.tartarus.org/algorithms/portuguese/stemmer.html"/>
            
            Note: I remove the Step1 3rd rule [ución -&gt; uciones], it's clearly not Portuguese :P
            
            </remarks>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.Algorithm.Portuguese.Stem(System.String)">
            <summary>
            Stems the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns>The stem.</returns>
        </member>
        <member name="T:SharpNL.Stemmer.Porter.PorterStemmer">
            <summary>
            Represents a Porter stemmer using the Snowball stemmers developed by Martin Porter.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.PorterStemmer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.Porter.PorterStemmer"/> using the english algorithm to stem the inputs.
            </summary>
            <remarks>
            This constructor exists for OpenNLP compatibility.
            </remarks>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.PorterStemmer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.Porter.PorterStemmer"/> class.
            </summary>
            <param name="language">The language code.</param>
            <exception cref="T:System.NotSupportedException">The specified language is not supported.</exception>
        </member>
        <member name="M:SharpNL.Stemmer.Porter.PorterStemmer.Stemming(System.String,System.String)">
            <summary>
            Performs stemming on the specified word.
            </summary>
            <param name="word">The word to be stemmed.</param>
            <param name="posTag">The part-of-speech tag or a <c>null</c> value if none.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="T:SharpNL.Stemmer.RSLP.RSLPRule">
            <summary>
            Represents a RSLP rule. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPRule.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.RSLP.RSLPRule"/> class.
            </summary>
            <param name="suffix">The suffix.</param>
            <param name="minSize">The minimum size.</param>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPRule.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.RSLP.RSLPRule"/> class.
            </summary>
            <param name="suffix">The suffix.</param>
            <param name="minSize">The minimum size.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPRule.#ctor(System.String,System.Int32,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.RSLP.RSLPRule"/> class.
            </summary>
            <param name="suffix">The suffix.</param>
            <param name="minSize">The minimum size.</param>
            <param name="replacement">The replacement.</param>
            <param name="exceptions">The exceptions.</param>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPRule.Exceptions">
            <summary>
            Gets the exceptions.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPRule.Suffix">
            <summary>
            Gets the suffix.
            </summary>
            <value>The suffix.</value>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPRule.MinStemSize">
            <summary>
            Gets the minimum size of the stem.
            </summary>
            <value>The minimum size of the stem.</value>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPRule.Replacement">
            <summary>
            Gets the replacement string.
            </summary>
            <value>The replacement string.</value>
        </member>
        <member name="T:SharpNL.Stemmer.RSLP.RSLPStemmer">
            <summary>
            A Stemming Algorithm for the Portuguese Language. This class cannot be inherited.
            </summary>
            <remarks>
            This stemmer is based on the algorithm presented in the paper "A Stemming # Algorithm for 
            the Portuguese Language" by Viviane Moreira Orengo and Christian Huyck.
            <para>
            The original publication is available at:
            <see cref="!:http://www.inf.ufrgs.br/~viviane/rslp/"/>.
            </para>
            <para>
            The original code in C can be obtained here:
            <see cref="!:http://www.inf.ufrgs.br/~arcoelho/rslp/integrando_rslp.html"/>
            </para>
            </remarks>
        </member>
        <member name="F:SharpNL.Stemmer.RSLP.RSLPStemmer.DefaultSteps">
            <summary>
            Gets the default steps.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPStemmer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Stemmer.RSLP.RSLPStemmer"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPStemmer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.RSLP.RSLPStemmer"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPStemmer.SetFlow(System.String,System.String,System.String)">
            <summary>
            Sets the evaluation flow for the specified <paramref name="stepName"/>.
            </summary>
            <param name="stepName">Name of the step.</param>
            <param name="passStep">The pass step. This value can be null.</param>
            <param name="failStep">The fail step. This value can be null.</param>
            <exception cref="T:System.ArgumentNullException">stepName</exception>
            <exception cref="T:System.ArgumentException">
            The specified step does not exist.;stepName
            or
            The specified step does not exist.;passStep
            or
            The specified step does not exist.;failStep
            </exception>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPStemmer.Stemming(System.String,System.String)">
            <summary>
            Performs stemming on the specified word.
            </summary>
            <param name="word">The word to be stemmed.</param>
            <param name="posTag">The part-of-speech tag or a <c>null</c> value if none.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStemmer.RemoveDiacritics">
            <summary>
            Gets or sets a value indicating whether the diacritics should be removed. The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if the diacritics should be removed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStemmer.Steps">
            <summary>
            Gets or sets the steps of this stemmer.
            </summary>
            <value>The steps of this stemmer.</value>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStemmer.Start">
            <summary>
            Gets or sets the starting step.
            </summary>
            <value>The starting step.</value>
            <exception cref="T:System.ArgumentException">The specified step does not exist.</exception>
        </member>
        <member name="T:SharpNL.Stemmer.RSLP.RSLPStep">
            <summary>
            Represents a RSLP step. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPStep.#ctor(System.String,System.UInt32,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.RSLP.RSLPStep"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="minWordLen">Minimum length of the word.</param>
            <param name="entireWord">if set to <c>true</c> [entire word].</param>
            <param name="endWords">The end words.</param>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPStep.Add(SharpNL.Stemmer.RSLP.RSLPRule)">
            <summary>
            Adds the specified rule.
            </summary>
            <param name="rule">The rule.</param>
            <exception cref="T:System.ArgumentNullException">rule</exception>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPStep.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Stemmer.RSLP.RSLPStep.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStep.StepName">
            <summary>
            Gets or sets the name of the step.
            </summary>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStep.Count">
            <summary>
            Gets the number of rules in this step.
            </summary>
            <value>The number of rules in this step.</value>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStep.MinWordLen">
            <summary>
            Gets or sets the minimum length of the word.
            </summary>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStep.EntireWord">
            <summary>
            Gets or sets a value indicating whether is needed to compare the entire word.
            </summary>
            <value><c>true</c> if is needed to compare the entire word; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStep.EndWords">
            <summary>
            Gets or sets the end of word conditions array: check words that end with these strings.
            </summary>
        </member>
        <member name="P:SharpNL.Stemmer.RSLP.RSLPStep.Rules">
            <summary>
            Gets the rules.
            </summary>
            <value>The rules.</value>
        </member>
        <member name="T:SharpNL.Stemmer.Stem">
            <summary>
            Represents a stem (the core meaning) and tag data associated with a given word. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.Stem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.Stem"/> class without a part-of-speech tag.
            </summary>
            <param name="value">The stem value.</param>
            <param name="word">The inflected word.</param>
        </member>
        <member name="M:SharpNL.Stemmer.Stem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.Stem"/> with the given 
            </summary>
            <param name="value">The stem value.</param>
            <param name="tag">The stem tag.</param>
            <param name="word">The inflected word.</param>
        </member>
        <member name="M:SharpNL.Stemmer.Stem.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:SharpNL.Stemmer.Stem.Equals(SharpNL.Stemmer.Stem)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Stemmer.Stem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Stemmer.Stem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Stemmer.Stem.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:SharpNL.Stemmer.Stem.op_Implicit(SharpNL.Stemmer.Stem)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:SharpNL.Stemmer.Stem"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="stem">The stem.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Stem.Affix">
            <summary>
            Gets the affix of this stem.
            </summary>
            <value>The affix of the stem. Often with grammatical functions.</value>
        </member>
        <member name="P:SharpNL.Stemmer.Stem.Tag">
            <summary>
            Gets or sets the stem tag.
            </summary>
            <value>The stem tag.</value>
        </member>
        <member name="P:SharpNL.Stemmer.Stem.Value">
            <summary>
            Gets or sets the stem value.
            </summary>
            <value>The stem value.</value>
        </member>
        <member name="P:SharpNL.Stemmer.Stem.Word">
            <summary>
            Gets or sets the inflected word.
            </summary>
            <value>The inflected word.</value>
        </member>
        <member name="T:SharpNL.Stemmer.Suffixes">
            <summary>
            Represents a group of suffixes. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.Suffixes.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Stemmer.Suffixes"/> class with the specified suffixes.
            </summary>
            <param name="values">The suffixes of this instance.</param>
        </member>
        <member name="M:SharpNL.Stemmer.Suffixes.IsMatch(System.String)">
            <summary>
            Indicates whether the <paramref name="input"/> string finds a suffix in this instance.
            </summary>
            <param name="input">The string to search for a match.</param>
            <returns><c>true</c> if the specified input matches with a suffix in this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.Suffixes.TryMatch(System.String,System.String@)">
            <summary>
            Searches the specified <paramref name="input"/> string for the first occurrence of 
            the suffixes specified in the <see cref="T:SharpNL.Stemmer.Suffixes"/> constructor.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="suffix">When this method returns, contains the matched suffix, if the conversion succeeded or a <c>null</c> value if fails.</param>
            <returns><c>true</c> if the search finds a match, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Stemmer.Suffixes.GetMatches(System.String)">
            <summary>
            Gets all the matched suffixes from the <paramref name="input"/> string.
            </summary>
            <param name="input">The string to search for the matches.</param>
            <returns>A array of matching suffixes.</returns>
        </member>
        <member name="T:SharpNL.Summarizer.AbstractSummarizer">
            <summary>
            Represents a abstract summarizer.
            </summary>
        </member>
        <member name="T:SharpNL.Summarizer.ISummarizer">
            <summary>
            Represents a text summarizer.
            </summary>
        </member>
        <member name="M:SharpNL.Summarizer.ISummarizer.Summarize(SharpNL.IDocument)">
            <summary>
            Summarizes the specified document.
            </summary>
            <param name="document">The document.</param>
            <returns>The summarized string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="document"/>
            </exception>
        </member>
        <member name="M:SharpNL.Summarizer.ISummarizer.Summarize(System.String,SharpNL.SentenceDetector.ISentenceDetector,SharpNL.Tokenize.ITokenizer)">
            <summary>
            Summarizes the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="sentenceDetector">The sentence detector.</param>
            <param name="tokenizer">The tokenizer.</param>
            <returns>The summarized string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentenceDetector"/>
            or
            <paramref name="tokenizer"/>
            </exception>
        </member>
        <member name="M:SharpNL.Summarizer.AbstractSummarizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Summarizer.AbstractSummarizer"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Summarizer.AbstractSummarizer.#ctor(SharpNL.Utility.IStopwordProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Summarizer.AbstractSummarizer"/> class with a specified stopword provider.
            </summary>
            <param name="stopwordProvider">The stopword provider.</param>
        </member>
        <member name="M:SharpNL.Summarizer.AbstractSummarizer.GetWordFrequency(SharpNL.IDocument,System.Boolean)">
            <summary>
            Gets the word frequency in the document.
            </summary>
            <param name="document">The document.</param>
            <param name="ignoreCase">if set to <c>true</c> the comparison should ignore the case.</param>
            <returns>A dictionary containing each word and its frequency.</returns>
        </member>
        <member name="M:SharpNL.Summarizer.AbstractSummarizer.IsStopword(System.String)">
            <summary>
            Determines whether the specified word is a stopword.
            </summary>
            <param name="word">The word check.</param>
            <returns><c>true</c> if the specified word is a stopword; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Summarizer.AbstractSummarizer.ProcessSummarization(SharpNL.IDocument)">
            <summary>
            Processes the summarization.
            </summary>
            <param name="document">The tokenized document.</param>
            <returns>The summarized string.</returns>
        </member>
        <member name="M:SharpNL.Summarizer.AbstractSummarizer.Summarize(SharpNL.IDocument)">
            <summary>
            Summarizes the specified document.
            </summary>
            <param name="document">The document to be summarized.</param>
            <returns>The summarized string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="document"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="document"/> does not have any sentence detected.
            </exception>
        </member>
        <member name="M:SharpNL.Summarizer.AbstractSummarizer.Summarize(System.String,SharpNL.SentenceDetector.ISentenceDetector,SharpNL.Tokenize.ITokenizer)">
            <summary>
            Summarizes the specified input using the specified <paramref name="sentenceDetector"/> and <paramref name="tokenizer"/>.
            </summary>
            <param name="input">The input string to be summarized.</param>
            <param name="sentenceDetector">The sentence detector.</param>
            <param name="tokenizer">The tokenizer.</param>
            <returns>The summarized string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentenceDetector"/>
            or
            <paramref name="tokenizer"/>
            </exception>
        </member>
        <member name="P:SharpNL.Summarizer.AbstractSummarizer.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether the summarizer should ignore case. The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if the summarizer should ignore case; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.Summarizer.SimpleSummarizer">
            <summary>
            A very simple text summarizer. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Summarizer.SimpleSummarizer.#ctor(SharpNL.Utility.IStopwordProvider,SharpNL.Summarizer.SimpleSummarizerMethods)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Summarizer.SimpleSummarizer"/> class.
            </summary>
            <param name="stopwordProvider">The stopword provider.</param>
            <param name="method">The summarization method.</param>
        </member>
        <member name="P:SharpNL.Summarizer.SimpleSummarizer.NumberOfSentences">
            <summary>
            Gets or sets the amount of sentences in the summarization output. The default value is 5.
            </summary>
            <value>The amount of sentences in the summarization output.</value>
        </member>
        <member name="P:SharpNL.Summarizer.SimpleSummarizer.Method">
            <summary>
            Gets the summarization method.
            </summary>
            <value>The summarization method.</value>
        </member>
        <member name="T:SharpNL.Summarizer.SimpleSummarizerMethods">
            <summary>
            Enumerates the simple summarizer methods.
            </summary>
        </member>
        <member name="F:SharpNL.Summarizer.SimpleSummarizerMethods.FirstSentence">
            <summary>
            The summarizer will output the first sentence by the most frequent words.
            </summary>
        </member>
        <member name="F:SharpNL.Summarizer.SimpleSummarizerMethods.FrequentWords">
            <summary>
            The summarizer will select the sentences with the most frequent words.
            </summary>
        </member>
        <member name="T:SharpNL.Tokenize.IToken">
            <summary>
            Represents a token.
            </summary>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.ChunkTag">
            <summary>
            Gets or sets the chunk tag.
            </summary>
            <value>The chunk tag.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.End">
            <summary>
            Gets the token end position.
            </summary>
            <value>The token end position.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.Features">
            <summary>
            Gets the token features.
            </summary>
            <value>The token features.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.IsChunkHead">
            <summary>
            Gets a value indicating whether this token is a chunk head.
            </summary>
            <value><c>true</c> if this token is a chunk head; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.Lemmas">
            <summary>
            Gets or sets the token lemmas.
            </summary>
            <value>The token lemmas.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.Length">
            <summary>
            Gets the token length.
            </summary>
            <value>The token length.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.Lexeme">
            <summary>
            Gets the lexeme.
            </summary>
            <value>The lexeme.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.POSTag">
            <summary>
            Gets the POSTag.
            </summary>
            <value>The POSTag.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.POSTagProbability">
            <summary>
            Gets the POSTag probability.
            </summary>
            <value>The POSTag probability.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.Probability">
            <summary>
            Gets or sets the token probability.
            </summary>
            <value>The token probability.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.Start">
            <summary>
            Gets the token start position.
            </summary>
            <value>The token start position.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.Sentence">
            <summary>
            Gets the sentence.
            </summary>
            <value>The sentence.</value>
        </member>
        <member name="P:SharpNL.Tokenize.IToken.SyntacticTag">
            <summary>
            Gets the syntactic tag.
            </summary>
            <value>The syntactic tag.</value>
        </member>
        <member name="T:SharpNL.Tokenize.Token">
            <summary>
            Represents a token, which is a word, its lemma, its morphological posTag and the 
            position of it in the sentence.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.Token.#ctor(SharpNL.SentenceDetector.Sentence,SharpNL.Utility.Span,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.Token"/> class with the specified sentence, span and lexeme.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="span">The span.</param>
            <param name="lexeme">The lexeme.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentence"/>
            or
            <paramref name="span"/>
            </exception>
        </member>
        <member name="M:SharpNL.Tokenize.Token.#ctor(SharpNL.SentenceDetector.Sentence,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.Token"/> using the 
            <paramref name="start"/> - <paramref name="end"/> positions and the <paramref name="lexeme"/>.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="lexeme">The lexeme.</param>
        </member>
        <member name="M:SharpNL.Tokenize.Token.#ctor(SharpNL.SentenceDetector.Sentence,System.Int32,System.Int32,System.String,System.String[],System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.Token"/> with the given parameters.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="lexeme">The lexeme.</param>
            <param name="lemmas">The lemmas.</param>
            <param name="tag">The tag.</param>
            <param name="features">The features.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentence"/>
            </exception>
        </member>
        <member name="M:SharpNL.Tokenize.Token.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Token"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Tokenize.Token.Equals(SharpNL.Tokenize.Token)">
            <summary>
            Determines whether the specified <see cref="T:Token"/> is equal to the current <see cref="T:Token"/>.
            </summary>
            <param name="other">The token to compare with the current token.</param>
            <returns><c>true</c> if the specified token is equal to the current token, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.Token.Equals(SharpNL.Tokenize.IToken)">
            <summary>
            Determines whether the specified <see cref="T:IToken"/> is equal to the current <see cref="T:Token"/>.
            </summary>
            <param name="other">The token to compare with the current token.</param>
            <returns><c>true</c> if the specified token is equal to the current token, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.Token.GetHashCode">
            <summary>
            Returns a hash code for this token.
            </summary>
            <returns>A hash code for this token, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:SharpNL.Tokenize.Token.ChunkTag">
            <summary>
            Gets the chunk tag.
            </summary>
            <value>The chunk tag.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.Document">
            <summary>
            Gets the document associated to this sentence token.
            </summary>
            <value>The document associated to this sentence token.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.End">
            <summary>
            Gets the token end position.
            </summary>
            <value>The token end position.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.Features">
            <summary>
            Gets the token features.
            </summary>
            <value>The token features.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.IsChunkHead">
            <summary>
            Gets a value indicating whether this token is a chunk head.
            </summary>
            <value><c>true</c> if this token is a chunk head; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.Lemmas">
            <summary>
            Gets or sets the token lemmas.
            </summary>
            <value>The token lemmas.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.Length">
            <summary>
            Gets the token length.
            </summary>
            <value>The token length.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.Lexeme">
            <summary>
            Gets the lexeme.
            </summary>
            <value>The lexeme.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.POSTag">
            <summary>
            Gets the POSTag.
            </summary>
            <value>The POSTag.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.POSTagProbability">
            <summary>
            Gets the POSTag probability.
            </summary>
            <value>The POSTag probability.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.Probability">
            <summary>
            Gets the token probability.
            </summary>
            <value>The token probability.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.Sentence">
            <summary>
            Gets the sentence.
            </summary>
            <value>The sentence.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.Start">
            <summary>
            Gets the token start position.
            </summary>
            <value>The token start position.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.SynSets">
            <summary>
            Gets the WordNet synsets list.
            </summary>
            <value>
            The synonym ring or synset if the <see cref="T:SharpNL.DefaultTextFactory"/> provides a WordNet instance.
            </value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.SyntacticTag">
            <summary>
            Gets the syntactic tag.
            </summary>
            <value>The syntactic tag.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Token.WordNet">
            <summary>
            Gets or sets the WordNet instance.
            </summary>
            <value>The WordNet instance.</value>
        </member>
        <member name="T:SharpNL.Tokenize.TokenUtilities">
            <summary>
            Utilities for working with tokens.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenUtilities.GetTokenCount(System.String,System.String[],System.Boolean)">
            <summary>
            Gets the number of times a token appears in the specified token array.
            </summary>
            <param name="token">The token to count.</param>
            <param name="tokens">The tokens to evaluate.</param>
            <param name="ignoreCase">if set to <c>true</c> to indicate if the string comparison should ignore the case of the token.</param>
            <returns>The number of times a token appears in the specified token array.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.TokenUtilities.GetTokenFrequency(System.String[],System.Boolean)">
            <summary>
            Gets the token frequency.
            </summary>
            <param name="tokens">The tokens to evaluate.</param>
            <param name="ignoreCase">if set to <c>true</c> to indicate if the string comparison should ignore the case of the token.</param>
            <returns>A dictionary with the token frequency.</returns>
            <exception cref="T:System.ArgumentNullException">tokens</exception>
        </member>
        <member name="M:SharpNL.Tokenize.TokenUtilities.GetUniqueTokens(System.String[],System.Boolean)">
            <summary>
            Gets the unique tokens.
            </summary>
            <param name="tokens">The tokens to evaluate.</param>
            <param name="ignoreCase">if set to <c>true</c> to indicate if the string comparison should ignore the case of the token.</param>
            <returns>A set of unique tokens.</returns>
            <exception cref="T:System.ArgumentNullException">tokens</exception>
        </member>
        <member name="T:SharpNL.Utility.AbstractStopwordProvider">
            <summary>
            Represents a abstract stopword provider.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.AbstractStopwordProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.AbstractStopwordProvider"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.AbstractStopwordProvider.IsStopword(System.String)">
            <summary>
            Determines whether the specified word is a stopword.
            </summary>
            <param name="word">The word check.</param>
            <returns><c>true</c> if the specified word is a stopword; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SharpNL.Utility.AbstractStopwordProvider.Stopwords">
            <summary>
            Gets the a set with all the stopwords.
            </summary>
            <value>The set with all the stopwords.</value>
        </member>
        <member name="T:SharpNL.Utility.CacheProvider`1">
            <summary>
            Provides caching support for derived classes.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.CacheProvider`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.CacheProvider`1"/> class with the cache enabled.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.CacheProvider`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.CacheProvider`1"/> class specifying if the cache is enabled.
            </summary>
            <param name="useCache">if set to <c>true</c> the cache will be enabled.</param>
        </member>
        <member name="M:SharpNL.Utility.CacheProvider`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.CacheProvider`1"/> class, using a specific cache name.
            </summary>
            <param name="cacheName">The name to use to look up configuration information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cacheName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="cacheName"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentException">
            The string value "default" (case insensitive) is assigned to name. The value
            "default" cannot be assigned to a new <seealso cref="T:System.Runtime.Caching.MemoryCache"/>
            instance, because the value is reserved for use by the <see cref="P:MemoryCache.Default"/> property.
            </exception>
            <seealso cref="T:System.Runtime.Caching.MemoryCache"/>
        </member>
        <member name="M:SharpNL.Utility.CacheProvider`1.CreateItemPolicy">
            <summary>
            Creates the cache item policy.
            </summary>
            <returns>A new <see cref="T:System.Runtime.Caching.CacheItemPolicy"/> instance.</returns>
        </member>
        <member name="M:SharpNL.Utility.CacheProvider`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.CacheProvider`1.Get(System.String)">
            <summary>
            Gets a value from the cache.
            </summary>
            <param name="cacheKey">A unique identifier for the cache entry to add or get.</param>
            <returns>
            If a matching cache entry already exists, a cache entry; otherwise, the return value from <see cref="M:GetValue"/> will cached and returned.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cacheKey"/> is null.</exception>
        </member>
        <member name="M:SharpNL.Utility.CacheProvider`1.GetValue(System.String)">
            <summary>
            Gets a value to be cached.
            </summary>
            <param name="cacheKey">A unique identifier for the cache entry to add or get.</param>
            <returns>The created value to be stored in the cache.</returns>
        </member>
        <member name="M:SharpNL.Utility.CacheProvider`1.IsCached(System.String)">
            <summary>
            Determines whether a cache entry exists with the given cache key.
            </summary>
            <param name="cacheKey">A unique identifier for the cache entry to search for.</param>
            <returns><c>true</c> if the cache contains a cache entry whose key matches key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cacheKey"/> is null.</exception>
        </member>
        <member name="P:SharpNL.Utility.CacheProvider`1.Cache">
            <summary>
            Gets the memory cache.
            </summary>
            <value>The memory cache.</value>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.BrownBigramFeatureGenerator">
            <summary>
            Generates Brown cluster features for token bigrams.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.FeatureGeneratorAdapter">
            <summary>
            This class provides empty implementations of some of the optional methods in
            <see cref="T:SharpNL.Utility.FeatureGen.AdditionalContextFeatureGenerator"/> to make implementing feature generators
            easier.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator">
            <summary>
            An interface for generating features for name entity identification and for 
            updating document level contexts.
            </summary>
            <remarks>
            Most implementors do not need the adaptive functionality of this 
            interface, they should extend the <see cref="T:SharpNL.Utility.FeatureGen.FeatureGeneratorAdapter"/> class instead.
            
            Feature generation is not thread safe and a instance of a feature generator
            must only be called from one thread. The resources used by a feature
            generator are typically shared between man instances of features generators
            which are called from many threads and have to be thread safe.
            </remarks>
            <seealso cref="T:SharpNL.Utility.FeatureGen.FeatureGeneratorAdapter"/>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs the feature generator that the specified tokens have been classified with the
            corresponding set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator.ClearAdaptiveData">
            <summary>
            Informs the feature generator that the context of the adaptive data (typically a document)
            is no longer valid.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.FeatureGeneratorAdapter.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.FeatureGeneratorAdapter.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs the feature generator that the specified tokens have been classified with the
            corresponding set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.FeatureGeneratorAdapter.ClearAdaptiveData">
            <summary>
            Informs the feature generator that the context of the adaptive data (typically a document)
            is no longer valid.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownBigramFeatureGenerator.#ctor(SharpNL.Utility.FeatureGen.BrownCluster)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.BrownBigramFeatureGenerator"/> class.
            </summary>
            <param name="brownLexicon">The Brown lexicon.</param>
            <exception cref="T:System.ArgumentNullException">brownLexicon</exception>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownBigramFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.BrownCluster">
            <summary>
            Class to load a Brown cluster document: word\tword_class\tprob
            <see href="http://metaoptimize.com/projects/wordreprs/"/>.
            
            The file containing the clustering lexicon has to be passed as the
            value of the dict attribute of each BrownCluster feature generator.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownCluster.#ctor(System.IO.Stream)">
            <summary>
            Generates the token to cluster map from Brown cluster input stream using the minimum token frequency as 5.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.ArgumentException">@The stream is not readable.;inputStream</exception>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownCluster.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Generates the token to cluster map from Brown cluster input stream with a minimum token frequency.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="minFrequency">The minimum frequency.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.ArgumentException">@The stream is not readable.;inputStream</exception>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.BrownCluster.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <param name="key">The token to look-up.</param>
            <returns>The brown class if such token is in the brown cluster map.</returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.BrownTokenClasses">
            <summary>
            Obtain the paths listed in the pathLengths array from the Brown class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownTokenClasses.GetWordClasses(System.String,SharpNL.Utility.FeatureGen.BrownCluster)">
            <summary>
            It provides a list containing the pathLengths for a token if found in the <see cref="T:SharpNL.Utility.FeatureGen.BrownCluster"/>.
            </summary>
            <param name="token">The token to be looked up in the brown clustering map.</param>
            <param name="brownLexicon">The Brown clustering map.</param>
            <returns>The list of the paths for a token.</returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.BrownTokenClassFeatureGenerator">
            <summary>
            Generates Brown cluster features for current token and token class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownTokenClassFeatureGenerator.#ctor(SharpNL.Utility.FeatureGen.BrownCluster)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.BrownTokenClassFeatureGenerator"/> class.
            </summary>
            <param name="brownLexicon">The Brown lexicon.</param>
            <exception cref="T:System.ArgumentNullException">brownLexicon</exception>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownTokenClassFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.BrownTokenFeatureGenerator">
            <summary>
            Generates Brown cluster features for current token.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownTokenFeatureGenerator.#ctor(SharpNL.Utility.FeatureGen.BrownCluster)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.BrownTokenFeatureGenerator"/> class.
            </summary>
            <param name="brownLexicon">The Brown lexicon.</param>
            <exception cref="T:System.ArgumentNullException">brownLexicon</exception>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BrownTokenFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.Factories.BrownClusterBigramFeatureGeneratorFactory">
            <summary>
            Generates Brown clustering features for token classes.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.XmlFeatureGeneratorFactory">
            <summary>
            The <see cref="T:SharpNL.Utility.FeatureGen.XmlFeatureGeneratorFactory"/> is responsible to construct
            an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from an given XML <see cref="T:System.Xml.XmlElement"/>
            which contains all necessary configuration if any.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.XmlFeatureGeneratorFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.XmlFeatureGeneratorFactory"/> with the unique factory name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.XmlFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which is used to resolve resources referenced by a key in the descriptor.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.XmlFeatureGeneratorFactory.Name">
            <summary>
            Gets the factory name.
            </summary>
            <value>The factory name.</value>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.BrownClusterBigramFeatureGeneratorFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.Factories.BrownClusterBigramFeatureGeneratorFactory"/> with the unique factory name.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.BrownClusterBigramFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which is used to resolve resources referenced by a key in the descriptor.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.Factories.BrownClusterTokenClassFeatureGeneratorFactory">
            <summary>
            Generates Brown clustering features for token classes.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.BrownClusterTokenClassFeatureGeneratorFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.Factories.BrownClusterTokenClassFeatureGeneratorFactory"/> with the unique factory name.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.BrownClusterTokenClassFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which is used to resolve resources referenced by a key in the descriptor.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.Factories.BrownClusterTokenFeatureGeneratorFactory">
            <summary>
            Generates Brown clustering features for current token.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.BrownClusterTokenFeatureGeneratorFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.XmlFeatureGeneratorFactory"/> with the unique factory name.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.BrownClusterTokenFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which is used to resolve resources referenced by a key in the descriptor.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.PreviousTwoMapFeatureGenerator">
            <summary>
            Generates features indicating the outcome associated with two previously occuring words.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.PreviousTwoMapFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.PreviousTwoMapFeatureGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs the feature generator that the specified tokens have been classified with the
            corresponding set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.PreviousTwoMapFeatureGenerator.ClearAdaptiveData">
            <summary>
            Informs the feature generator that the context of the adaptive data (typically a document)
            is no longer valid.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.TrigramNameFeatureGenerator">
            <summary>
            Adds trigram features based on tokens and token classes.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.TrigramNameFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WordClusterDictionary.#ctor(System.IO.Stream)">
            <summary>
            Generates the token to cluster map from the input stream.
            </summary>                          S
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.ArgumentException">@The stream is not readable.;inputStream</exception>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.WordClusterDictionary.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <param name="key">The token to look-up.</param>
            <returns>The brown class if such token is in the brown cluster map.</returns>
        </member>
        <member name="T:SharpNL.Utility.Java.IIterator`1">
            <summary>
            An iterator over a collection.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>C# port of java.until.Iterator{T}.</remarks>
        </member>
        <member name="M:SharpNL.Utility.Java.IIterator`1.HasNext">
            <summary>
            Determines whether the iteration has more elements.
            </summary>
            <returns><c>true</c> if the iteration has more elements.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.Java.IIterator`1.Next">
            <summary>
            Gets the next element in the iteration.
            </summary>
            <returns>The next element in the iteration.</returns>
        </member>
        <member name="T:SharpNL.Utility.Java.IteratorAdapter`1">
            <summary>
            Represents a <see cref="T:IIterator{T}"/> adapter from an <see cref="T:IEnumerator{T}"/>.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.Java.IteratorAdapter`1.HasNext">
            <summary>
            Determines whether the iteration has more elements.
            </summary>
            <returns><c>true</c> if the iteration has more elements.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.Java.IteratorAdapter`1.Next">
            <summary>
            Gets the next element in the iteration.
            </summary>
            <returns>The next element in the iteration.</returns>
        </member>
        <member name="T:SharpNL.Utility.Java.StringTokenizer">
            <summary>
            Implements a StringTokenizer class for splitting a string into substrings using a set of delimiters.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Java.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the <see cref="F:DefaultDelimiters">default delimiters</see>.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:SharpNL.Utility.Java.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delimiters">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:SharpNL.Utility.Java.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delimiters">The delimiters used to tokenize the string.</param>
        </member>
        <member name="M:SharpNL.Utility.Java.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters and optionally returning them as tokens.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delimiters">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelimiters">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:SharpNL.Utility.Java.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <see cref="!:String.Empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delimiters">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelimiters">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:SharpNL.Utility.Java.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <paramref name="empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delimiters">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelimiters">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <param name="empty">The string to be returned as an empty token.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:SharpNL.Utility.Java.StringTokenizer.Reset">
            <summary>
            Resets the current position index so that the tokens can be extracted again.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Java.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.Java.StringTokenizer.Count">
            <summary>
            Gets the total number of tokens extracted.
            </summary>
            <remarks>
            <see cref="!:Equivalent not available in Java!"/>
            This property returns the total number of extracted tokens,
            contrary to <see cref="P:CountTokens"/>.
            </remarks>
            <value>The number of tokens extracted.</value>
            <seealso cref="P:StringTokenizer.CountTokens"/>
        </member>
        <member name="P:SharpNL.Utility.Java.StringTokenizer.CountTokens">
            <summary>
            Counts the <see cref="!:remaining"/> tokens - the number of times the
            <see cref="P:NextToken"/> property can be used before it throws an exception.
            </summary>
            <value>The number of remaining tokens.</value>
            <seealso cref="P:Count"/>
        </member>
        <member name="P:SharpNL.Utility.Java.StringTokenizer.EmptyString">
            <summary>
            Gets the currently set string for empty tokens.
            </summary>
            <remarks>Default is <c>System.String.Empty</c></remarks>
            <value>The empty token string.</value>
        </member>
        <member name="P:SharpNL.Utility.Java.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's string.
            If this method returns <c>true</c>, then a subsequent
            use of the <see cref="P:NextToken" /> property will successfully return a token.
            </summary>
            <value><c>true</c> if more tokens are available; otherwise <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.Java.StringTokenizer.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>The next token.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist.
            Usually caused by not checking if the <see cref="P:HasMoreTokens"/> property returns <c>true</c> before trying to get the next token.</exception>
        </member>
        <member name="P:SharpNL.Utility.Java.StringTokenizer.Item(System.Int32)">
            <summary>
            Gets the token with the specified index from the tokenizer without moving the current position index.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
            <param name="index">The index of the token to get.</param>
            <value>The token with the given index</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist, that is when <see cref="!:index"/> is equal or greater then <see cref="!:Count"/> or <see cref="!:index"/> is negative.</exception>
        </member>
        <member name="T:SharpNL.Utility.StringTokenizer">
            <summary>
            The string tokenizer class allows an application to break a string into tokens.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.StringTokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.StringTokenizer"/> class using the specified string value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:SharpNL.Utility.StringTokenizer.Skip">
            <summary>
            Skips the current token.
            </summary>
            <returns><c>true</c> if token was skipped, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Utility.StringTokenizer.SkipPos">
            <summary>
            Skips the current position.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.StringTokenizer.Peek">
            <summary>
            Returns the <see cref="T:SharpNL.Utility.StringTokenizer"/> at the beginning of the <see cref="T:SharpNL.Utility.StringTokenizer"/> without removing it.
            </summary>
            <returns>The <see cref="T:SharpNL.Utility.StringToken"/> at the beginning of the <see cref="T:SharpNL.Utility.StringToken"/> without removing it.</returns>
        </member>
        <member name="M:SharpNL.Utility.StringTokenizer.Read">
            <summary>
            Reads the next <see cref="T:SharpNL.Utility.StringToken"/> object.
            </summary>
            <returns>The next <see cref="T:SharpNL.Utility.StringToken"/> object.</returns>
        </member>
        <member name="M:SharpNL.Utility.StringTokenizer.ReadAll">
            <summary>
            Reads all tokens in the <see cref="T:SharpNL.Utility.StringTokenizer"/> object.
            </summary>
            <returns>A token array containing all tokens in the current tokenizer.</returns>
        </member>
        <member name="M:SharpNL.Utility.StringTokenizer.ReadWhitespace">
            <summary>
            Reads the whitespace token.
            </summary>
            <returns>The whitespace token.</returns>
        </member>
        <member name="P:SharpNL.Utility.StringTokenizer.Column">
            <summary>
            Gets the current column.
            </summary>
            <value>The current column.</value>
        </member>
        <member name="P:SharpNL.Utility.StringTokenizer.IgnoreWhitespace">
            <summary>
            Gets or sets a value indicating whether to ignore white space tokens.
            </summary>
            <value><c>true</c> to ignore white space; otherwise <c>false</c>. The default is <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.StringTokenizer.Line">
            <summary>
            Gets the current line.
            </summary>
            <value>The current line.</value>
        </member>
        <member name="P:SharpNL.Utility.StringTokenizer.Position">
            <summary>
            Gets the current cursor position.
            </summary>
            <value>The current cursor position.</value>
        </member>
        <member name="P:SharpNL.Utility.StringTokenizer.Value">
            <summary>
            Gets the string value.
            </summary>
            <value>The string value.</value>
        </member>
        <member name="T:SharpNL.Utility.StringToken">
            <summary>
            Represents a string token.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.StringToken.#ctor(SharpNL.Utility.StringTokenKind,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.StringToken"/> class.
            </summary>
            <param name="kind">The token kind.</param>
            <param name="value">The token value.</param>
            <param name="line">The token line.</param>
            <param name="column">The token column.</param>
        </member>
        <member name="P:SharpNL.Utility.StringToken.Column">
            <summary>
            Gets the token column.
            </summary>
            <value>The token column.</value>
        </member>
        <member name="P:SharpNL.Utility.StringToken.Kind">
            <summary>
            Gets the token kind.
            </summary>
            <value>The token kind.</value>
        </member>
        <member name="P:SharpNL.Utility.StringToken.Line">
            <summary>
            Gets the token line.
            </summary>
            <value>The token line.</value>
        </member>
        <member name="P:SharpNL.Utility.StringToken.Value">
            <summary>
            Gets the token value.
            </summary>
            <value>The token value.</value>
        </member>
        <member name="T:SharpNL.Tokenize.TokenizerAnalyzer">
            <summary>
            Represents a tokenizer analyzer which allows the easy abstraction of the tokenizer. This class is thread-safe.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerAnalyzer.#ctor(SharpNL.Tokenize.ITokenizer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenizerAnalyzer"/> using the default analyzer weight;
            </summary>
            <param name="tokenizer">The tokenizer used by this analyzer.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerAnalyzer.#ctor(SharpNL.Tokenize.ITokenizer,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Analyzer.AbstractAnalyzer"/> using the specified tokenizer and the analyzer weight.
            </summary>
            <param name="tokenizer">The tokenizer used by this analyzer.</param>
            <param name="weight">The analyzer weight.</param>
            <exception cref="T:System.ArgumentNullException">tokenizer</exception>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerAnalyzer.Evaluate(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Evaluates the specified document.
            </summary>
            <param name="factory">The factory used in this analysis.</param>
            <param name="document">The document to be analyzed.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerAnalyzer.PreProcessSentence(System.String,System.String)">
            <summary>
            Preprocesses the sentence before it is analyzed by the tokenizer.
            </summary>
            <param name="language">The language of the sentence.</param>
            <param name="sentence">The sentence string.</param>
            <returns>The processed sentence. If this value is <c>null</c> the sentence will be ignored.</returns>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerAnalyzer.Tokenizer">
            <summary>
            Gets the tokenizer.
            </summary>
            <value>The tokenizer.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerAnalyzer.PreProcess">
            <summary>
            Gets or sets a value indicating whether the sentences will be preprocessed. The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if the sentences will be preprocessed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerAnalyzer.PreProcessor">
            <summary>
            Gets or sets the sentence preprocess function which is called during de analysis 
            for each sentence in the document. If the result of this function is a <c>null</c> value
            the sentence will be ignored by the analyzer.
            </summary>
            <value>The sentence preprocess function.</value>
        </member>
        <member name="T:SharpNL.Analyzer.AggregateAnalyzer">
            <summary>
            Represents a analyzer that aggregates one or more analyzers.
            </summary>
        </member>
        <member name="F:SharpNL.Analyzer.AggregateAnalyzer.Analyzers">
            <summary>
            The analyzers in this instance.
            </summary>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Analyzer.AggregateAnalyzer"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Analyzer.AggregateAnalyzer"/> class 
            weighted by the <see cref="P:SharpNL.Analyzer.AggregateAnalyzer.DefaultWeight"/> value.
            </summary>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Analyzer.AggregateAnalyzer"/> using
            a specific <paramref name="weight"/> value.
            </summary>
            <param name="weight">A specific weight.</param>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.Add(SharpNL.Analyzer.IAnalyzer)">
            <summary>
            Adds the specified analyzer.
            </summary>
            <param name="analyzer">The analyzer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="analyzer"/>
            </exception>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.Add(System.String)">
            <summary>
            Adds the corresponding analyzer for the given model file.
            </summary>
            <param name="modelFile">The model.</param>
            <remarks>
            This method automatically detects the model type, then a corresponding analyzer 
            is added to this instance.
            </remarks>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.Add(System.IO.FileInfo)">
            <summary>
            Adds the corresponding analyzer for the given model file.
            </summary>
            <param name="modelFile">The model.</param>
            <remarks>
            <para>This method automatically detects the model type, then a corresponding analyzer is added to this instance.</para>
            <para>The parser model will be added using the <see cref="T:SharpNL.Parser.Chunking.Parser"/>.</para>
            </remarks>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.Clear">
            <summary>
            Removes all the analyzers from this instance.
            </summary>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.Analyze(SharpNL.IDocument)">
            <summary>
            Analyzes the specified document which can be several sentences, a sentence or even a single word.
            The <see cref="T:SharpNL.DefaultTextFactory"/> will be used to create the objects in the <see cref="T:SharpNL.IDocument"/>.
            </summary>
            <param name="document">The <see cref="T:SharpNL.IDocument"/> to be analyzed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="document"/>
            </exception>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.Analyze(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Analyzes the specified document which can be several sentences, a sentence or even a single word.
            </summary>
            <param name="factory">The text factory. if this argument is <c>null</c> the <see cref="T:SharpNL.DefaultTextFactory"/> must 
            be used during the analysis.</param>
            <param name="document">The <see cref="T:SharpNL.IDocument"/> to be analyzed.</param>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.Remove(SharpNL.Analyzer.IAnalyzer)">
            <summary>
            Removes the specified analyzer.
            </summary>
            <param name="analyzer">The analyzer.</param>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:IEnumerator{IAnalyzer}"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Analyzer.AggregateAnalyzer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SharpNL.Analyzer.AggregateAnalyzer.Count">
            <summary>
            Gets the number of analyzers contained in this instance.
            </summary>
            <value>The number of analyzers contained in this instance.</value>
        </member>
        <member name="P:SharpNL.Analyzer.AggregateAnalyzer.DefaultWeight">
            <summary>
            Gets or sets the default weight of the aggreated analyzer. The default value is <c>5f</c>;
            </summary>
            <value>The default weight.</value>
        </member>
        <member name="P:SharpNL.Analyzer.AggregateAnalyzer.Weight">
            <summary>
            Gets the analyzer weight which control the influence of the aggregated analyzer during the execution. 
            The lower values will be executed first.
            </summary>
            <value>Returns a floating point value indicating the relative weight a task.</value>
        </member>
        <member name="T:SharpNL.Analyzer.AnalyzerException">
            <summary>
            Represents a exception that occurs in a <see cref="T:SharpNL.Analyzer.IAnalyzer"/> object.
            </summary>
        </member>
        <member name="M:SharpNL.Analyzer.AnalyzerException.#ctor(SharpNL.Analyzer.IAnalyzer)">
            <summary>
            Initializes a new instance of the <see cref="T:AnalyzerException"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Analyzer.AnalyzerException.#ctor(SharpNL.Analyzer.IAnalyzer,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="analyzer">The analyzer which the exception occurred.</param>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:SharpNL.Analyzer.AnalyzerException.#ctor(SharpNL.Analyzer.IAnalyzer,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AnalyzerException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="analyzer">The analyzer which the exception occurred.</param>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:SharpNL.Analyzer.AnalyzerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="P:SharpNL.Analyzer.AnalyzerException.Analyzer">
            <summary>
            Gets the analyzer which the exception occurred.
            </summary>
            <value>The analyzer which the exception occurred.</value>
        </member>
        <member name="T:SharpNL.Dictionary.DictionaryBase">
            <summary>
            Provides the abstract base class for a strongly typed collection of key/entry pairs.
            </summary>
        </member>
        <member name="F:SharpNL.Dictionary.DictionaryBase.ElementName">
            <summary>
            The desired element name in the serialized xml.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Dictionary"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Dictionary"/> indicating 
            if the dictionary is case sensitive.
            </summary>
            <param name="caseSensitive">if set to <c>true</c> if the dictionary should be case sensitive.</param>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.Add(SharpNL.Dictionary.Entry)">
            <summary>
            Adds the specified entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>The new entry.</returns>
            <exception cref="T:System.ArgumentNullException">entry</exception>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.Clear">
            <summary>
            Removes all the entries from this instance.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.Contains(SharpNL.Dictionary.Entry)">
            <summary>
            Determines whether an element is in this instance.
            </summary>
            <param name="entry">The entry to locate in this instance.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.IO.InvalidDataException">
            Unexpected XML dictionary format.
            or
            Unexpected XML dictionary format.
            </exception>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator&lt;Entry&gt;.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.Remove(System.Int32)">
            <summary>
            Removes entry at the specified index.
            </summary>
            <param name="index">The entry index.</param>
            <returns><c>true</c> if entry was removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.Remove(SharpNL.Dictionary.Entry)">
            <summary>
            Removes the first occurrence of a specified entry.
            </summary>
            <param name="entry">The entry to remove.</param>
            <returns><c>true</c> if the first occurrence of the entry was removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.Serialize(System.IO.Stream)">
            <summary>
            Serializes the current instance to the given stream.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream is not writable.</exception>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.ToArray">
            <summary>
            Copies the entries into a new array.
            </summary>
            <returns>An array containing copies of the entries of this instance.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.DictionaryBase.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Dictionary.DictionaryBase.Count">
            <summary>
            Gets the number of items in the current instance.
            </summary>
            <value>The number of items in the current instance.</value>
        </member>
        <member name="P:SharpNL.Dictionary.DictionaryBase.IsCaseSensitive">
            <summary>
            Gets a value indicating whether this dictionary is case sensitive.
            </summary>
            <value><c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Dictionary.DictionaryBase.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SharpNL.Dictionary.Entry"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:SharpNL.Dictionary.Entry"/> at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less then 0.
            or
            <paramref name="index"/> is equal to or greater than <see cref="P:SharpNL.Dictionary.DictionaryBase.Count"/>.
            </exception>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdContractionNameSampleStream">
            <summary>
            Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese NER training.
            <para>
            The data contains common multi word expressions. The categories are:<br /> 
            intj, spec, conj-s, num, pron-indef, n, prop, adj, prp, adv
            </para>
            </summary>
            <remarks>
            <para>
            Data can be found on this web site: <see href="http://www.linguateca.pt/floresta/corpus.html" />
            </para>
            <para>
            Information about the format: <br />
            "Árvores deitadas: Descrição do formato e das opções de análise na Floresta Sintáctica" <br />
            <see href="http://www.linguateca.pt/documentos/Afonso2006ArvoresDeitadas.pdf"/>
            </para>
            <para>
            Detailed info about the NER tagset: <see href="http://beta.visl.sdu.dk/visl/pt/info/portsymbol.html#semtags_names"/>
            </para>
            </remarks>
        </member>
        <member name="T:SharpNL.Utility.IObjectStream`1">
            <summary>
            Reads <see cref="T:object" />s from a stream.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.IObjectStream`1.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.IObjectStream`1.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdContractionNameSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdContractionNameSampleStream"/> from a <paramref name="lineStream"/> object.
            </summary>
            <param name="lineStream">The line stream.</param>
            <param name="safeParse">if set to <c>true</c> the invalid Ad sentences will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdContractionNameSampleStream.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdContractionNameSampleStream"/> from a <paramref name="inputStream"/> with the given <paramref name="encoding"/>.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="encoding">The text encoding.</param>
            <param name="safeParse">if set to <c>true</c> the invalid Ad sentences will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputStream"/>
            or
            <paramref name="encoding"/>
            </exception>
            <exception cref="T:System.ArgumentException">The input stream does not support reading.</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdContractionNameSampleStream.#ctor(SharpNL.Monitor,SharpNL.Utility.IObjectStream{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdContractionNameSampleStream"/> from a <paramref name="lineStream"/> object.
            </summary>
            <param name="monitor">The execution monitor.</param>
            <param name="lineStream">The line stream.</param>
            <param name="safeParse">if set to <c>true</c> the invalid Ad sentences will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="monitor"/>
            or
            <paramref name="lineStream"/>
            </exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdContractionNameSampleStream.#ctor(SharpNL.Monitor,System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdContractionNameSampleStream"/> from a <paramref name="inputStream"/> with the given <paramref name="encoding"/>.
            </summary>
            <param name="monitor">The execution monitor.</param>
            <param name="inputStream">The input stream.</param>
            <param name="encoding">The text encoding.</param>
            <param name="safeParse">if set to <c>true</c> the invalid Ad sentences will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="monitor"/>
            or
            <paramref name="inputStream"/>
            or
            <paramref name="encoding"/>
            </exception>
            <exception cref="T:System.ArgumentException">The input stream does not support reading.</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdContractionNameSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdContractionNameSampleStream.Process(SharpNL.Formats.Ad.AdNode,System.Collections.Generic.List{System.String},System.Collections.Generic.List{SharpNL.Utility.Span})">
            <summary>
            Recursive method to process a node in Arvores Deitadas format.
            </summary>
            <param name="node">The node to be processed.</param>
            <param name="sentence">The sentence tokens we got so far.</param>
            <param name="names">The names we got so far.</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdContractionNameSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdContractionNameSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdNameSampleStream">
            <summary>
            Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese NER training.
            <para>
            The data contains common multi word expressions. The categories are:<br /> 
            intj, spec, conj-s, num, pron-indef, n, prop, adj, prp, adv
            </para>
            </summary>
            <remarks>
            <para>
            Data can be found on this web site: <see href="http://www.linguateca.pt/floresta/corpus.html" />
            </para>
            <para>
            Information about the format: <br />
            "Árvores deitadas: Descrição do formato e das opções de análise na Floresta Sintáctica" <br />
            <see href="http://www.linguateca.pt/documentos/Afonso2006ArvoresDeitadas.pdf"/>
            </para>
            <para>
            Detailed info about the NER tagset: <see href="http://beta.visl.sdu.dk/visl/pt/info/portsymbol.html#semtags_names"/>
            </para>
            </remarks>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Formats.Ad.AdNameSampleStream"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdNameSampleStream"/> from a <paramref name="lineStream"/> object.
            </summary>
            <param name="lineStream">The line stream.</param>
            <param name="splitHyphenatedTokens">if set to <c>true</c> hyphenated tokens will be separated: "carros-monstro" &gt; "carros" Hyphen "monstro".</param>
            <param name="safeParse">if set to <c>true</c> the invalid data in the file will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdNameSampleStream"/> from a <paramref name="inputStream"/> object.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="encoding">The text encoding used to read the stream.</param>
            <param name="splitHyphenatedTokens">if set to <c>true</c> hyphenated tokens will be separated: "carros-monstro" &gt; "carros" "-" "monstro".</param>
            <param name="safeParse">if set to <c>true</c> the invalid data in the file will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputStream"/>
            or
            <paramref name="encoding"/>
            </exception>
            <exception cref="T:System.ArgumentException">The <paramref name="inputStream"/> does not support reading.</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.#ctor(SharpNL.Monitor,SharpNL.Utility.IObjectStream{System.String},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdNameSampleStream"/> from a <paramref name="lineStream"/> object.
            </summary>
            <param name="monitor">The execution monitor.</param>
            <param name="lineStream">The line stream.</param>
            <param name="splitHyphenatedTokens">if set to <c>true</c> hyphenated tokens will be separated: "carros-monstro" &gt; "carros" Hyphen "monstro".</param>
            <param name="safeParse">if set to <c>true</c> the invalid data in the file will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.#ctor(SharpNL.Monitor,System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdNameSampleStream"/> from a <paramref name="inputStream"/> object.
            </summary>
            <param name="monitor">The execution monitor.</param>
            <param name="inputStream">The input stream.</param>
            <param name="encoding">The text encoding used to read the stream.</param>
            <param name="splitHyphenatedTokens">if set to <c>true</c> hyphenated tokens will be separated: "carros-monstro" &gt; "carros" Hyphen "monstro".</param>
            <param name="safeParse">if set to <c>true</c> the invalid data in the file will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="inputStream"/> does not support reading.</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.Process(SharpNL.Formats.Ad.AdNode,System.Collections.Generic.List{System.String},System.Collections.Generic.List{SharpNL.Utility.Span})">
            <summary>
            Recursive method to process a node in Arvores Deitadas format.
            </summary>
            <param name="node">The node to be processed.</param>
            <param name="sentence">The sentence tokens we got so far.</param>
            <param name="names">The names we got so far</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.ProcessLeaf(SharpNL.Formats.Ad.AdLeaf,System.Collections.Generic.List{System.String},System.Collections.Generic.List{SharpNL.Utility.Span})">
            <summary>
            Process a Leaf of Arvores Detaitadas format.
            </summary>
            <param name="leaf">The leaf to be processed.</param>
            <param name="sentence">The sentence tokens we got so far.</param>
            <param name="names">The names we got so far.</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNameSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdPosSampleStream">
            <summary>
            This class reads the <see cref="T:SharpNL.POSTag.POSSample"/>s from the given <see cref="T:IObjectStream{string}"/>
            using floresta Sita(c)tica Arvores Deitadas corpus which can be used by the maxent library for training.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdPosSampleStream.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Formats.Ad.AdPosSampleStream"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdPosSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdPosSampleStream"/> from a <paramref name="lineStream"/> object.
            </summary>
            <param name="lineStream">The line stream.</param>
            <param name="expandMe">if set to <c>true</c> will expand the multiword expressions, each word of the expression will have the POS Tag that was attributed to the expression plus the prefix B- or I- (CONLL convention).</param>
            <param name="includeFeatures">if set to <c>true</c> will combine the POS Tag with the feature tags.</param>
            <param name="safeParse">if set to <c>true</c> the invalid AD sentences will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdPosSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdPosSampleStream"/> from a <paramref name="lineStream"/> object.
            </summary>
            <param name="lineStream">The line stream.</param>
            <param name="expandMe">if set to <c>true</c> will expand the multiword expressions, each word of the expression will have the POS Tag that was attributed to the expression plus the prefix B- or I- (CONLL convention).</param>
            <param name="includeFeatures">if set to <c>true</c> will combine the POS Tag with the feature tags.</param>
            <param name="additionalContext">if set to <c>true</c> the additional context will be included in the POS sample.</param>
            <param name="safeParse">if set to <c>true</c> the invalid AD sentences will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdPosSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdPosSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdPosSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdTokenSampleStream">
            <summary>
            This class reads the <see cref="T:SharpNL.Tokenize.TokenSample"/>s from the given <see cref="T:IObjectStream{string}"/>
            using floresta Sita(c)tica Arvores Deitadas corpus which can be used by the maxent library for training.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdTokenSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},SharpNL.Tokenize.IDetokenizer,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdTokenSampleStream"/> from a <paramref name="lineStream"/> object.
            </summary>
            <param name="lineStream">The line stream.</param>
            <param name="detokenizer">The detokenizer used create the samples.</param>
            <param name="splitHyphenatedTokens">if set to <c>true</c> hyphenated tokens will be separated: "carros-monstro" &gt; "carros" Hyphen "monstro".</param>
            <param name="safeParse">if set to <c>true</c> the invalid data in the file will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdTokenSampleStream.#ctor(SharpNL.Monitor,SharpNL.Utility.IObjectStream{System.String},SharpNL.Tokenize.IDetokenizer,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdTokenSampleStream"/> from a <paramref name="lineStream"/> object.
            </summary>
            <param name="monitor">The evaluation monitor.</param>
            <param name="lineStream">The line stream.</param>
            <param name="detokenizer">The detokenizer used create the samples.</param>
            <param name="splitHyphenatedTokens">if set to <c>true</c> hyphenated tokens will be separated: "carros-monstro" &gt; "carros" Hyphen "monstro".</param>
            <param name="safeParse">if set to <c>true</c> the invalid data in the file will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdTokenSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdTokenSampleStream.Process(SharpNL.Formats.Ad.AdNode,System.Collections.Generic.List{System.String})">
            <summary>
            Recursive method to process a node in Arvores Deitadas format.
            </summary>
            <param name="node">The node to be processed.</param>
            <param name="sentence">The sentence tokens we got so far.</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdTokenSampleStream.ProcessLeaf(SharpNL.Formats.Ad.AdLeaf,System.Collections.Generic.List{System.String})">
            <summary>
            Process a Leaf of Arvores Detaitadas format.
            </summary>
            <param name="leaf">The leaf to be processed.</param>
            <param name="sentence">The sentence tokens we got so far.</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdTokenSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdTokenSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Ad.PortugueseContractionUtility">
            <summary>
            Utility class to handle Portuguese contractions.
            </summary>
            <remarks>
            Some Corpora splits contractions in its parts, for example, "da" &gt; "de" + "a",
            but according to the phase of language processing, NER for instance, we can't decide
            if to split a contraction or not, specially because contractions
            inside names are not separated, but outside are.
            </remarks>
        </member>
        <member name="M:SharpNL.Formats.Ad.PortugueseContractionUtility.ToContraction(System.String,System.String)">
            <summary>
            Merges a contraction.
            </summary>
            <param name="left">The left component.</param>
            <param name="right">The right component.</param>
            <returns>The merged contraction.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.PortugueseContractionUtility.Expand(System.String)">
            <summary>
            Expands the specified contraction into its components.
            </summary>
            <param name="contraction">The contraction.</param>
            <returns>The expanded contraction or <c>null</c> if the contraction cannot be found.</returns>
        </member>
        <member name="T:SharpNL.Formats.Ptb.IResolver">
            <summary>
            Interface that is used to resolve information of a Penn Treebank node.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.IResolver.GetType(System.String,System.Boolean)">
            <summary>
            Returns the node type for the specified portion of the parse or a <c>null</c> if
            the portion of the parse string does not represent a type.
            </summary>
            <param name="rest">The portion of the parse string remaining to be processed.</param>
            <param name="useFunctionTags">if set to <c>true</c> the function tags will be included.</param>
            <returns>The node type.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ptb.IResolver.GetToken(System.String)">
            <summary>
            Returns the string containing the token for the specified portion of the parse string or
            null if the portion of the parse string does not represent a token.
            </summary>
            <param name="rest">The portion of the parse string remaining to be processed.</param>
            <returns>
            The string containing the token for the specified portion of the parse string or
            null if the portion of the parse string does not represent a token.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ptb.Lang.DefaultResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.Lang.DefaultResolver"/> class.
            </summary>
        </member>
        <member name="F:SharpNL.Formats.Ptb.Lang.DefaultResolver.typePattern">
            <summary>
            The pattern used to find the base constituent label of a Penn Treebank labeled constituent.
            </summary>
        </member>
        <member name="F:SharpNL.Formats.Ptb.Lang.DefaultResolver.funTypePattern">
            <summary>
            The pattern used to find the function tags.
            </summary>
        </member>
        <member name="F:SharpNL.Formats.Ptb.Lang.DefaultResolver.tokenPattern">
            <summary>
            The patter used to identify tokens in Penn Treebank labeled constituents.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.Lang.DefaultResolver.EncodeToken(System.String)">
            <summary>
            Encodes the escapes from token.
            </summary>
            <param name="token">The token.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ptb.Lang.DefaultResolver.DecodeToken(System.String)">
            <summary>
            Decodes the string escapes from the token <c>(-LRB-; -RRB-; -LCB-; -RCB-; -LSB-; -RSB-)</c>.
            </summary>
            <param name="token">The token string.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ptb.Lang.DefaultResolver.GetType(System.String,System.Boolean)">
            <summary>
            Returns the node type for the specified portion of the parse or a <c>null</c> if
            the portion of the parse string does not represent a type.
            </summary>
            <param name="rest">The portion of the parse string remaining to be processed.</param>
            <param name="useFunctionTags">if set to <c>true</c> the functions tags will be included.</param>
            <returns>The node type.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ptb.Lang.DefaultResolver.GetToken(System.String)">
            <summary>
            Returns the string containing the token for the specified portion of the parse string or
            null if the portion of the parse string does not represent a token.
            </summary>
            <param name="rest">The portion of the parse string remaining to be processed.</param>
            <returns>
            The string containing the token for the specified portion of the parse string or
            null if the portion of the parse string does not represent a token.
            </returns>
        </member>
        <member name="P:SharpNL.Formats.Ptb.Lang.DefaultResolver.Instance">
            <summary>
            Gets the instance of the default resolver.
            </summary>
            <value>The instance of the default resolver.</value>
        </member>
        <member name="T:SharpNL.Formats.Ptb.Lang.pt.Resolver">
            <summary>
            Represents a portuguese Penn Treebank resolver.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.Lang.pt.Resolver.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SharpNL.Formats.Ptb.Lang.pt.Resolver"/> class from being created.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.Lang.pt.Resolver.GetType(System.String,System.Boolean)">
            <summary>
            Returns the node type for the specified portion of the parse or a <c>null</c> if
            the portion of the parse string does not represent a type.
            </summary>
            <param name="rest">The portion of the parse string remaining to be processed.</param>
            <param name="useFunctionTags">if set to <c>true</c> the functions tags will be included.</param>
            <returns>The node type.</returns>
            
        </member>
        <member name="M:SharpNL.Formats.Ptb.Lang.pt.Resolver.GetToken(System.String)">
            <summary>
            Returns the string containing the token for the specified portion of the parse string or
            null if the portion of the parse string does not represent a token.
            </summary>
            <param name="rest">The portion of the parse string remaining to be processed.</param>
            <returns>
            The string containing the token for the specified portion of the parse string or
            null if the portion of the parse string does not represent a token.
            </returns>
        </member>
        <member name="P:SharpNL.Formats.Ptb.Lang.pt.Resolver.Instance">
            <summary>
            Gets the resolver instance.
            </summary>
            <value>The resolver instance.</value>
        </member>
        <member name="T:SharpNL.Formats.Ptb.PtbNode">
            <summary>
            Represents a Penn Treebank node. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbNode.GetTokens(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Returns a list of tokens in this node (including its child nodes).
            </summary>
            <param name="list">The token list.</param>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbNode.ToString">
            <summary>
            Returns a string that represents the current node.
            </summary>
            <returns>
            A string that represents the current node.
            </returns>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.Children">
            <summary>
            Gets a list of the children of this node.
            </summary>
            <value>Returns a list of the children of this node.</value>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.HasChildren">
            <summary>
            Gets a value indicating whether the node contains one or more child nodes.
            </summary>
            <value><c>true</c> if the control node one or more child nodes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.IsChunk">
            <summary>
            Gets a value indicating whether all children nodes are tagged as part of speech or if this node has no children
            and is tagged as part of speech.
            </summary>
            <value><c>true</c> if this node is a chunk node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.IsPosTag">
            <summary>
            Gets a value indicating whether this node is tagged as part of speech.
            </summary>
            <value><c>true</c> if this node is tagged as part of speech; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.Span">
            <summary>
            Gets or sets the node span.
            </summary>
            <value>The node span.</value>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.Type">
            <summary>
            Gets or sets the node type.
            </summary>
            <value>The node type.</value>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.Types">
            <summary>
            Gets the child tags.
            </summary>
            <value>The child tags.</value>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.Token">
            <summary>
            Gets or sets the node token.
            </summary>
            <value>The node token.</value>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbNode.Tokens">
            <summary>
            Gets the tokens in this node.
            </summary>
            <value>The tokens in this node.</value>
        </member>
        <member name="T:SharpNL.Formats.Ptb.PtbSampleStream`1">
            <summary>
            Base class for Penn Treebank sample streams.
            </summary>
            <typeparam name="T">The sample type.</typeparam>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSampleStream`1.#ctor(SharpNL.Formats.Ptb.PtbStreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbSampleStream`1"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSampleStream`1.#ctor(SharpNL.Formats.Ptb.PtbStreamReader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbSampleStream`1"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="ownsStream"><c>true</c> to indicate that the stream will be disposed when this stream is disposed; <c>false</c> to indicate that the stream will not be disposed when this stream is disposed.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSampleStream`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSampleStream`1.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSampleStream`1.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="P:SharpNL.Formats.Ptb.PtbSampleStream`1.Stream">
            <summary>
            Gets the Penn Treebank stream.
            </summary>
            <value>The Penn Treebank stream.</value>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbParseSampleStream.#ctor(SharpNL.Formats.Ptb.PtbStreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbSampleStream`1"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/>
            </exception>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbParseSampleStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.Parser.Parse"/> object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next <see cref="T:SharpNL.Parser.Parse"/> object or <c>null</c> to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Formats.Ptb.PtbPosSampleStream">
            <summary>
            This stream provides <see cref="T:SharpNL.POSTag.POSSample"/> samples readed from a Penn Treebank input. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbPosSampleStream.#ctor(SharpNL.Formats.Ptb.PtbStreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbPosSampleStream"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/>
            </exception>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbPosSampleStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.POSTag.POSSample"/> object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next <see cref="T:SharpNL.POSTag.POSSample"/> object or <c>null</c> to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Formats.Ptb.PtbSentenceSampleStream">
            <summary>
            This stream provides <see cref="T:SharpNL.SentenceDetector.SentenceSample"/> samples using a Penn Treebank stream as input.
            The samples are created using a specific number of sentences defined in the constructor.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSentenceSampleStream.#ctor(SharpNL.Formats.Ptb.PtbStreamReader,SharpNL.Tokenize.IDetokenizer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbSentenceSampleStream"/> using a specified Penn Treebank stream.
            </summary>
            <param name="stream">The Penn Treebank stream.</param>
            <param name="detokenizer">The detokenizer.</param>
            <param name="sampleSize">The number of sentences in each sample.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="detokenizer"/>
            or
            <paramref name="stream"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">sampleSize</exception>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSentenceSampleStream.#ctor(System.String,SharpNL.Utility.IObjectStream{System.String},SharpNL.Tokenize.IDetokenizer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbSentenceSampleStream"/> using a <see cref="T:IObjectStream{string}"/>.
            The function tags will be ignored using this constructor.
            </summary>
            <param name="language">The language.</param>
            <param name="lineStream">The line stream.</param>
            <param name="detokenizer">The detokenizer.</param>
            <param name="sampleSize">The number of sentences in each sample.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="detokenizer"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">sampleSize</exception>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSentenceSampleStream.#ctor(System.String,SharpNL.Utility.IObjectStream{System.String},SharpNL.Tokenize.IDetokenizer,System.Int32,SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbSentenceSampleStream"/> using a <see cref="T:IObjectStream{string}"/> and a evaluation monitor.
            </summary>
            <param name="language">The language.</param>
            <param name="lineStream">The line stream.</param>
            <param name="detokenizer">The detokenizer.</param>
            <param name="sampleSize">The number of sentences in each sample.</param>
            <param name="monitor">The monitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="detokenizer"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">sampleSize</exception>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbSentenceSampleStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.SentenceDetector.SentenceSample"/> object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next <see cref="T:SharpNL.SentenceDetector.SentenceSample"/> object or <c>null</c> to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbStreamReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbStreamReader.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.Formats.Ptb.PtbNode"/> object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next <see cref="T:SharpNL.Formats.Ptb.PtbNode"/> object or <c>null</c> to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbStreamReader.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Ptb.PtbTokenSampleStream">
            <summary>
            Represents a Penn Treebank <see cref="T:SharpNL.Tokenize.TokenSample"/> stream. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbTokenSampleStream.#ctor(SharpNL.Formats.Ptb.PtbStreamReader,SharpNL.Tokenize.IDetokenizer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbSampleStream`1"/> using a specified Penn Treebank stream.
            </summary>
            <param name="stream">The Penn Treebank stream.</param>
            <param name="detokenizer">The detokenizer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="detokenizer"/>
            or
            <paramref name="stream"/>
            </exception>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbTokenSampleStream.#ctor(System.String,SharpNL.Utility.IObjectStream{System.String},SharpNL.Tokenize.IDetokenizer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbTokenSampleStream"/> using a <see cref="T:IObjectStream{string}"/>.
            The function tags will be ignored using this constructor.
            </summary>
            <param name="language">The language.</param>
            <param name="lineStream">The line stream.</param>
            <param name="detokenizer">The detokenizer.</param>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbTokenSampleStream.#ctor(System.String,SharpNL.Utility.IObjectStream{System.String},SharpNL.Tokenize.IDetokenizer,SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ptb.PtbTokenSampleStream"/> using a <see cref="T:IObjectStream{string}"/> and a evaluation monitor.
            </summary>
            <param name="language">The language.</param>
            <param name="lineStream">The line stream.</param>
            <param name="detokenizer">The detokenizer.</param>
            <param name="monitor">The monitor.</param>
        </member>
        <member name="M:SharpNL.Formats.Ptb.PtbTokenSampleStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.Tokenize.TokenSample"/> object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next <see cref="T:SharpNL.Tokenize.TokenSample"/> object or <c>null</c> to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Models">
            <summary>
            Enumerates model types in the SharpNL library.
            </summary>
        </member>
        <member name="F:SharpNL.Models.Unknown">
            <summary>
            Unknown model.
            </summary>
        </member>
        <member name="F:SharpNL.Models.Chunker">
            <summary>
            Represents a chunker model.
            </summary>
        </member>
        <member name="F:SharpNL.Models.DocumentCategorizer">
            <summary>
            The document categorizer model.
            </summary>
        </member>
        <member name="F:SharpNL.Models.Tokenizer">
            <summary>
            Represents a tokenizer model.
            </summary>
        </member>
        <member name="F:SharpNL.Models.NameFind">
            <summary>
            Represents a name finder model.
            </summary>
        </member>
        <member name="F:SharpNL.Models.Parser">
            <summary>
            Represents a parser model.
            </summary>
        </member>
        <member name="F:SharpNL.Models.POSTag">
            <summary>
            Represents a POS tagger model.
            </summary>
        </member>
        <member name="F:SharpNL.Models.SentenceDetector">
            <summary>
            Represents a sentence detector model.
            </summary>
        </member>
        <member name="T:SharpNL.Chunker.ChunkerCrossValidator">
            <summary>
            Represents a chunker cross validator.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerCrossValidator.#ctor(System.String,SharpNL.Utility.TrainingParameters,SharpNL.Chunker.ChunkerFactory,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.Chunker.ChunkSample}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerCrossValidator"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="parameters">The parameters.</param>
            <param name="factory">The factory.</param>
            <param name="listeners">The listeners.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerCrossValidator.Evaluate(SharpNL.Utility.IObjectStream{SharpNL.Chunker.ChunkSample},System.Int32)">
            <summary>
            Evaluates the specified chunk samples.
            </summary>
            <param name="samples">The chunk samples to be evaluated.</param>
            <param name="partitions">The partitions (folds).</param>
        </member>
        <member name="P:SharpNL.Chunker.ChunkerCrossValidator.FMeasure">
            <summary>
            Gets the f-measure.
            </summary>
            <value>The f-measure.</value>
        </member>
        <member name="T:SharpNL.Chunker.ChunkerEvaluator">
            <summary>
            The ChunkerEvaluator measures the performance of the given <see cref="T:SharpNL.Chunker.IChunker"/> with
            the provided reference <see cref="T:SharpNL.Chunker.ChunkSample"/>s.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.Evaluation.Evaluator`2">
            <summary>
            Represents an abstract base class for evaluators.
            Evaluation results are the arithmetic mean of the scores calculated for each reference sample.
            </summary>
            <typeparam name="T">The object type to be evaluated.</typeparam>
            <typeparam name="F">The f-measure evaluation type.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.Evaluator`2.#ctor(SharpNL.Utility.Evaluation.IEvaluationMonitor{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Evaluation.Evaluator`2"/> class.
            </summary>
            <param name="listeners">The evaluation listeners.</param>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.Evaluator`2.ProcessSample(`0)">
            <summary>
            Evaluates the given reference sample object.
            The implementation has to update the score after every invocation.
            </summary>
            <param name="reference">The reference sample.</param>
            <returns>The predicted sample</returns>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.Evaluator`2.EvaluateSample(`0)">
            <summary>
            Evaluates the given reference object. The default implementation calls <see cref="M:ProcessSample"/>.
            </summary>
            <param name="sample">The sample to be evaluated.</param>
            <remarks>
            This method will be changed to private in the future.
            Implementations should override <see cref="M:ProcessSample"/> instead.
            If this method is override, the implementation has to update the score after every invocation.
            </remarks>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.Evaluator`2.Evaluate(SharpNL.Utility.IObjectStream{`0})">
            <summary>
            Reads all sample objects from the stream and evaluates each sample object with <see cref="M:ProcessSample"/> method.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.Evaluator`2.FMeasure">
            <summary>
            Gets or sets the f-measure.
            </summary>
            <value>The f-measure.</value>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerEvaluator.#ctor(SharpNL.Chunker.IChunker,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.Chunker.ChunkSample}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerEvaluator"/> class.
            </summary>
            <param name="chunker">The chunker.</param>
            <param name="listeners">The evaluation listeners.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerEvaluator.ProcessSample(SharpNL.Chunker.ChunkSample)">
            <summary>
            Evaluates the given reference <see cref="T:SharpNL.Chunker.ChunkSample"/> object.
            The implementation has to update the score after every invocation.
            </summary>
            <param name="reference">The reference sample.</param>
            <returns>The predicted sample</returns>
        </member>
        <member name="T:SharpNL.Chunker.ChunkerEventStream">
            <summary>
            Represents an event stream out of data files for training a chunker.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.AbstractEventStream`1">
            <summary>
            Represents a abstract event stream.
            </summary>
            <typeparam name="T">The source object type.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.AbstractEventStream`1.CreateEvents(`0)">
            <summary>
            Creates events for the provided sample.
            </summary>
            <param name="sample">The sample the sample for which training <see cref="T:Event"/>s are be created.</param>
            <returns>The events enumerator.</returns>
        </member>
        <member name="M:SharpNL.Utility.AbstractEventStream`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.AbstractEventStream`1.Read">
            <summary>
            Returns the next <see cref="T:Event"/>. Calling this method repeatedly until it returns,
            null will return each event from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.AbstractEventStream`1.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.Chunker.ChunkSample},SharpNL.Chunker.IChunkerContextGenerator)">
            <summary>
            Creates a new event stream based on the specified data stream using the specified context generator.
            </summary>
            <param name="samples">The samples for this event stream.</param>
            <param name="cg">The context generator which should be used in the creation of events for this event stream.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerEventStream.CreateEvents(SharpNL.Chunker.ChunkSample)">
            <summary>
            Creates events for the provided sample.
            </summary>
            <param name="sample">The sample the sample for which training <see cref="T:Event"/>s are be created.</param>
            <returns>The events enumerator.</returns>
        </member>
        <member name="T:SharpNL.Chunker.ChunkerME">
            <summary>
            The class represents a maximum-entropy-based chunker. Such a chunker can be used to 
            find flat structures based on sequence inputs such as noun phrases or named entities.
            </summary>
        </member>
        <member name="T:SharpNL.Chunker.IChunker">
            <summary>
            The interface for chunkers which provide chunk tags for a sequence of tokens.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.IChunker.Chunk(System.String[],System.String[])">
            <summary>
            Generates chunk tags for the given sequence returning the result in an array.
            </summary>
            <param name="tokens">an array of the tokens or words of the sequence.</param>
            <param name="tags">an array of the pos tags of the sequence.</param>
            <returns>an array of chunk tags for each token in the sequence.</returns>
        </member>
        <member name="M:SharpNL.Chunker.IChunker.ChunkAsSpans(System.String[],System.String[])">
            <summary>
            Generates tagged chunk spans for the given sequence returning the result in a span array.
            </summary>
            <param name="tokens">An array of the tokens or words of the sequence.</param>
            <param name="tags">An array of the pos tags of the sequence.</param>
            <returns>An array of spans with chunk tags for each chunk in the sequence.</returns>
        </member>
        <member name="M:SharpNL.Chunker.IChunker.TopKSequences(System.String[],System.String[])">
            <summary>
            Returns the top k chunk sequences for the specified sentence with the specified pos-tags.
            </summary>
            <param name="tokens">The tokens of the sentence.</param>
            <param name="tags">The pos-tags for the specified sentence.</param>
            <returns>The top k chunk sequences for the specified sentence.</returns>
        </member>
        <member name="M:SharpNL.Chunker.IChunker.TopKSequences(System.String[],System.String[],System.Double)">
            <summary>
            Returns the top k chunk sequences for the specified sentence with the specified pos-tags.
            </summary>
            <param name="tokens">The tokens of the sentence.</param>
            <param name="tags">The pos-tags for the specified sentence.</param>
            <param name="minScore">A lower bound on the score of a returned sequence.</param>
            <returns>The top k chunk sequences for the specified sentence.</returns>
        </member>
        <member name="F:SharpNL.Chunker.ChunkerME.DefaultBeamSize">
            <summary>
            The default beam size.
            </summary>
        </member>
        <member name="F:SharpNL.Chunker.ChunkerME.model">
            <summary>
            The model used to assign chunk tags to a sequence of tokens.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.#ctor(SharpNL.Chunker.ChunkerModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerME"/> with the specified <see cref="T:SharpNL.Chunker.ChunkerModel"/>.
            </summary>
            <param name="model">The chunker model.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.#ctor(SharpNL.Chunker.ChunkerModel,System.Int32,SharpNL.Utility.ISequenceValidator{System.String},SharpNL.Chunker.IChunkerContextGenerator)">
            <summary>
            Initializes the current instance with the specified model and the specified beam size.
            </summary>
            <param name="model">The model for this chunker</param>
            <param name="beamSize">The size of the beam that should be used when decoding sequences.</param>
            <param name="sequenceValidator">The <see cref="T:SharpNL.Utility.ISequenceValidator`1"/> to determines whether the outcome is valid for the preceding sequence. This can be used to implement constraints on what sequences are valid..</param>
            <param name="contextGenerator">The context generator.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.Chunk(System.String[],System.String[])">
            <summary>
            Generates chunk tags for the given sequence returning the result in an array.
            </summary>
            <param name="tokens">an array of the tokens or words of the sequence.</param>
            <param name="tags">an array of the pos tags of the sequence.</param>
            <returns>An array of chunk tags for each token in the sequence or a <c>null</c> value if none.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tokens"/> is null.
            or
            The <paramref name="tags"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The token array is empty.</exception>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.ChunkAsSpans(System.String[],System.String[])">
            <summary>
            Generates tagged chunk spans for the given sequence returning the result in a span array.
            </summary>
            <param name="tokens">An array of the tokens or words of the sequence.</param>
            <param name="tags">An array of the pos tags of the sequence.</param>
            <returns>An array of spans with chunk tags for each chunk in the sequence.</returns>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.TopKSequences(System.String[],System.String[])">
            <summary>
            Returns the top k chunk sequences for the specified sentence with the specified pos-tags.
            </summary>
            <param name="tokens">The tokens of the sentence.</param>
            <param name="tags">The pos-tags for the specified sentence.</param>
            <returns>The top k chunk sequences for the specified sentence.</returns>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.TopKSequences(System.String[],System.String[],System.Double)">
            <summary>
            Returns the top k chunk sequences for the specified sentence with the specified pos-tags.
            </summary>
            <param name="tokens">The tokens of the sentence.</param>
            <param name="tags">The pos-tags for the specified sentence.</param>
            <param name="minScore">A lower bound on the score of a returned sequence.</param>
            <returns>The top k chunk sequences for the specified sentence.</returns>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.Chunker.ChunkSample},SharpNL.Utility.TrainingParameters,SharpNL.Chunker.ChunkerFactory)">
            <summary>
            Trains a chunker model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="factory">The sentence detector factory.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <returns>The trained <see cref="T:SharpNL.Chunker.ChunkerModel"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">The trainer was not specified.</exception>
            <exception cref="T:System.NotSupportedException">Trainer type is not supported.</exception>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.Chunker.ChunkSample},SharpNL.Utility.TrainingParameters,SharpNL.Chunker.ChunkerFactory,SharpNL.Monitor)">
            <summary>
            Trains a chunker model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="factory">The sentence detector factory.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.</param>
            <returns>The trained <see cref="T:SharpNL.Chunker.ChunkerModel"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">The trainer was not specified.</exception>
            <exception cref="T:System.NotSupportedException">Trainer type is not supported.</exception>
        </member>
        <member name="P:SharpNL.Chunker.ChunkerME.Probabilities">
            <summary>
            Returns an array with the probabilities of the last decoded sequence.
            The sequence was determined based on the previous call to <see cref="M:ChunkerME.Chunk"/>.
            </summary>
            <value>An array with the same number of probabilities as tokens were sent to <see cref="M:ChunkerME.Chunk"/> when it was last called.</value>
        </member>
        <member name="T:SharpNL.Chunker.ChunkerModel">
            <summary>
            Represents a chunker model.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.Model.BaseModel">
            <summary>
            Abstract class used by the models.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.Serialization.ArtifactProvider">
            <summary>
            Provides access to model persisted artifacts.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Serialization.ArtifactProvider.artifactMap">
            <summary>
            The artifact map
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Serialization.ArtifactProvider"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.Contains(System.String)">
            <summary>
            Determines whether this artifact provider contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if this artifact provider contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.Contains(System.String,System.Type)">
            <summary>
            Determines whether this artifact provider contains the specified key and the artifact is instance of the given type.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if this artifact provider contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.GetArtifact``1(System.String)">
            <summary>
            Gets an artifact with the specified key.
            </summary>
            <typeparam name="T">The artifact type.</typeparam>
            <param name="key">The key.</param>
            <returns>The artifact.</returns>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts.
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to find the manifest entry.</exception>
            <remarks>Subclasses should generally invoke base.ValidateArtifactMap at the beginning of this method.</remarks>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to find the manifest file.</exception>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.RegisterArtifactType(System.String,SharpNL.Utility.Serialization.SerializeDelegate,SharpNL.Utility.Serialization.DeserializeDelegate)">
            <summary>
            Registers an artifact type with his serialization methods.
            </summary>
            <param name="name">The artifact extension.</param>
            <param name="serialize">The serialization method.</param>
            <param name="deserialize">The deserialization method.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/>
            or
            <paramref name="serialize"/>
            or
            <paramref name="deserialize"/>
            </exception>
            <exception cref="T:System.ArgumentException">The specified artifact name is already registered.</exception>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.CreateArtifactSerializers">
            <summary>
            Registers all serializers for their artifact file name extensions. Override this method to register custom file extensions.
            </summary>
            <remarks>
            The subclasses should invoke the <see cref="M:SharpNL.Utility.Serialization.ArtifactProvider.RegisterArtifactType(System.String,SharpNL.Utility.Serialization.SerializeDelegate,SharpNL.Utility.Serialization.DeserializeDelegate)"/> to register 
            the proper serialization/deserialization methods for an new extension.
            Warning: This method is called in constructor of the base class!! Be aware that this method is ONLY designed to register serializers.
            </remarks>
            <seealso href="https://msdn.microsoft.com/en-us/library/ms182331.aspx"/>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.FinishLoadingArtifacts(System.IO.Compression.ZipArchive)">
            <summary>
            Finish loading the artifacts now that it knows all serializers.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.LoadArtifact(System.String,System.IO.Stream)">
            <summary>
            Loads the artifact with the given name.
            </summary>
            <param name="name">The artifact name.</param>
            <param name="dataStream">The data stream.</param>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unknown artifact format.</exception>
            <exception cref="T:System.InvalidOperationException">The deserializer is not registered.</exception>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.Serialize(System.IO.Stream)">
            <summary>
            Serializes the model to the given <see cref="T:Stream"/>
            </summary>
            <param name="outputStream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="outputStream"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">The specified <paramref name="outputStream"/> is not writable.</exception>
            <exception cref="T:System.InvalidOperationException">
            Invalid artifact entry name.
            or
            Missing serializer for the artifact.
            </exception>
        </member>
        <member name="M:SharpNL.Utility.Serialization.ArtifactProvider.Serialize(System.String)">
            <summary>
            Serializes the model to the given filename. If the specified file already exist, the serializer will overwrite the existing file.
            </summary>
            <param name="fileName">A relative or absolute path for the file that the current object will be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="fileName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="fileName"/> is an empty string (""), contains only white space, or contains one
            or more invalid characters. -or-path refers to a non-file device, such as
            "con:", "com1:", "lpt1:", etc. in an NTFS environment.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum 
            length. For example, on Windows-based platforms, paths must be less than
            248 characters, and file names must be less than 260 characters.
            </exception>
        </member>
        <member name="P:SharpNL.Utility.Serialization.ArtifactProvider.FinishedLoadingArtifacts">
            <summary>
            Gets a value indicating whether artifacts are completely loaded.
            </summary>
            <value><c>true</c> if the artifacts are completely loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.Serialization.ArtifactProvider.Manifest">
            <summary>
            Gets the manifest property collection.
            </summary>
            <value>The manifest property collection.</value>
        </member>
        <member name="P:SharpNL.Utility.Serialization.ArtifactProvider.IsLoadedFromSerialized">
            <summary>
            Gets a value indicating if this provider was loaded from serialized.
            </summary>
            <value><c>true</c> if this model was loaded from serialized; otherwise, <c>false</c>.</value>
            <remarks>It is useful, for example, while validating artifacts: you can skip the time consuming ones if they where already validated during the serialization. 
            </remarks>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="componentName">Name of the component.</param>
            <exception cref="T:System.ArgumentNullException">The component name cannot be null.</exception>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Utility.BaseToolFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="componentName">Name of the component.</param>
            <param name="languageCode">The language code.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <param name="toolFactory">The tool factory.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="componentName"/> cannot be null.
            or
            The <paramref name="languageCode"/> cannot be empty or null.
            </exception>
            <exception cref="T:System.InvalidOperationException">Unable to initialize the factory.</exception>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes the current instance. The sub-class constructor should call the method <see cref="M:SharpNL.Utility.Model.BaseModel.CheckArtifactMap"/> to check the artifact map is OK.
            </summary>
            <param name="componentName">Name of the component.</param>
            <param name="languageCode">The language code.</param>
            <param name="manifestInfoEntries">Additional information in the manifest.</param>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.#ctor(System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="componentName">Name of the component.</param>
            <param name="stream">The input stream containing the model.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="componentName">Name of the component.</param>
            <param name="fileName">The model filename.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file does not exist.</exception>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.CreateArtifactSerializers">
            <summary>
            Registers all serializers for their artifact file name extensions. Override this method to register custom file extensions.
            </summary>
            <remarks>
            The subclasses should invoke the <see cref="M:SharpNL.Utility.Serialization.ArtifactProvider.RegisterArtifactType(System.String,SharpNL.Utility.Serialization.SerializeDelegate,SharpNL.Utility.Serialization.DeserializeDelegate)"/> to register 
            the proper serialization/deserialization methods for an new extension.
            Warning: This method is called in constructor of the base class!! Be aware that this method is ONLY designed to register serializers.
            </remarks>
            <seealso href="https://msdn.microsoft.com/en-us/library/ms182331.aspx"/>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.CheckArtifactMap">
            <summary>
            Checks the artifact map.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The method BaseModel.finishLoadingArtifacts(..) was not called by BaseModel sub-class.
            or
            Invalid artifact map.
            </exception>
            <remarks>A subclass should call this method from a constructor which accepts the individual artifact map items, to validate that these items form a valid model.</remarks>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.InitializeFactory">
            <summary>
            Initializes the tool factory.
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">The specified factory is invalid or not supported.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to initialize the tool factory.</exception>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.ManifestDeserialized">
            <summary>
            Called when the manifest is deserialized from a stream. This method initialize the tool factory of the model.
            </summary>
            <remarks>Subclasses MUST invoke base.ManifestDeserialized at the beginning of this method, otherwise the factory will be not initialized properly.</remarks>
        </member>
        <member name="M:SharpNL.Utility.Model.BaseModel.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts.
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to find the manifest entry.</exception>
            <remarks>Subclasses should generally invoke base.ValidateArtifactMap at the beginning of this method.</remarks>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">The artifact map is invalid.</exception>
            <remarks>
            The exception <see cref="T:SharpNL.Utility.InvalidFormatException"/> should be thrown if a problem is found during the validation.
            </remarks>
        </member>
        <member name="P:SharpNL.Utility.Model.BaseModel.DefaultFactory">
            <summary>
            Gets the default tool factory.
            </summary>
            <returns>The default tool factory.</returns>
        </member>
        <member name="P:SharpNL.Utility.Model.BaseModel.Language">
            <summary>
            Gets the language code of the material which was used to train the model or x-unspecified if non was set.
            </summary>
            <value>The language code of this model.</value>
        </member>
        <member name="P:SharpNL.Utility.Model.BaseModel.Version">
            <summary>
            Gets the OpenNLP version which was used to create the model.
            </summary>
            <value>The <see cref="P:SharpNL.Utility.Model.BaseModel.Version"/> object.</value>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerModel.#ctor(System.String,SharpNL.ML.Model.ISequenceClassificationModel{System.String},System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Chunker.ChunkerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerModel"/> class using a <see cref="T:ISequenceClassificationModel{string}"/> as the chunker model.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="chunkerModel">The chunker model.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <param name="factory">The chunker factory.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,SharpNL.Chunker.ChunkerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerModel"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="chunkerModel">The chunker model.</param>
            <param name="factory">The chunker factory.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Chunker.ChunkerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerModel"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="chunkerModel">The chunker model.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <param name="factory">The chunker factory.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Chunker.ChunkerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerModel"/> class with a specified <paramref name="beamSize"/> value.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="chunkerModel">The chunker model.</param>
            <param name="beamSize">Size of the beam.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <param name="factory">The chunker factory.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerModel.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkerModel"/> class using a input stream to deserialize the chunker model into a new instance.
            </summary>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkerModel.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts.
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to find the manifest entry.</exception>
            <remarks>Subclasses should generally invoke base.ValidateArtifactMap at the beginning of this method.</remarks>
        </member>
        <member name="P:SharpNL.Chunker.ChunkerModel.BeamSize">
            <summary>
            Gets the beam size.
            </summary>
            <value>The the beam size.</value>
        </member>
        <member name="P:SharpNL.Chunker.ChunkerModel.ChunkerSequenceModel">
            <summary>
            Gets the chunker sequence model.
            </summary>
            <value>The chunker sequence model.</value>
        </member>
        <member name="P:SharpNL.Chunker.ChunkerModel.DefaultFactory">
            <summary>
            Gets the default tool factory.
            </summary>
            <returns>The default tool factory.</returns>
        </member>
        <member name="P:SharpNL.Chunker.ChunkerModel.MaxentModel">
            <summary>
            Gets the maxent model.
            </summary>
            <value>The maxent model.</value>
        </member>
        <member name="P:SharpNL.Chunker.ChunkerModel.Factory">
            <summary>
            Gets the chunker tool factory.
            </summary>
            <value>The chunker tool factory.</value>
        </member>
        <member name="T:SharpNL.Chunker.ChunkSample">
            <summary>
            Represents chunks for a single unit of text.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSample.#ctor(System.String[],System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkSample"/> class.
            </summary>
            <param name="sentence">The training sentence.</param>
            <param name="tags">The POS Tags for the sentence.</param>
            <param name="preds">The Chunk tags in B-* I-* notation.</param>
            <exception cref="T:System.ArgumentException">The arguments must have the same length.</exception>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSample.Equals(SharpNL.Chunker.ChunkSample)">
            <summary>
            Indicates whether the current chunk sample is equal to another chunk sample.
            </summary>
            <returns>
            true if the current chunk sample is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An chunk sample to compare with this chunk sample.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSample.GetPhrasesAsSpanList">
            <summary>
            Gets the phrases as an array of spans
            </summary>
            <returns>The spans array.</returns>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSample.PhrasesAsSpanList(System.String[],System.String[],System.String[])">
            <summary>
            Phrases as span list.
            </summary>
            <param name="sentence">The training sentence.</param>
            <param name="tags">POS Tags for the sentence.</param>
            <param name="preds">Chunk tags in B-* I-* notation.</param>
            <returns>The phrases as an array of spans.</returns>
            <exception cref="T:System.ArgumentException">The arguments must have the same length.</exception>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSample.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Chunker.ChunkSample.NicePrint">
            <summary>
            Gets a nice to read string for the phrases formatted as following: 
            <code>
            [NP Rockwell_NNP ] [VP said_VBD ] [NP the_DT agreement_NN ] [VP calls_VBZ ] [SBAR for_IN ] [NP it_PRP ] [VP to_TO supply_VB ] [NP 200_CD additional_JJ so-called_JJ shipsets_NNS ] [PP for_IN ] [NP the_DT planes_NNS ] ._.
            </code>
            </summary>
            <value>A nice to read string representation of the chunk phases.</value>
        </member>
        <member name="P:SharpNL.Chunker.ChunkSample.Preds">
            <summary>
            Gets the Chunk tags in B-* I-* notation.
            </summary>
            <value>The the Chunk tags in B-* I-* notation.</value>
        </member>
        <member name="P:SharpNL.Chunker.ChunkSample.Sentence">
            <summary>
            Gets the training sentence
            </summary>
            <value>The training sentence.</value>
        </member>
        <member name="P:SharpNL.Chunker.ChunkSample.Tags">
            <summary>
            Gets the POS Tags for the sentence.
            </summary>
            <value>The POS Tags for the sentence..</value>
        </member>
        <member name="T:SharpNL.Chunker.ChunkSampleSequenceStream">
            <summary>
            Represents a <see cref="T:SharpNL.Chunker.ChunkSample"/> sequence stream.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.ISequenceStream">
            <summary>
            Interface for streams of sequences used to train sequence models.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.ISequenceStream.UpdateContext(SharpNL.ML.Model.Sequence,SharpNL.ML.Model.AbstractModel)">
            <summary>
            Creates a new event array based on the outcomes predicted by the specified parameters for the specified sequence.
            </summary>
            <param name="sequence">The sequence to be evaluated.</param>
            <param name="model">The model.</param>
            <returns>The event array.</returns>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSampleSequenceStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.Chunker.ChunkSample},SharpNL.Chunker.IChunkerContextGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkSampleSequenceStream"/> class using the given parameters.
            </summary>
            <param name="samples">The chunk samples.</param>
            <param name="contextGenerator">The chunker context generator.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="samples"/> is null.
            or
            The <paramref name="contextGenerator"/> is null.
            </exception>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSampleSequenceStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSampleSequenceStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.ML.Model.Sequence"/>. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSampleSequenceStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSampleSequenceStream.UpdateContext(SharpNL.ML.Model.Sequence,SharpNL.ML.Model.AbstractModel)">
            <summary>
            Creates a new event array based on the outcomes predicted by the specified parameters for the specified sequence.
            </summary>
            <param name="sequence">The sequence to be evaluated.</param>
            <param name="model">The model.</param>
            <returns>The event array.</returns>
            <remarks>Always return null.</remarks>
        </member>
        <member name="T:SharpNL.Chunker.ChunkSampleStream">
            <summary>
            Parses the conll 2000 shared task shallow parser training data.
            </summary>
            <remarks>
            <para>
            Data format is specified on the conll page: <br />
            <see href="http://www.cnts.ua.ac.be/conll2000/chunking/" />
            </para>
            </remarks>
        </member>
        <member name="T:SharpNL.Utility.FilterObjectStream`2">
            <summary>
            Abstract base class for filtering <see cref="T:IObjectStream{T}"/>.
            Filtering streams take an existing stream and convert its output to something else.
            </summary>
            <typeparam name="S">The type of the source/input stream.</typeparam>
            <typeparam name="T">The type of this stream.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.FilterObjectStream`2.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FilterObjectStream`2.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.FilterObjectStream`2.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="P:SharpNL.Utility.FilterObjectStream`2.Samples">
            <summary>
            Gets the items from this filtered stream.
            </summary>
            <value>The items from this filtered stream.</value>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Chunker.ChunkSampleStream"/> class.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:SharpNL.Chunker.ChunkSampleStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.Chunker.ChunkSample"/>. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Chunker.DefaultChunkerContextGenerator">
            <summary>
            Represents a default chunker context generator.
            </summary>
            <remarks>Features based on chunking model described in Fei Sha and Fernando Pereira. 
            Shallow parsing with conditional random fields. 
            In Proceedings of HLT-NAACL 2003. Association for Computational Linguistics, 2003.
            </remarks> 
        </member>
        <member name="T:SharpNL.Chunker.IChunkerContextGenerator">
            <summary>
            Interface for the context generator used in syntactic chunking.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.IBeamSearchContextGenerator`1">
            <summary>Interface for context generators used with a sequence beam search.</summary>
        </member>
        <member name="M:SharpNL.Utility.IBeamSearchContextGenerator`1.GetContext(System.Int32,`0[],System.String[],System.Object[])">
            <summary>Gets the context for the specified position in the specified sequence (list).</summary>
            <param name="index">The index of the sequence.</param>
            <param name="sequence">The sequence of items over which the beam search is performed.</param>
            <param name="priorDecisions">The sequence of decisions made prior to the context for which this decision is being made.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The context for the specified position in the specified sequence.</returns>
        </member>
        <member name="M:SharpNL.Chunker.IChunkerContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.String[])">
            <summary>
            Gets the contexts for chunking of the specified index.
            </summary>
            <param name="index">The index of the token in the specified tokens array for which the context should be constructed.</param>
            <param name="tokens">The tokens of the sentence. The <code>ToString</code> methods of these objects should return the token text.</param>
            <param name="tags">The POS tags for the the specified tokens.</param>
            <param name="prevDecisions">The previous decisions made in the tagging of this sequence.</param>
            <returns>An array of predictive contexts on which a model basis its decisions.</returns>
        </member>
        <member name="M:SharpNL.Chunker.DefaultChunkerContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.Object[])">
            <summary>
            Gets the context for the specified position in the specified sequence (list).
            </summary>
            <param name="index">The index of the sequence.</param>
            <param name="sequence">The sequence of items over which the beam search is performed.</param>
            <param name="priorDecisions">The sequence of decisions made prior to the context for which this decision is being made.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The context for the specified position in the specified sequence.</returns>
        </member>
        <member name="M:SharpNL.Chunker.DefaultChunkerContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.String[])">
            <summary>
            Gets the contexts for chunking of the specified index.
            </summary>
            <param name="index">The index of the token in the specified tokens array for which the context should be constructed.</param>
            <param name="tokens">The tokens of the sentence. The <code>ToString</code> methods of these objects should return the token text.</param>
            <param name="tags">The POS tags for the the specified tokens.</param>
            <param name="preds">The previous decisions made in the tagging of this sequence.</param>
            <returns>An array of predictive contexts on which a model basis its decisions.</returns>
        </member>
        <member name="T:SharpNL.Chunker.DefaultChunkerSequenceValidator">
            <summary>
            Represents a default chunker sequence validator.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.ISequenceValidator`1">
            <summary>
            Interface ISequenceValidator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpNL.Utility.ISequenceValidator`1.ValidSequence(System.Int32,`0[],System.String[],System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.
            This is used to restrict invalid sequences such as those used in start/continue tag-based chunking or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">The index in the input sequence for which the new outcome is being proposed.</param>
            <param name="inputSequence">The input sequence.</param>
            <param name="outcomesSequence">The outcomes so far in this sequence.</param>
            <param name="outcome">The next proposed outcome for the outcomes sequence.</param>
            <returns><c>true</c> if the sequence would still be valid with the new outcome, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Chunker.DefaultChunkerSequenceValidator.ValidSequence(System.Int32,System.String[],System.String[],System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.
            This is used to restrict invalid sequences such as those used in start/continue tag-based chunking or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">The index in the input sequence for which the new outcome is being proposed.</param>
            <param name="inputSequence">The input sequence.</param>
            <param name="outcomesSequence">The outcomes so far in this sequence.</param>
            <param name="outcome">The next proposed outcome for the outcomes sequence.</param>
            <returns><c>true</c> if the sequence would still be valid with the new outcome, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Chunker.DefaultChunkerSequenceValidator.ValidOutcome(System.String,System.String[])">
            <summary>
            Validate the outcome.
            </summary>
            <param name="outcome">The outcome.</param>
            <param name="sequence">The sequence.</param>
            <returns><c>true</c> if the outcome is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpNL.Dictionary.Attributes">
            <summary>
            The <see cref="T:SharpNL.Dictionary.Attributes"/> class stores name value pairs.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.Attributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Attributes"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.Attributes.Add(System.String,System.String)">
            <summary>
            Adds the specified key and value to the attributes.
            </summary>
            <param name="key">The attribute key.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:SharpNL.Dictionary.Attributes.Contains(System.String)">
            <summary>
            Determines whether this attribute collection contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if this attribute collection contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.Attributes.Clear">
            <summary>
            Removes all attributes from this instance.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.Attributes.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through keys in the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Dictionary.Attributes.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the keys in the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SharpNL.Dictionary.Attributes.Count">
            <summary>
            Gets the number of attributes in this collection.
            </summary>
            <value>The number of attributes in this collection.</value>
        </member>
        <member name="P:SharpNL.Dictionary.Attributes.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.InvalidOperationException">
            key must not be null.
            or
            value must not be null.
            </exception>
        </member>
        <member name="T:SharpNL.Dictionary.Dictionary">
            <summary>
            Represents an universal dictionary.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Dictionary"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Dictionary"/> indicating 
            if the dictionary is case sensitive.
            </summary>
            <param name="caseSensitive">if set to <c>true</c> if the dictionary should be case sensitive.</param>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Add(SharpNL.Dictionary.Entry)">
            <summary>
            Adds the specified entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>The new entry.</returns>
            <exception cref="T:System.ArgumentNullException">entry</exception>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Add(SharpNL.Utility.StringList)">
            <summary>
            Adds the tokens to the dictionary as one new entry.
            </summary>
            <param name="tokens">The new entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Add(System.String[])">
            <summary>
            Adds the string tokens to the dictionary as one new entry.
            </summary>
            <param name="tokens">The string tokens.</param>
            <returns>The new entry.</returns>
            <remarks>
            Be careful to use this method as a object initializer, it may create an unexpected result!
            <para>
             This method is the same as:
             <code>
             Add(new Entry(new string[] { ... }));
             </code>
            </para>
            </remarks>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Add(System.String)">
            <summary>
            Adds the string token to the dictionary as one new entry.
            </summary>
            <param name="token">The string token.</param>
            <returns>The new entry.</returns>
            <remarks>
            Be careful to use this method as a object initializer, it may create an unexpected result!
            <para>
             This method is the same as:
             <code>
             Add(new Entry(new string[] { ... }));
             </code>
            </para>
            </remarks>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Contains(SharpNL.Utility.StringList)">
            <summary>
            Determines whether this dictionary has the given entry.
            </summary>
            <param name="tokens">The tokens.</param>
            <returns><c>true</c> if it contains the entry; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Clear">
            <summary>
            Removes all entries from the <see cref="T:SharpNL.Dictionary.Dictionary"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the artifact using the specified input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not readable.</exception>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Dictionary"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.ParseOneEntryPerLine(System.IO.StringReader)">
            <summary>
            Reads a dictionary which has one entry per line. The tokens inside an entry are whitespace delimited.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The parsed dictionary.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Remove(SharpNL.Utility.StringList)">
            <summary>
            Removes the given tokens form the current instance.
            </summary>
            <param name="tokens">The tokens to remove.</param>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Serialize(System.IO.Stream)">
            <summary>
            Serializes the current instance to the given stream.
            </summary>
            <param name="outputStream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream is not writable.</exception>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the the artifact into the specified stream.
            </summary>
            <param name="artifact">The artifact.</param>
            <param name="outputStream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">outputStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not writable.</exception>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.ToHashSet">
            <summary>
            Converts the dictionary to a <see cref="T:System.Collections.Generic.HashSet`1"/> object.
            </summary>
            <returns>The HashSet&lt;string&gt; object.</returns>
        </member>
        <member name="M:SharpNL.Dictionary.Dictionary.ToList">
            <summary>
            Converts the dictionary to a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <returns>A string list object.</returns>
            <remarks>If this dictionary entries are multi tokens only the first token of the entry will be part of the list.</remarks>
        </member>
        <member name="P:SharpNL.Dictionary.Dictionary.MinTokenCount">
            <summary>
            Gets the minimum token count in the dictionary.
            </summary>
            <value>The minimum token count in the dictionary.</value>
        </member>
        <member name="P:SharpNL.Dictionary.Dictionary.MaxTokenCount">
            <summary>
            Gets the maximum token count in the dictionary.
            </summary>
            <value>The maximum token count in the dictionary.</value>
        </member>
        <member name="P:SharpNL.Dictionary.Dictionary.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SharpNL.Dictionary.Entry"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:SharpNL.Dictionary.Entry"/> at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:SharpNL.Dictionary.Entry">
            <summary>
            Represents an dictionary entry.
            </summary>
            <seealso cref="P:SharpNL.Dictionary.Entry.Attributes"/>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Entry"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.#ctor(SharpNL.Utility.StringList)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Entry"/> with the specified tokens.
            </summary>
            <param name="tokens">The tokens.</param>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Entry"/> with the specified tokens.
            </summary>
            <param name="tokens">The string tokens.</param>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.#ctor(System.String[],SharpNL.Dictionary.Attributes)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Entry"/> with the specified strnig tokens and attributes.
            </summary>
            <param name="tokens">The tokens.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.#ctor(SharpNL.Utility.StringList,SharpNL.Dictionary.Attributes)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Dictionary.Entry"/> class.
            </summary>
            <param name="tokens">The tokens.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.Equals(SharpNL.Dictionary.Entry)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.GetHashCode">
            <summary>
            Returns the hash code for this entry.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Entry"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Dictionary.Entry.ToString">
            <summary>
            Returns a string that represents the current entry.
            </summary>
            <returns>
            A string that represents the current entry.
            </returns>
        </member>
        <member name="P:SharpNL.Dictionary.Entry.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:SharpNL.Dictionary.Entry.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether this entry is case sensitive.
            </summary>
            <value><c>true</c> if this entry is case sensitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Dictionary.Entry.Tokens">
            <summary>
            Gets the tokens.
            </summary>
            <value>The tokens.</value>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.BagOfWordsFeatureGenerator">
            <summary>
            Generates a feature for each word in a document.
            </summary>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.IFeatureGenerator">
            <summary>
            Interface for generating features for document categorization.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IFeatureGenerator.ExtractFeatures(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Extracts the features from the given text.
            </summary>
            <param name="text">The text.</param>
            <param name="extraInformation">The extra information.</param>
            <returns>The list of features.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.BagOfWordsFeatureGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.BagOfWordsFeatureGenerator"/> using only all letter tokens.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.BagOfWordsFeatureGenerator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.BagOfWordsFeatureGenerator"/> class.
            </summary>
            <param name="useOnlyAllLetterTokens">if set to <c>true</c> only all letter tokens will be added to the feature list.</param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.BagOfWordsFeatureGenerator.ExtractFeatures(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Extracts the features from the given words.
            </summary>
            <param name="text">The words array.</param>
            <param name="extraInformation">The extra information.</param>
            <returns>The list of features.</returns>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentCategorizerContextGenerator">
            <summary>
            Represents the document categorizer context generator.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerContextGenerator.#ctor(SharpNL.DocumentCategorizer.IFeatureGenerator[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerContextGenerator"/> with the given generators.
            </summary>
            <param name="featureGenerators">The feature generators.</param>
            <exception cref="T:System.ArgumentNullException">featureGenerators</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The feature generators must not be empty.</exception>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerContextGenerator.GetContext(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the context for the given <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <param name="extraInformation">The extra information.</param>
            <returns>The contexts for the specified text.</returns>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentCategorizerEvaluator">
            <summary>
            Represents a document categorizer evaluator.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerEvaluator.#ctor(SharpNL.DocumentCategorizer.IDocumentCategorizer,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.DocumentCategorizer.DocumentSample}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerEvaluator"/> class.
            </summary>
            <param name="documentCategorizer">The document categorizer.</param>
            <param name="listeners">The listeners.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="documentCategorizer"/>.</exception>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerEvaluator.ProcessSample(SharpNL.DocumentCategorizer.DocumentSample)">
            <summary>
            Evaluates the given reference sample object.
            The implementation has to update the score after every invocation.
            </summary>
            <param name="reference">The reference sample.</param>
            <returns>The predicted sample</returns>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentCategorizerEventStream">
            <summary>
            Enumerator-like class for modeling document classification events.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.DocumentCategorizer.DocumentSample})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerEventStream"/> class 
            using the <see cref="T:SharpNL.DocumentCategorizer.BagOfWordsFeatureGenerator"/> as context generator.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.DocumentCategorizer.DocumentSample},SharpNL.DocumentCategorizer.IFeatureGenerator[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerEventStream"/> class with the given feature generators.
            </summary>
            <param name="samples">The samples.</param>
            <param name="featureGenerators">The feature generators.</param>
            <exception cref="T:System.ArgumentNullException">featureGenerators</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">featureGenerators</exception>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerEventStream.CreateEvents(SharpNL.DocumentCategorizer.DocumentSample)">
            <summary>
            Creates events for the provided sample.
            </summary>
            <param name="sample">The sample the sample for which training <see cref="T:Event"/>s are be created.</param>
            <returns>The events enumerator.</returns>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentCategorizerFactory">
            <summary>
            The factory that provides the document categorizer default implementations and resources.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerFactory"/> that provides 
            the default implementation of the resources.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerFactory.#ctor(SharpNL.Tokenize.ITokenizer,SharpNL.DocumentCategorizer.IFeatureGenerator[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerFactory"/> with the specified tokenizer and the feature generatos.
            </summary>
            <param name="tokenizer">The tokenizer.</param>
            <param name="featureGenerators">The feature generators.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tokenizer"/>
            or
            <paramref name="featureGenerators"/>
            </exception>
            <exception cref="T:System.ArgumentException">The specified tokenizer is not registered in the type resolver.</exception>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerFactory.CreateManifestEntries">
            <summary>
            Creates the manifest entries that will be added to the model manifest
            </summary>
            <returns>The manifest entries to added to the model manifest.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerFactory.LoadFeatureGenerators(System.String)">
            <summary>
            Loads the feature generators from a string representation.
            </summary>
            <param name="classNames">The class names.</param>
            <returns>IFeatureGenerator[].</returns>
            <exception cref="T:System.ArgumentNullException">classNames</exception>
            <exception cref="T:System.NotSupportedException">Unable to resolve the type #CLASS# with the SharpNL type resolver.</exception>
            <seealso cref="T:SharpNL.Utility.TypeResolver"/>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentCategorizerFactory.FeatureGenerators">
            <summary>
            Gets the feature generators.
            </summary>
            <value>The feature generators.</value>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentCategorizerFactory.Tokenizer">
            <summary>
            Gets the tokenizer.
            </summary>
            <value>The tokenizer.</value>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentCategorizerModel">
            <summary>
            Represents a document categorizer model.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerModel.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerModel"/> with a input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.DocumentCategorizer.DocumentCategorizerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerModel"/> with the default parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="doccatModel">The doccat model.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerModel.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts.
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to find the manifest entry.</exception>
            <remarks>Subclasses should generally invoke base.ValidateArtifactMap at the beginning of this method.</remarks>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentCategorizerModel.DefaultFactory">
            <summary>
            Gets the default tool factory.
            </summary>
            <returns>The default tool factory.</returns>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentCategorizerModel.Factory">
            <summary>
            Gets the factory.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentCategorizerModel.MaxentModel">
            <summary>
            Gets the maxent model.
            </summary>
            <value>The maxent model.</value>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentCategorizerME">
            <summary>
            Maximum entropy implementation of <see cref="T:SharpNL.DocumentCategorizer.IDocumentCategorizer"/>.
            </summary>
            <example>
            This example shows how to use the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerME"/>.
            <code>
            var tokens = new[] { "This", "is", "a", "sample", "text", "." };
            var model = new DocumentCategorizerModel(new FileStream("modelfile.bin", FileMode.Open));
            var categorizer = new DocumentCategorizerME(model);
            
            double[] outcomes = categorizer.Categorize(tokens);
            string category = categorizer.GetBestCategory(outcomes);
            
            </code>
            </example>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.IDocumentCategorizer">
            <summary>
            Interface for classes which categorize documents.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.Categorize(System.String[])">
            <summary>
            Categorizes the specified text.
            </summary>
            <param name="tokens">The tokens.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.Categorize(System.String)">
            <summary>
            Categorizes the specified document.
            </summary>
            <param name="document">The document string.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.Categorize(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Categorizes the specified text with extra informations.
            </summary>
            <param name="tokens">The tokens.</param>
            <param name="extraInformation">The extra information.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.Categorize(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Categorizes the specified document with extra information.
            </summary>
            <param name="document">The document.</param>
            <param name="extraInformation">The extra information.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.GetBestCategory(System.Double[])">
            <summary>
            Returns the best category for the given outcome.
            </summary>
            <param name="outcome">The outcome.</param>
            <returns>The best category.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.GetIndex(System.String)">
            <summary>
            Returns the category index.
            </summary>
            <param name="category">The category.</param>
            <returns>Category index.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.ScoreMap(System.String)">
            <summary>
            Returns a map in which the key is the category name and the value is the score.
            </summary>
            <param name="text">text the input text to classify.</param>
            <returns>The dictionary with the categories with the scores.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.ScoreMap(System.String[])">
            <summary>
            Returns a map in which the key is the category name and the value is the score.
            </summary>
            <param name="tokens">The sentence tokens to classify.</param>
            <returns>The dictionary with the categories with the scores.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.IDocumentCategorizer.SortedScoreMap(System.String)">
            <summary>
            Returns a map with the score as a key in ascending order.
            </summary>
            <param name="text">Text the input text to classify.</param>
            <returns>A dictionary of categories with the score.</returns>
            <returns>
            Many categories can have the same score, hence the set as value
            </returns>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.IDocumentCategorizer.NumberOfCategories">
            <summary>
            Gets the number of categories.
            </summary>
            <value>The number of categories.</value>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerME"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.#ctor(SharpNL.DocumentCategorizer.DocumentCategorizerModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerME"/> with a document categorizer model.
            The default feature generation will be used.
            </summary>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">model</exception>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.Categorize(System.String[])">
            <summary>
            Categorizes the specified text.
            </summary>
            <param name="tokens">The text.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.Categorize(System.String)">
            <summary>
            Categorizes the specified document.
            </summary>
            <param name="document">The document string.</param>
            <returns>A double array containing the outcomes.</returns>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.Categorize(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Categorizes the specified text with extra informations.
            </summary>
            <param name="tokens">The sentence tokens.</param>
            <param name="extraInformation">The extra information.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.Categorize(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Categorizes the specified document with extra information.
            </summary>
            <param name="document">The document string.</param>
            <param name="extraInformation">The extra information.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
            <remarks>The document string will be tokenized by the tokenizer specified in the factory.</remarks>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.GetBestCategory(System.Double[])">
            <summary>
            Returns the best category for the given outcome.
            </summary>
            <param name="outcome">The outcome.</param>
            <returns>The best category.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.GetCategory(System.Int32)">
            <summary>
            Gets the category with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.GetIndex(System.String)">
            <summary>
            Gets the category index.
            </summary>
            <param name="category">The category.</param>
            <returns>Category index.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.DocumentCategorizer.DocumentSample},SharpNL.Utility.TrainingParameters,SharpNL.DocumentCategorizer.DocumentCategorizerFactory)">
            <summary>
            Trains document categorizer model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="factory">The document categorizer factory.</param>
            <returns>The trained <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerModel"/> model.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.DocumentCategorizer.DocumentSample},SharpNL.Utility.TrainingParameters,SharpNL.DocumentCategorizer.DocumentCategorizerFactory,SharpNL.Monitor)">
            <summary>
            Trains document categorizer model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="factory">The document categorizer factory.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The trained <see cref="T:SharpNL.DocumentCategorizer.DocumentCategorizerModel"/> model.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.ScoreMap(System.String)">
            <summary>
            Returns a map in which the key is the category name and the value is the score.
            </summary>
            <param name="text">text the input text to classify.</param>
            <returns>The dictionary with the categories with the scores.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.ScoreMap(System.String[])">
            <summary>
            Returns a map in which the key is the category name and the value is the score.
            </summary>
            <param name="tokens">The sentence tokens to classify.</param>
            <returns>The dictionary with the categories with the scores.</returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentCategorizerME.SortedScoreMap(System.String)">
            <summary>
            Returns a map with the score as a key in ascending order.
            </summary>
            <param name="text">Text the input text to classify.</param>
            <returns>A dictionary of categories with the score.</returns>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentCategorizerME.DefaultFeatureGenerator">
            <summary>
            Gets or sets the default feature generator.
            </summary>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentCategorizerME.NumberOfCategories">
            <summary>
            Gets the number of categories.
            </summary>
            <value>The number of categories.</value>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentSample">
            <summary>
            Class which holds a classified document and its category.
            </summary>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSample.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentSample"/> class.
            </summary>
            <param name="category">The document category.</param>
            <param name="text">The document text.</param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSample.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentSample"/> class.
            </summary>
            <param name="category">The document category.</param>
            <param name="text">The document sentences.</param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSample.#ctor(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentSample"/> class.
            </summary>
            <param name="category">The document category.</param>
            <param name="text">The document sentences.</param>
            <param name="extraInformation">The extra information.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="category"/>
            or
            <paramref name="text"/>
            </exception>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSample.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSample.Equals(SharpNL.DocumentCategorizer.DocumentSample)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSample.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSample.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentSample.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentSample.ExtraInformation">
            <summary>
            Gets the extra information.
            </summary>
            <value>The extra information.</value>
        </member>
        <member name="P:SharpNL.DocumentCategorizer.DocumentSample.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.DocumentSampleStream">
            <summary>
            This class reads in string encoded training samples, parses them and outputs <see cref="T:SharpNL.DocumentCategorizer.DocumentSample"/> objects.
            </summary>
            <remarks>
            Format:<br/>
            Each line contains one sample document.<br/>
            The category is the first string in the line followed by a tab and whitespace separated document tokens.<br/>
            Sample line: category-string tab-char whitespace-separated-tokens line-break-char(s)
            </remarks>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.DocumentCategorizer.DocumentSampleStream"/> with the given samples.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:SharpNL.DocumentCategorizer.DocumentSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.DocumentCategorizer.NGramFeatureGenerator">
            <summary>
            Represents a nGram feature generator.
            </summary>   
        </member>
        <member name="M:SharpNL.DocumentCategorizer.NGramFeatureGenerator.ExtractFeatures(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Extracts the features from the given text.
            </summary>
            <param name="text">The text.</param>
            <param name="extraInformation">The extra information.</param>
            <returns>The list of features.</returns>
        </member>
        <member name="T:SharpNL.Expressions">
            <summary>
            Helper class for common regular expressions.
            </summary>
        </member>
        <member name="F:SharpNL.Expressions.lib">
            <summary>
            The regex library
            </summary>
        </member>
        <member name="M:SharpNL.Expressions.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Expressions"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Expressions.RegExSplit(System.String,SharpNL.Expressions.Expression,System.Boolean)">
            <summary>
            Splits the input string at the positions defined by a specified regular expression and with the specified options.
            </summary>
            <param name="value">The input string.</param>
            <param name="expression">The expression.</param>
            <param name="removeEmpty">if set to <c>true</c> the empty elements will be ignored.</param>
            <returns>An array of strings.</returns>
        </member>
        <member name="M:SharpNL.Expressions.RegExReplace(System.String,SharpNL.Expressions.Expression,System.String)">
            <summary>
            Within a specified input string, replaces all strings that match a regular expression 
            with a specified replacement string.
            </summary>
            <param name="value">The value.</param>
            <param name="expression">The expression.</param>
            <param name="replacement">The replacement.</param>
            <returns>
            A new string that is identical to the input string, except
            that a replacement string takes the place of each matched string.</returns>
        </member>
        <member name="M:SharpNL.Expressions.RegExMatch(System.String,System.String,System.Int32,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for the first occurrence of the 
            regular expression <paramref name="pattern"/>.
            </summary>
            <param name="value">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="group">The result group name.</param>
            <param name="options">The regex options.</param>
            <returns>The result group value or a <c>null</c> value if no match.</returns>
        </member>
        <member name="T:SharpNL.InternalExtensions">
            <summary>
            Utility class that makes my life easier. =D
            </summary>
        </member>
        <member name="M:SharpNL.InternalExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Copies the contents of another <see cref="T:System.Collections.Generic.IDictionary`2"/> object to the end of the collection.
            </summary>
            <typeparam name="K">The dictionary key type.</typeparam>
            <typeparam name="V">The dictionary value type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="values">A <see cref="T:System.Collections.Generic.IDictionary`2"/> that contains the objects to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/>
            or
            <paramref name="values"/></exception>
            <exception cref="T:System.ArgumentException">The dictionary is read-only.</exception>
        </member>
        <member name="M:SharpNL.InternalExtensions.AreEqual``1(``0,``0[])">
            <summary>
            Verifies that the all the specified objects are equal.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="input">The input.</param>
            <param name="others">The others.</param>
            <returns><c>true</c> if the all the specified objects are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.InternalExtensions.AreEqual``1(``0[],``0[][])">
            <summary>
            Verifies that the all the specified objects are equal.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="input">The input.</param>
            <param name="others">The others.</param>
            <returns><c>true</c> if the all the specified objects are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.InternalExtensions.Fill``1(``0[],``0)">
            <summary>
            Fills the specified input with the given value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The array.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpNL.InternalExtensions.GetKey``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            Gets the element key by the first element that are equals to the specified <paramref name="value"/>,
            of a <c>default(K)</c> value if no element is found.
            </summary>
            <typeparam name="K">The type of the key of the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="V">The type of the values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="value">The value.</param>
            <returns><c>default(k)</c> if no element is found; otherwise the first element key found in the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:SharpNL.InternalExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Reads the contents of the stream into a byte array, and then closes the stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>A byte array containing the contents of the stream.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.NotSupportedException">The stream was not readable.</exception>
        </member>
        <member name="M:SharpNL.InternalExtensions.ToArray``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Copies a specific number of elements in the current stack into a new array.
            </summary>
            <typeparam name="T">Specifies the type of elements in the stack.</typeparam>
            <param name="stack">The stack.</param>
            <param name="count">The number of elements to be copied into a new array.</param>
            <returns>A new array containing copies of the elements of the stack.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">count</exception>
        </member>
        <member name="M:SharpNL.InternalExtensions.ToTokenArray(System.Collections.Generic.IReadOnlyList{SharpNL.Tokenize.IToken})">
            <summary>
            Gets a array of tokens from the token collection.
            </summary>
            <param name="tokens">The tokens.</param>
            <returns>The token array.</returns>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdChunkSampleStream">
            <summary>
            Represents a <see cref="T:SharpNL.Chunker.ChunkSample"/> sample stream for floresta Sita(c)tica Arvores Deitadas corpus.
            </summary>
        </member>
        <member name="F:SharpNL.Formats.Ad.AdChunkSampleStream.adSentenceStream">
            <summary>
            The Ad sentence stream.
            </summary>
        </member>
        <member name="F:SharpNL.Formats.Ad.AdChunkSampleStream.monitor">
            <summary>
            The evaluation monitor.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SharpNL.Formats.Ad.AdChunkSampleStream"/> class from being created.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdChunkSampleStream"/> class.
            </summary>
            <param name="lineStream">The line stream.</param>
            <param name="safeParse">if set to <c>true</c> the invalid AD sentences will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lineStream"/>
            </exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.#ctor(SharpNL.Monitor,SharpNL.Utility.IObjectStream{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdChunkSampleStream"/> class.
            </summary>
            <param name="monitor">The execution monitor.</param>
            <param name="lineStream">The line stream.</param>
            <param name="safeParse">if set to <c>true</c> the invalid AD sentences will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="monitor"/>
            or
            <paramref name="lineStream"/>
            </exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdChunkSampleStream"/> from a <paramref name="inputStream"/> object.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="encoding">The text encoding used to read the stream.</param>
            <param name="safeParse">if set to <c>true</c> the invalid data in the file will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputStream"/>
            or
            <paramref name="encoding"/>
            </exception>
            <exception cref="T:System.ArgumentException">The <paramref name="inputStream"/> does not support reading.</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.#ctor(SharpNL.Monitor,System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdChunkSampleStream"/> from a <paramref name="inputStream"/> object.
            </summary>
            <param name="monitor">The execution monitor.</param>
            <param name="inputStream">The input stream.</param>
            <param name="encoding">The text encoding used to read the stream.</param>
            <param name="safeParse">if set to <c>true</c> the invalid data in the file will be skipped.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputStream"/>
            or
            <paramref name="encoding"/>
            </exception>
            <exception cref="T:System.ArgumentException">The <paramref name="inputStream"/> does not support reading.</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.GetChunkTag(SharpNL.Formats.Ad.AdLeaf)">
            <summary>
            Gets the chunk tag.
            </summary>
            <param name="leaf">The leaf.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.GetChunkTag(SharpNL.Formats.Ad.AdNode,System.String,System.Int32)">
            <summary>
            Gets the chunk tag.
            </summary>
            <param name="node">The node.</param>
            <param name="parent">The parent.</param>
            <param name="index">The index.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.GetPhraseTagFromPosTag(System.String)">
            <summary>
            Gets the phrase tag from position tag.
            </summary>
            <param name="functionalTag">The functional tag.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.ProcessRoot(SharpNL.Formats.Ad.AdNode,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Processes the root node.
            </summary>
            <param name="root">The root node.</param>
            <param name="sentence">The sentence.</param>
            <param name="tags">The tags.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.IsIntermediate(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Determines whether the specified tags is intermediate.
            </summary>
            <param name="tags">The tags.</param>
            <param name="target">The target.</param>
            <param name="phraseTag">The phrase tag.</param>
            <returns><c>true</c> if the specified tags is intermediate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdChunkSampleStream.ProcessLeaf(SharpNL.Formats.Ad.AdLeaf,System.Boolean,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Processes the Ad leaf.
            </summary>
            <param name="leaf">The leaf.</param>
            <param name="isIntermediate">if set to <c>true</c> leaf is intermediate.</param>
            <param name="phraseTag">The phrase tag.</param>
            <param name="sentence">The sentence.</param>
            <param name="tags">The tags.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdChunkSampleStream.End">
            <summary>
            Gets or sets the end position. The default value is -1;
            </summary>
            <value>The end position.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdChunkSampleStream.Index">
            <summary>
            Gets the current index.
            </summary>
            <value>The current index.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdChunkSampleStream.IncludePunctuations">
            <summary>
            Gets a value indicating whether punctuations should be included. The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if punctuations should be included; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdChunkSampleStream.Start">
            <summary>
            Gets or sets the start position. The default value is -1;
            </summary>
            <value>The start position.</value>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdLeaf">
            <summary>
            Represents the AD leaf.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdTreeElement">
            <summary>
            Represents a abstract tree element for floresta Sita(c)tica Arvores Deitadas corpus.
            </summary>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdTreeElement.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf.
            </summary>
            <value><c>true</c> if this instance is leaf; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdTreeElement.Level">
            <summary>
            Gets or sets the element level.
            </summary>
            <value>The element level.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdTreeElement.MorphologicalTag">
            <summary>
            Gets or sets the morphological tag.
            </summary>
            <value>The morphological tag.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdTreeElement.SyntacticTag">
            <summary>
            Gets or sets the syntactic tag.
            </summary>
            <value>The syntactic tag.</value>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdLeaf.ToString">
            <summary>
            Returns a string that represents the current leaf.
            </summary>
            <returns>
            A string that represents the current leaf.
            </returns>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdLeaf.FunctionalTag">
            <summary>
            Gets or sets the functional tag.
            </summary>
            <value>The functional tag.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdLeaf.IsLeaf">
            <summary>
            Gets a value indicating whether this element is a leaf.
            </summary>
            <value><c>true</c> if this element is a leaf; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdLeaf.Lemma">
            <summary>
            Gets or sets the lemma.
            </summary>
            <value>The lemma.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdLeaf.Lexeme">
            <summary>
            Gets or sets the lexeme.
            </summary>
            <value>The lexeme.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdLeaf.SecondaryTag">
            <summary>
            Gets or sets the secondary tag.
            </summary>
            <value>The secondary tag.</value>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdNode">
            <summary>
            Represents a Ad node.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdNode"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNode.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdNode.AddElement(SharpNL.Formats.Ad.AdTreeElement)">
            <summary>
            Adds an element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdNode.Elements">
            <summary>
            Gets the elements.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdSentence">
            <summary>
            Represents a AD sentence.
            </summary>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdSentence.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdSentence.Root">
            <summary>
            Gets the root.
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:SharpNL.Formats.Ad.AdSentence.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdSentenceParser">
            <summary>
            Parses a sample of AD corpus. A sentence in AD corpus is represented by a 
            Tree. In this class we declare some types to represent that tree. Today we get only
            the first alternative (A1).
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceParser.TryParse(SharpNL.Formats.Ad.AdSentence@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,SharpNL.Monitor)">
            <summary>
            Parses the specified sentence string.
            Converts the string representation of a sentence in a specified attributes and culture-specific
            format to its <see cref="T:SharpNL.Formats.Ad.AdSentence"/> equivalent. A return value indicates whether the
            conversion succeeded or failed.
            </summary>
            <param name="sentence">The sentence.</param>
            <param name="sentenceString">The sentence string.</param>
            <param name="para">The para.</param>
            <param name="isTitle">if set to <c>true</c> [is title].</param>
            <param name="isBox">if set to <c>true</c> [is box].</param>
            <param name="safeParse">if set to <c>true</c> the invalid sentences will be ignored.</param>
            <param name="monitor">The evaluation monitor. This value can be a <c>null</c> value.</param>
            <returns><c>true</c> if the <paramref name="sentenceString"/> parameter was converted successfully, <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.InvalidDataException">
            Something went wrong.
            </exception>
            <exception cref="T:System.InvalidOperationException">Should not happen!</exception>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceParser.TryParseElement(SharpNL.Formats.Ad.AdTreeElement@,System.String,System.Boolean,SharpNL.Monitor)">
            <summary>
            Converts the specified string representation of a tree element to its <see cref="T:SharpNL.Formats.Ad.AdTreeElement"/> 
            equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="element">
            When this method returns, contains the <see cref="T:SharpNL.Formats.Ad.AdTreeElement"/> value equivalent to the element 
            contained in <paramref name="line"/>, if the conversion succeeded, or <c>null</c> if the conversion 
            failed. The conversion fails if the <paramref name="line"/> parameter is null, is an empty string (""),
            or does not contain a valid string representation of a AdElement. This parameter is passed 
            uninitialized.
            </param>
            <param name="line">The string representation of the element.</param>
            <param name="safeParse">if set to <c>true</c> the invalid sentences will be ignored.</param>
            <param name="monitor">The evaluation monitor.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SharpNL.Formats.Ad.AdSentenceSampleStream">
            <summary>
            Represents a <see cref="T:SharpNL.SentenceDetector.SentenceSample"/> sample stream for floresta Sita(c)tica Arvores Deitadas corpus.
            </summary>
        </member>
        <member name="F:SharpNL.Formats.Ad.AdSentenceSampleStream.eosCharacters">
            <summary>
            The EOS characters.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceSampleStream.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Formats.Ad.AdSentenceSampleStream"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceSampleStream.#ctor(System.IO.FileInfo,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdSentenceSampleStream"/> stream from a line stream.
            </summary>
            <param name="adFile">The floresta Sita(c)tica Arvores Deitadas corpus <see cref="T:System.IO.FileInfo"/> object.</param>
            <param name="includeTitles">if set to <c>true</c> it will output the sentences marked as news headlines.</param>
            <param name="safeParse">if set to <c>true</c> it will ignore the invalid Ad elements.</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdSentenceSampleStream"/> stream from a line stream.
            </summary>
            <param name="lineStream">The line stream.</param>
            <param name="includeTitles">if set to <c>true</c> it will output the sentences marked as news headlines.</param>
            <param name="safeParse">if set to <c>true</c> it will ignore the invalid Ad elements.</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},System.Boolean,System.Boolean,SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Ad.AdSentenceSampleStream"/> stream from a line stream.
            </summary>
            <param name="lineStream">The line stream.</param>
            <param name="includeTitles">if set to <c>true</c> it will output the sentences marked as news headlines.</param>
            <param name="safeParse">if set to <c>true</c> it will ignore the invalid Ad elements.</param>
            <param name="monitor">The evaluation monitor.</param>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceSampleStream.Read">
            <summary>
            Returns the next <see cref="T:SentenceSample"/>. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Ad.AdSentenceStream.Read">
            <summary>
            Returns the valid <see cref="T:SharpNL.Formats.Ad.AdSentence"/> object. 
            </summary>
            <returns>
            Calling this method repeatedly until it returns, <c>null</c> will return each object from the underlying source exactly once.
            </returns>
        </member>
        <member name="T:SharpNL.Formats.BioNLP2004NameSampleStream">
            <summary>
            Parser for the training files of the BioNLP/NLPBA 2004 shared task.
            </summary>
            <remarks>
            <para>
            The data contains five named entity types: DNA, RNA, protein, cell_type and cell_line.
            </para>
            
            Data can be found on this web site:<br />
            <see href="http://www-tsujii.is.s.u-tokyo.ac.jp/GENIA/ERtask/report.html" /> 
            </remarks>
        </member>
        <member name="M:SharpNL.Formats.BioNLP2004NameSampleStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.BioNLP2004NameSampleStream"/> class.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="types">The types.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.ArgumentException">The input stream was not readable.</exception>
        </member>
        <member name="M:SharpNL.Formats.BioNLP2004NameSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.BioNLP2004NameSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.BioNLP2004NameSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Brat.AnnotationConfiguration">
            <summary>
            Represents a Brat annotation configuration.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Brat.AnnotationConfiguration.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Brat.AnnotationConfiguration"/> class.
            </summary>
            <param name="mapping">The configuration mapping.</param>
        </member>
        <member name="M:SharpNL.Formats.Brat.AnnotationConfiguration.Parse(System.IO.Stream)">
            <summary>
            Parses the specified input stream into a <seealso cref="T:SharpNL.Formats.Brat.AnnotationConfiguration"/> object.
            </summary>
            <param name="inputStream">The input stream.</param>
            <returns>The parsed AnnotationConfiguration.</returns>
        </member>
        <member name="P:SharpNL.Formats.Brat.AnnotationConfiguration.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:SharpNL.Formats.Brat.BratAnnotationStream">
            <summary>
            Represents a Brat annotation stream.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratAnnotationStream.#ctor(SharpNL.Formats.Brat.AnnotationConfiguration,System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Brat.BratAnnotationStream"/> class.
            </summary>
            <param name="config">The annotation configuration.</param>
            <param name="id">The stream identifier.</param>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratAnnotationStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratAnnotationStream.Read">
            <summary>
            Returns the next annotation. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next annotation or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratAnnotationStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.Brat.BratDocument">
            <summary>
            Represents a brat rapid annotation tool document.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratDocument.#ctor(SharpNL.Formats.Brat.AnnotationConfiguration,System.String,System.String,System.Collections.Generic.IEnumerable{SharpNL.Formats.Brat.BratAnnotation})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Brat.BratDocument"/> class.
            </summary>
            <param name="config">The annotation configuration.</param>
            <param name="id">The document identifier.</param>
            <param name="text">The document text.</param>
            <param name="annotations">The annotations.</param>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratDocument.GetAnnotation(System.String)">
            <summary>
            Gets the annotation with the specified id.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The <see cref="T:SharpNL.Formats.Brat.BratAnnotation"/> object or null if the key does no exist in this document.</returns>
        </member>
        <member name="M:SharpNL.Formats.Brat.BratDocument.Parse(SharpNL.Formats.Brat.AnnotationConfiguration,System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Parses the specified brat document using two streams for the document and annotations.
            </summary>
            <param name="config">The configuration.</param>
            <param name="id">The identifier.</param>
            <param name="documentStream">The document stream.</param>
            <param name="annotationStream">The annotation stream.</param>
            <returns>The parsed <see cref="T:SharpNL.Formats.Brat.BratDocument"/> object.</returns>
        </member>
        <member name="P:SharpNL.Formats.Brat.BratDocument.Annotations">
            <summary>
            Gets the annotations.
            </summary>
            <value>The annotations.</value>
        </member>
        <member name="P:SharpNL.Formats.Brat.BratDocument.Config">
            <summary>
            Gets the annotation configuration.
            </summary>
            <value>The annotation configuration.</value>
        </member>
        <member name="P:SharpNL.Formats.Brat.BratDocument.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:SharpNL.Formats.Brat.BratDocument.Text">
            <summary>
            Gets the document text.
            </summary>
            <value>The document text.</value>
        </member>
        <member name="T:SharpNL.Formats.Brat.RelationAnnotation">
            <summary>
            Represents a Brat relation annotation.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Brat.RelationAnnotation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Brat.RelationAnnotation"/> class.
            </summary>
            <param name="id">The relation identifier.</param>
            <param name="type">The relation type.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
        </member>
        <member name="M:SharpNL.Formats.Brat.RelationAnnotation.ToString">
            <summary>
            Returns a string that represents the current annotation.
            </summary>
            <returns>
            A string that represents the current annotation.
            </returns>
        </member>
        <member name="P:SharpNL.Formats.Brat.RelationAnnotation.Arg1">
            <summary>
            Gets the arg1.
            </summary>
            <value>The arg1.</value>
        </member>
        <member name="P:SharpNL.Formats.Brat.RelationAnnotation.Arg2">
            <summary>
            Gets the arg2.
            </summary>
            <value>The arg2.</value>
        </member>
        <member name="T:SharpNL.Formats.Brat.SpanAnnotation">
            <summary>
            Represents a Brat span annotation.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Brat.SpanAnnotation.ToString">
            <summary>
            Returns a string that represents the current annotation.
            </summary>
            <returns>
            A string that represents the current annotation.
            </returns>
        </member>
        <member name="P:SharpNL.Formats.Brat.SpanAnnotation.Span">
            <summary>
            Gets the span.
            </summary>
            <value>The span.</value>
        </member>
        <member name="P:SharpNL.Formats.Brat.SpanAnnotation.CoveredText">
            <summary>
            Gets the covered text.
            </summary>
            <value>The covered text.</value>
        </member>
        <member name="T:SharpNL.Formats.CoNLL">
            <summary>
            Base class for CoNLL operations.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.CoNLL.Extract(System.Int32,System.Int32,System.String)">
            <summary>
            Extracts a entity based on <paramref name="beginTag"/> tag.
            </summary>
            <param name="begin">The begin.</param>
            <param name="end">The end.</param>
            <param name="beginTag">The begin tag.</param>
            <returns>The entity <see cref="T:SharpNL.Utility.Span"/> object.</returns>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unknown type:  + type</exception>
        </member>
        <member name="T:SharpNL.Formats.CoNLL.Language">
            <summary>
            Enumerates the supported languages for CoNLL
            </summary>
        </member>
        <member name="F:SharpNL.Formats.CoNLL.Language.De">
            <summary>
            The German language
            </summary>
        </member>
        <member name="F:SharpNL.Formats.CoNLL.Language.En">
            <summary>
            The English language
            </summary>
        </member>
        <member name="F:SharpNL.Formats.CoNLL.Language.Es">
            <summary>
            The Spanish language
            </summary>
        </member>
        <member name="F:SharpNL.Formats.CoNLL.Language.Nl">
            <summary>
            The Dutch language.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.CoNLL.Types">
            <summary>
            Enumerate the entities in the files.
            </summary>
        </member>
        <member name="F:SharpNL.Formats.CoNLL.Types.PersonEntities">
            <summary>
            The person entities
            </summary>
        </member>
        <member name="F:SharpNL.Formats.CoNLL.Types.OrganizationEntities">
            <summary>
            The organization entities
            </summary>
        </member>
        <member name="F:SharpNL.Formats.CoNLL.Types.LocationEntities">
            <summary>
            The location entities
            </summary>
        </member>
        <member name="F:SharpNL.Formats.CoNLL.Types.MiscEntities">
            <summary>
            The misc entities
            </summary>
        </member>
        <member name="T:SharpNL.Formats.CoNLL02NameSampleStream">
            <summary>
            Parser for the dutch and spanish ner training files of the CONLL 2002 shared task.
            <para>
            The dutch data has a -DOCSTART- tag to mark article boundaries,
            adaptive data in the feature generators will be cleared before every article.<br />
            The spanish data does not contain article boundaries,
            adaptive data will be cleared for every sentence.
            </para>
            <para>The data contains four named entity types: Person, Organization, Location and Misc.</para>
            </summary>
            <remarks>
            Data can be found on this web site: <see href="http://www.cnts.ua.ac.be/conll2002/ner/" />
            </remarks>
        </member>
        <member name="M:SharpNL.Formats.CoNLL02NameSampleStream.#ctor(SharpNL.Formats.CoNLL.Language,SharpNL.Utility.IObjectStream{System.String},SharpNL.Formats.CoNLL.Types)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLL02NameSampleStream"/> class.
            </summary>
            <param name="language">The supported conll language.</param>
            <param name="lineStream">The line stream.</param>
            <param name="types">The conll types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="language"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="lineStream"/></exception>
            <exception cref="T:System.ArgumentException">The specified language is not supported.</exception>
        </member>
        <member name="M:SharpNL.Formats.CoNLL02NameSampleStream.#ctor(SharpNL.Formats.CoNLL.Language,SharpNL.Utility.IObjectStream{System.String},SharpNL.Formats.CoNLL.Types,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLL02NameSampleStream"/> class.
            </summary>
            <param name="language">The supported conll language.</param>
            <param name="lineStream">The line stream.</param>
            <param name="types">The conll types.</param>
            <param name="ownsStream"><c>true</c> to indicate that the stream will be disposed when this stream is disposed; <c>false</c> to indicate that the stream will not be disposed when this stream is disposed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="language"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="lineStream"/></exception>
            <exception cref="T:System.ArgumentException">The specified language is not supported.</exception>
        </member>
        <member name="M:SharpNL.Formats.CoNLL02NameSampleStream.#ctor(SharpNL.Formats.CoNLL.Language,System.IO.Stream,SharpNL.Formats.CoNLL.Types)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLL02NameSampleStream"/> class.
            </summary>
            <param name="language">The supported conll language.</param>
            <param name="inputStream">The input stream.</param>
            <param name="types">The conll types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="language"/>
            or
            <paramref name="types"/>
            </exception>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
        </member>
        <member name="M:SharpNL.Formats.CoNLL02NameSampleStream.#ctor(SharpNL.Formats.CoNLL.Language,SharpNL.Utility.IInputStreamFactory,SharpNL.Formats.CoNLL.Types)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLL02NameSampleStream"/> class.
            </summary>
            <param name="language">The supported conll language.</param>
            <param name="streamFactory">The stream factory.</param>
            <param name="types">The conll types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">language</exception>
            <exception cref="T:System.ArgumentNullException">streamFactory</exception>
        </member>
        <member name="M:SharpNL.Formats.CoNLL02NameSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.CoNLL02NameSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.CoNLL02NameSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.CoNLL03NameSampleStream">
            <summary>
            An import stream which can parse the CoNLL03 data.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.CoNLL03NameSampleStream.#ctor(SharpNL.Formats.CoNLL.Language,SharpNL.Utility.IObjectStream{System.String},SharpNL.Formats.CoNLL.Types)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLL03NameSampleStream"/> class.
            </summary>
            <param name="language">The language of the data. The valid languages are: En, De</param>
            <param name="lineStream">The line stream.</param>
            <param name="types">The types to be readed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">language</exception>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
            <exception cref="T:System.ArgumentException">The specified language is not supported.</exception>
        </member>
        <member name="M:SharpNL.Formats.CoNLL03NameSampleStream.#ctor(SharpNL.Formats.CoNLL.Language,System.IO.Stream,SharpNL.Formats.CoNLL.Types)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLL03NameSampleStream"/> class.
            </summary>
            <param name="language">The language of the data. The valid languages are: En, De</param>
            <param name="inputStream">The input stream.</param>
            <param name="types">The types to be readed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">language</exception>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
            <exception cref="T:System.ArgumentException">The stream is not readable.</exception>
            <exception cref="T:System.ArgumentException">The specified language is not supported.</exception>
        </member>
        <member name="M:SharpNL.Formats.CoNLL03NameSampleStream.#ctor(SharpNL.Formats.CoNLL.Language,SharpNL.Utility.IInputStreamFactory,SharpNL.Formats.CoNLL.Types)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLL03NameSampleStream"/> class.
            </summary>
            <param name="language">The language of the data. The valid languages are: En, De</param>
            <param name="streamFactory">The stream factory.</param>
            <param name="types">The types to be readed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">language</exception>
            <exception cref="T:System.ArgumentNullException">lineStream</exception>
            <exception cref="T:System.ArgumentException">The specified language is not supported.</exception>
        </member>
        <member name="M:SharpNL.Formats.CoNLL03NameSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.CoNLL03NameSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.CoNLL03NameSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Formats.CoNLLXPOSSampleStream">
            <summary>
            Parses the data from the CONLL 06 shared task into POS Samples.
            </summary>
            <remarks>
            More information about the data format can be found here:<br />
            <see href="http://www.cnts.ua.ac.be/conll2006/" />
            </remarks>
        </member>
        <member name="M:SharpNL.Formats.CoNLLXPOSSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLLXPOSSampleStream"/> class.
            </summary>
            <param name="samples">The sample stream.</param>
        </member>
        <member name="M:SharpNL.Formats.CoNLLXPOSSampleStream.#ctor(SharpNL.Utility.IInputStreamFactory,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.CoNLLXPOSSampleStream"/> class.
            </summary>
            <param name="streamFactory">The stream factory.</param>
            <param name="encoding">The text encoding.</param>
        </member>
        <member name="M:SharpNL.Formats.CoNLLXPOSSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Formats.Convert.AbstractToSentenceSampleStream`1">
            <summary>
            Represents a abstract sentence sample stream converter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpNL.Formats.Convert.AbstractToSentenceSampleStream`1.#ctor(SharpNL.Tokenize.IDetokenizer,SharpNL.Utility.IObjectStream{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.Convert.AbstractToSentenceSampleStream`1"/> class.
            </summary>
            <param name="detokenizer">The detokenizer.</param>
            <param name="samples">The samples.</param>
            <param name="chunkSize">Size of the chunk.</param>
            <exception cref="T:System.ArgumentNullException">detokenizer</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">chunkSize;@chunkSize must be zero or larger</exception>
        </member>
        <member name="M:SharpNL.Formats.Convert.AbstractToSentenceSampleStream`1.ToSentence(`0)">
            <summary>
            Converts to the sentence.
            </summary>
            <param name="sample">The sample.</param>
            <returns>The converted sentence.</returns>
        </member>
        <member name="M:SharpNL.Formats.Convert.AbstractToSentenceSampleStream`1.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.SentenceDetector.SentenceSample"/>. 
            Calling this method repeatedly until it returns, <c>null</c> will return each <see cref="T:SharpNL.SentenceDetector.SentenceSample"/>
            from the underlying source exactly once.
            </summary>
            <returns>The next <see cref="T:SharpNL.SentenceDetector.SentenceSample"/> or <c>null</c> to signal that the stream is exhausted.</returns>
        </member>
        <member name="M:SharpNL.Formats.Convert.FileToByteArraySampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Convert.FileToStringSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Convert.NameToTokenSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Convert.ParseToPOSSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.Convert.POSToTokenSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Formats.DirectorySampleStream">
            <summary>
            The directory sample stream scans a directory (recursively) for plain text
            files and outputs each file as a <see cref="T:System.IO.FileInfo"/> object.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.DirectorySampleStream.#ctor(System.IO.DirectoryInfo[],System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.DirectorySampleStream"/> with the given directories.
            </summary>
            <param name="directories">The directories.</param>
            <param name="searchPattern">The search string, such as "*.txt".</param>
            <param name="recursive">if set to <c>true</c> searches the directories recursively.</param>
        </member>
        <member name="M:SharpNL.Formats.DirectorySampleStream.#ctor(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.DirectorySampleStream"/> with a given directory
            </summary>
            <param name="directory">The directory.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="recursive">if set to <c>true</c> searches the directory recursively.</param>
        </member>
        <member name="M:SharpNL.Formats.DirectorySampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.DirectorySampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.Muc.DocumentSplitterStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Formats.Muc.SgmlParser">
            <summary>
            SAX style SGML parser.
            </summary>
            <remarks>
            The implementation is very limited, but good enough to
            parse the MUC corpora. Its must very likely be extended/improved/fixed to parse
            a different SGML corpora.
            </remarks>
        </member>
        <member name="M:SharpNL.Formats.Muc.MucNameSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Formats.OntoNotes.DocumentToLineStream">
            <summary>
            Reads a plain text file and return each line as a <see cref="T:System.String"/> object.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.SegmentedObjectStream`2">
            <summary>
            Represents a abstract segmented object stream that creates sub segments/samples of a single sample. 
            </summary>
            <typeparam name="S">The sample type.</typeparam>
            <typeparam name="T">The segment type.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.SegmentedObjectStream`2.#ctor(SharpNL.Utility.IObjectStream{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.SegmentedObjectStream`2"/> class.
            </summary>
            <param name="samples">The samples to be segmented.</param>
        </member>
        <member name="M:SharpNL.Utility.SegmentedObjectStream`2.Read(`0)">
            <summary>
            Reads the segments of the specified sample.
            </summary>
            <param name="sample">The sample.</param>
            <returns>The segments of the <paramref name="sample"/> object.</returns>
        </member>
        <member name="M:SharpNL.Utility.SegmentedObjectStream`2.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.OntoNotes.DocumentToLineStream.#ctor(SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.SegmentedObjectStream`2"/> class.
            </summary>
            <param name="samples">The samples to be segmented.</param>
        </member>
        <member name="M:SharpNL.Formats.OntoNotes.DocumentToLineStream.Read(System.String)">
            <summary>
            Reads the segments of the specified sample.
            </summary>
            <param name="sample">The sample.</param>
            <returns>The segments of the <paramref name="sample"/> object.</returns>
        </member>
        <member name="T:SharpNL.Formats.OntoNotes.OntoNotesNameSampleStream">
            <summary>
            Name Sample Stream parser for the OntoNotes 4.0 corpus.
            </summary>
        </member>
        <member name="M:SharpNL.Formats.OntoNotes.OntoNotesNameSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Formats.OntoNotes.OntoNotesNameSampleStream"/> with the given samples.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:SharpNL.Formats.OntoNotes.OntoNotesNameSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Formats.OntoNotes.OntoNotesParseSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Monitor">
            <summary>
            Represents a SharpNL task that can be monitored or canceled. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Monitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Monitor"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Monitor.Cancel">
            <summary>
            Communicates a request for cancellation.
            </summary>
        </member>
        <member name="M:SharpNL.Monitor.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Monitor.Execute(System.Action{System.Threading.CancellationToken})">
            <summary>
            Executes the specified task action.
            </summary>
            <param name="taskAction">The task action.</param>
        </member>
        <member name="M:SharpNL.Monitor.OnError(System.String)">
            <summary>
            Processes the error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:SharpNL.Monitor.OnException(System.Exception)">
            <summary>
            Process the exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:SharpNL.Monitor.OnMessage(System.String)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SharpNL.Monitor.OnWarning(System.String)">
            <summary>
            Processes the warning message.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:SharpNL.Monitor.Reset">
            <summary>
            Resets this counters in this instance.
            </summary>
        </member>
        <member name="M:SharpNL.Monitor.Wait">
            <summary>
            Waits for the <see cref="T:SharpNL.Monitor"/> to complete execution.
            </summary>
        </member>
        <member name="E:SharpNL.Monitor.Complete">
            <summary>
            Occurs when the task completes.
            </summary>
        </member>
        <member name="E:SharpNL.Monitor.Error">
            <summary>
            Occurs when the object that is running the task sends an error message.
            </summary>
        </member>
        <member name="E:SharpNL.Monitor.Message">
            <summary>
            Occurs when the object that is running the task sends an informational message.
            </summary>
        </member>
        <member name="E:SharpNL.Monitor.Warning">
            <summary>
            Occurs when the object that is running the task sends a warning message.
            </summary>
        </member>
        <member name="E:SharpNL.Monitor.Exception">
            <summary>
            Occurs when an exception is throw during the task execution.
            </summary>
        </member>
        <member name="P:SharpNL.Monitor.IsCanceled">
            <summary>
            Gets whether this <see cref="T:SharpNL.Monitor"/> instance has completed execution due to being canceled.
            </summary>
            <value><c>true</c> if the task has completed due to being canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Monitor.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Monitor.TotalErrors">
            <summary>
            Gets the number of error messages in the current execution.
            </summary>
            <value>The number of error messages in the current execution.</value>
        </member>
        <member name="P:SharpNL.Monitor.TotalMessages">
            <summary>
            Gets the number of messages in the current execution.
            </summary>
            <value>The number of messages in the current execution.</value>
        </member>
        <member name="P:SharpNL.Monitor.TotalWarnings">
            <summary>
            Gets the number of warnings in the current execution.
            </summary>
            <value>The number of warnings in the current execution.</value>
        </member>
        <member name="P:SharpNL.Monitor.TotalExceptions">
            <summary>
            Gets the number of exceptions in the current execution.
            </summary>
            <value>The number of exceptions in the current execution.</value>
        </member>
        <member name="P:SharpNL.Monitor.Token">
            <summary>
            Gets the cancellation token.
            </summary>
            <value>The cancellation token.</value>
        </member>
        <member name="T:SharpNL.MonitorExceptionEventArgs">
            <summary>
            Provides data for exception events in a <see cref="T:SharpNL.Monitor"/>.
            </summary>
        </member>
        <member name="P:SharpNL.MonitorExceptionEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:SharpNL.MonitorMessageEventArgs">
            <summary>
            Provides data for <see cref="T:SharpNL.Monitor"/> message events.
            </summary>
        </member>
        <member name="P:SharpNL.MonitorMessageEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:SharpNL.Parser.IHeadRules">
            <summary>
            Interface for encoding the head rules associated with parsing.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.IHeadRules.GetHead(SharpNL.Parser.Parse[],System.String)">
            <summary>
            Returns the head constituent for the specified constituents of the specified type.
            </summary>
            <param name="constituents">The constituents which make up a constituent of the specified type.</param>
            <param name="type">The type of a constituent which is made up of the specified constituents.</param>
            <returns>The constituent which is the head.</returns>
        </member>
        <member name="P:SharpNL.Parser.IHeadRules.PunctuationTags">
            <summary>
            Gets a list with the punctuation tags. Attachment decisions for these tags will not be modeled.
            </summary>
            <value>The list of punctuation tags.</value>
        </member>
        <member name="T:SharpNL.SentenceDetector.SentenceDetectorAnalyzer">
            <summary>
            Represents a sentence analyzer which allows the easy abstraction of the 
            sentence detection. This class is thread-safe.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorAnalyzer.#ctor(SharpNL.SentenceDetector.ISentenceDetector)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.SentenceDetectorAnalyzer"/> using the default weight value.
            </summary>
            <param name="sentenceDetector">The sentence detector used to analyze the sentences.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentenceDetector"/>
            </exception>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorAnalyzer.#ctor(SharpNL.SentenceDetector.ISentenceDetector,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Analyzer.AbstractAnalyzer"/> with the specified weight.
            </summary>
            <param name="sentenceDetector">The sentence detector.</param>
            <param name="weight">The analyzer weight.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentenceDetector"/>
            </exception>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorAnalyzer.Evaluate(SharpNL.ITextFactory,SharpNL.IDocument)">
            <summary>
            Evaluates the specified document.
            </summary>
            <param name="factory">The factory used in this analysis.</param>
            <param name="document">The document to be analyzed.</param>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceDetectorAnalyzer.SentenceDetector">
            <summary>
            Gets the sentence detector.
            </summary>
            <value>The sentence detector.</value>
        </member>
        <member name="T:SharpNL.NameFind.RegexNameFinder">
            <summary>
            Name finder based on a series of regular expressions.
            </summary>
        </member>
        <member name="T:SharpNL.NameFind.ITokenNameFinder">
            <summary>
            The interface for name finders which provide name tags for a sequence of tokens.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.ITokenNameFinder.Find(System.String[])">
            <summary>
            Generates name tags for the given sequence, typically a sentence, returning token spans for any identified names.
            </summary>
            <param name="tokens">An array of the tokens or words of the sequence, typically a sentence.</param>
            <returns>An array of spans for each of the names identified.</returns>
        </member>
        <member name="M:SharpNL.NameFind.ITokenNameFinder.ClearAdaptiveData">
            <summary>
            Forgets all adaptive data which was collected during previous calls to one of the find methods.
            </summary>
            <remarks>This method is typical called at the end of a document.</remarks>
        </member>
        <member name="M:SharpNL.NameFind.RegexNameFinder.#ctor(System.Collections.Generic.Dictionary{System.String,System.Text.RegularExpressions.Regex[]})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.RegexNameFinder"/> with the given regex mapping dictionary.
            </summary>
            <param name="mapping">The regex mapping dictionary.</param>
            <exception cref="T:System.ArgumentNullException">mapping</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The regex mapping is empty.</exception>
        </member>
        <member name="M:SharpNL.NameFind.RegexNameFinder.#ctor(System.Text.RegularExpressions.Regex[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.RegexNameFinder"/> with the given expressions and annotation type.
            </summary>
            <param name="regexList">The regex list.</param>
            <param name="type">The annotation type.</param>
            <exception cref="T:System.ArgumentNullException">regexList</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The regex list is empty.</exception>
        </member>
        <member name="M:SharpNL.NameFind.RegexNameFinder.Find(System.String[])">
            <summary>
            Generates name tags for the given sequence, typically a sentence, returning token spans for any identified names.
            </summary>
            <param name="tokens">An array of the tokens or words of the sequence, typically a sentence.</param>
            <returns>An array of spans for each of the names identified.</returns>
        </member>
        <member name="M:SharpNL.NameFind.RegexNameFinder.Find(System.String)">
            <summary>
            Generates name tags for the given sequence, returning token spans for any identified names.
            </summary>
            <param name="text">The text to be analyzed, typically a sentence.</param>
            <returns>An array of spans for each of the names identified.</returns>
        </member>
        <member name="M:SharpNL.NameFind.RegexNameFinder.ClearAdaptiveData">
            <summary>
            Forgets all adaptive data which was collected during previous calls to one of the find methods.
            </summary>
            <remarks>This method is typical called at the end of a document.</remarks>
        </member>
        <member name="T:SharpNL.NameFind.TokenNameFinderCrossValidator">
            <summary>
            Represents a cross validator for <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> models.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderCrossValidator.#ctor(System.String,System.String,SharpNL.Utility.TrainingParameters,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.NameFind.NameSample}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderCrossValidator"/> class.
            </summary>
            <param name="languageCode">The language of the training data.</param>
            <param name="type"><c>null</c> or an override type for all types in the training data.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <param name="listeners">The listeners.</param>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderCrossValidator.#ctor(System.String,System.String,SharpNL.Utility.TrainingParameters,SharpNL.NameFind.TokenNameFinderFactory,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.NameFind.NameSample}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderCrossValidator"/> class.
            </summary>
            <param name="languageCode">The language of the training data.</param>
            <param name="type"><c>null</c> or an override type for all types in the training data.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <param name="factory">The name finder factory.</param>
            <param name="listeners">The listeners.</param>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderCrossValidator.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderCrossValidator.Evaluate(SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},System.Int32)">
            <summary>
            Evaluates the samples with a given number of partitions.
            </summary>
            <param name="samples">The samples to train and test.</param>
            <param name="partitions">The number of folds.</param>
        </member>
        <member name="P:SharpNL.NameFind.TokenNameFinderCrossValidator.FMeasure">
            <summary>
            Gets the f-measure.
            </summary>
            <value>The f-measure.</value>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderCrossValidator.NameToDocumentSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.NGram.NGramGenerator">
            <summary>
            Generates an nGram, with optional separator, and returns the grams as a list of strings.
            </summary>
        </member>
        <member name="M:SharpNL.NGram.NGramGenerator.Generate(System.Collections.Generic.List{System.String},System.Int32,System.String)">
            <summary>
            Creates an ngram separated by the separator param value i.e. a,b,c,d with n = 3 and separator = "-"
            would return a-b-c,b-c-d.
            </summary>
            <param name="input">The input tokens the output ngrams will be derived from.</param>
            <param name="count">The number of tokens as the sliding window.</param>
            <param name="separator">
            each char in each gram will be separated by this value if desired. 
            Pass a <see cref="F:System.String.Empty"/> value if no separator is desired.
            </param>
            <returns>The nGram list.</returns>
        </member>
        <member name="M:SharpNL.NGram.NGramGenerator.Generate(System.Char[],System.Int32,System.String)">
            <summary>
            Generates an nGram based on a char[] input
            </summary>
            <param name="input">The input the array of chars to convert to nGram.</param>
            <param name="count">The number of grams (chars) that each output gram will consist of.</param>
            <param name="separator">
            each char in each gram will be separated by this value if desired. 
            Pass a <see cref="F:System.String.Empty"/> value if no separator is desired.
            </param>
            <returns>The nGram list.</returns>
        </member>
        <member name="T:SharpNL.Stemmer.Snowball.SnowballStemmer">
            <summary>
            Represents a abstract stemmer.
            </summary>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.SnowballStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.SnowballStemmer.Current">
            <summary>
            Gets or sets the current string in the <see cref="F:SharpNL.Stemmer.Snowball.SnowballStemmer.sb"/> object.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.CzechStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.CzechStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.CzechStemmer"/> instance.</value>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.DanishStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.DanishStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.DanishStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.DutchStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.DutchStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.DutchStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.DutchStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.EnglishStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.EnglishStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.EnglishStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.EnglishStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.FinnishStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.FinnishStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.FinnishStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.FinnishStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.FrenchStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.FrenchStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.FrenchStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.FrenchStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.HungarianStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.HungarianStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.HungarianStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.HungarianStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.ItalianStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.ItalianStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.ItalianStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.ItalianStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.NorwegianStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.NorwegianStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.NorwegianStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.NorwegianStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.PortugalStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.PortugalStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.PortugalStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.PortugalStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.RomanianStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.RomanianStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.RomanianStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.RomanianStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.RussianStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.RussianStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.RussianStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.RussianStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.SpanishStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.SpanishStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.SpanishStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.SpanishStemmer"/> instance.</value>
        </member>
        <member name="M:SharpNL.Stemmer.Snowball.SwedishStemmer.Stem(System.String)">
            <summary>
            Reduces the given word into its stem.
            </summary>
            <param name="word">The word.</param>
            <returns>The stemmed word.</returns>
        </member>
        <member name="P:SharpNL.Stemmer.Snowball.SwedishStemmer.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.Stemmer.Snowball.SwedishStemmer"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.Stemmer.Snowball.SwedishStemmer"/> instance.</value>
        </member>
        <member name="T:SharpNL.Utility.StringTokenKind">
            <summary>
            Specifies the type of the <see cref="T:SharpNL.Utility.StringToken"/> object.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.Unknown">
            <summary>
            Unknown token
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.Brackets">
            <summary>
            Brackets token (,[,{,},],)
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.Word">
            <summary>
            Word token
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.Number">
            <summary>
            Number token
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.QuotedString">
            <summary>
            Quoted string token
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.WhiteSpace">
            <summary>
            White space token
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.Symbol">
            <summary>
            Symbol token
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.EndOfLine">
            <summary>
            The end of line (EOL) token
            </summary>
        </member>
        <member name="F:SharpNL.Utility.StringTokenKind.EndOfFile">
            <summary>
            The end of file (EOF) token
            </summary>
        </member>
        <member name="T:SharpNL.Utility.ModelManager">
            <summary>
            Represents a model manager that provides convenient access to culture-specific models at run time.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.ModelManager.Changed">
            <summary>
            Raised when a model is added or removed from this manager.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.Add(SharpNL.Utility.Model.ModelInfo)">
            <summary>
            Adds the specified model information. The model key will be de filename without extension.
            </summary>
            <param name="modelInfo">The model information.</param>
            <exception cref="T:System.ArgumentNullException">modelInfo</exception>
            <exception cref="T:System.IO.FileNotFoundException">The model file does not exist.</exception>
            <exception cref="T:System.ArgumentException">The model <i>name</i> is already in this manager.</exception>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.Contains(System.String)">
            <summary>
            Determines whether this instance contains the specified model name.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if model name is in this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.Contains(SharpNL.Utility.Model.ModelInfo)">
            <summary>
            Determines whether this instance contains the specified <see cref="T:SharpNL.Utility.Model.ModelInfo"/>.
            </summary>
            <param name="modelInfo">The model information.</param>
            <returns><c>true</c> if <see cref="T:SharpNL.Utility.Model.ModelInfo"/> is in this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.Remove(System.String)">
            <summary>                                                        
            Removes the model with the specified name.
            </summary>
            <param name="name">The model name to be removed.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The model <paramref name="name"/> is not in this instance.</exception>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.Remove(SharpNL.Utility.Model.ModelInfo)">
            <summary>
            Removes the specified model information.
            </summary>
            <param name="modelInfo">The model information.</param>
            <exception cref="T:System.ArgumentNullException">modelInfo</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The model <see cref="P:SharpNL.Utility.Model.ModelInfo.Name"/> is not in this instance.</exception>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.CheckRemovedType(SharpNL.Models)">
            <summary>
            Removes the model type from the available list if there are no more 
            models of the same <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.GetModel``1(System.String)">
            <summary>
            Gets the model.
            </summary>
            <typeparam name="T">The desired model type.</typeparam>
            <param name="name">The model name/key.</param>
            <returns>The model as the requested type or a <c>null</c> value.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The model file does not exist.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to detect the model type.</exception>
        </member>
        <member name="M:SharpNL.Utility.ModelManager.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the model manager.
            </summary>
            <returns>
            A <see cref="T:IEnumerator{string}"/> that contains all the model names in this manager.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.ModelManager.Count">
            <summary>
            Gets the number of models contained in the <see cref="T:SharpNL.Utility.ModelManager"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:SharpNL.Utility.ModelManager"/>.</value>
        </member>
        <member name="P:SharpNL.Utility.ModelManager.Available">
            <summary>
            Gets the available models in this instance.
            </summary>
            <value>The available models in this instance.</value>
        </member>
        <member name="T:SharpNL.Utility.Model.ModelInfo">
            <summary>
            Provides basic information about a model file. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Model.ModelInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.ModelInfo"/> class, which provides information about the model.
            </summary>
            <param name="fileName">The model filename.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified model file does not exist.</exception>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to load the specified model file.</exception>
        </member>
        <member name="M:SharpNL.Utility.Model.ModelInfo.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.ModelInfo"/> class.
            </summary>
            <param name="fileInfo">The model file info.</param>
            <exception cref="T:System.ArgumentNullException">fileInfo</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified model file does not exist.</exception>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to load the specified model file.</exception>
        </member>
        <member name="M:SharpNL.Utility.Model.ModelInfo.OpenModel">
            <summary>
            Opens the model file and returns the respective model object.
            </summary>
            <returns>A respective model object.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The model file does not exist.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to detect the model type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:SharpNL.Utility.Model.ModelInfo.File">
            <summary>
            Gets the file info.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="P:SharpNL.Utility.Model.ModelInfo.Language">
            <summary>
            Gets the language of the model.
            </summary>
            <value>The language of the model.</value>
        </member>
        <member name="P:SharpNL.Utility.Model.ModelInfo.ModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <value>The type of the model.</value>
        </member>
        <member name="P:SharpNL.Utility.Model.ModelInfo.Manifest">
            <summary>
            Gets the manifest.
            </summary>
            <value>The manifest.</value>
        </member>
        <member name="P:SharpNL.Utility.Model.ModelInfo.Name">
            <summary>
            Gets the model name.
            </summary>
            <value>The model name.</value>
        </member>
        <member name="P:SharpNL.Utility.Model.ModelInfo.Timestamp">
            <summary>
            Gets the training timestamp.
            </summary>
            <value>The training timestamp.</value>
        </member>
        <member name="P:SharpNL.Utility.Model.ModelInfo.Type">
            <summary>
            Gets the <see cref="P:SharpNL.Utility.Model.ModelInfo.Type"/> of the model.
            </summary>
            <value>The <see cref="P:SharpNL.Utility.Model.ModelInfo.Type"/> of the model.</value>
        </member>
        <member name="T:SharpNL.Utility.Model.ModelInfoEventArgs">
            <summary>
            Provides data for events that contain the <see cref="P:SharpNL.Utility.Model.ModelInfoEventArgs.ModelInfo"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Model.ModelInfoEventArgs.#ctor(SharpNL.Utility.Model.ModelInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.ModelInfoEventArgs"/> class.
            </summary>
            <param name="modelInfo">The model information.</param>
            <exception cref="T:System.ArgumentNullException">modelInfo</exception>
        </member>
        <member name="P:SharpNL.Utility.Model.ModelInfoEventArgs.ModelInfo">
            <summary>
            Gets the model information.
            </summary>
            <value>The model information.</value>
        </member>
        <member name="T:SharpNL.Utility.TextPosition">
            <summary>
            Represents a text position.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.TextPosition.Start">
            <summary>
            The start text index;
            </summary>
        </member>
        <member name="F:SharpNL.Utility.TextPosition.End">
            <summary>
            The end text index.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.TextPosition.GetCoveredText(System.String)">
            <summary>
            Gets the covered text.
            </summary>
            <param name="text">The text.</param>
            <returns>The covered text.</returns>
        </member>
        <member name="P:SharpNL.Utility.TextPosition.Length">
            <summary>
            Gets the text length.
            </summary>
            <value>The text length.</value>
        </member>
        <member name="T:SharpNL.Utility.TrainingInfo">
            <summary>
            This class is a temporary artifact that holds the training information,
            it is used to store some information as a comment in the model file.
            </summary>
            <remarks>This is a SharpNL implementation.</remarks>
        </member>
        <member name="M:SharpNL.Utility.TrainingInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.TrainingInfo"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.TrainingInfo.Append(System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding object argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
        </member>
        <member name="M:SharpNL.Utility.TrainingInfo.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:SharpNL.Utility.TrainingInfo"/> object.
            </summary>
            <returns>
            A string that represents the current <see cref="T:SharpNL.Utility.TrainingInfo"/> object.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.TrainingInfo.Value">
            <summary>
            Gets the training information.
            </summary>
            <value>The training information.</value>
        </member>
        <member name="T:SharpNL.Utility.TypeClassAttribute">
            <summary>
            Represents type string of a class.
            </summary>
        </member>
        <member name="P:SharpNL.Utility.TypeClassAttribute.Name">
            <summary>
            Gets the type name.
            </summary>
            <value>The type name.</value>
        </member>
        <member name="T:SharpNL.Utility.ReadTypeDelegate">
            <summary>
            Represents a delegate, which resolves the type name into a <see cref="T:System.Type"/> object..
            </summary>
            <param name="type">The string type.</param>
            <returns>The <see cref="T:System.Type"/> object or a <c>null</c> value if not recognized.</returns>
        </member>
        <member name="T:SharpNL.Utility.WriteTypeDelegate">
            <summary>
            Represents a delegate, which resolves the type name by the given <paramref name="type"/> object.
            </summary>
            <param name="type">The type.</param>
            <returns>The resolved type name, or a <c>null</c> value if it can not be resolved.</returns>
        </member>
        <member name="T:SharpNL.Utility.TypeResolver">
            <summary>
            The type resolver is responsible to translate a string representation of a type into a <see cref="T:System.Type"/> 
            object and vice versa.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.TypeResolver.IsRegistered(System.String)">
            <summary>
            Determines whether the specified type name is registered.
            </summary>
            <param name="name">The type name.</param>
            <returns><c>true</c> if the specified name is registered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.TypeResolver.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified type is registered.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is registered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.TypeResolver.Overwrite(System.String,System.Type)">
            <summary>
            Overwrites an specified type.
            </summary>
            <param name="name">The type name.</param>
            <param name="type">The type value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/>
            or
            <paramref name="type"/>
            </exception>
            <exception cref="T:System.ArgumentException">The specified name is not registered.</exception>
            <remarks>This method locks this entire instance! Use it wisely.</remarks>
        </member>
        <member name="M:SharpNL.Utility.TypeResolver.Register(System.String,System.Type)">
            <summary>
            Registers the specified type object with its string representation.
            </summary>
            <param name="name">A string representation of the given type.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:SharpNL.Utility.TypeResolver.ResolveType(System.String)">
            <summary>
            Resolves the type name into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="name">The type name.</param>
            <returns>The <see cref="T:System.Type"/> object or a <c>null</c> value if not recognized.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:SharpNL.Utility.TypeResolver.ResolveName(System.Type)">
            <summary>
            Resolves the type name by the given <paramref name="type"/> object.
            </summary>
            <param name="type">The type name.</param>
            <returns>The resolved type name, or a <c>null</c> value if it can not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="T:SharpNL.Library">
            <summary>
            Represents the SharpNL library.
            </summary>
        </member>
        <member name="M:SharpNL.Library.#cctor">
            <summary>
            Initializes static members of the SharpNL library.
            </summary>
        </member>
        <member name="M:SharpNL.Library.Donate">
            <summary>
            Donate to the library author.
            </summary>
        </member>
        <member name="M:SharpNL.Library.GetInstance(System.Type)">
            <summary>
            Gets the instance for the given <paramref name="type"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The instance of the given type.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:SharpNL.Library.GetKnownTypes(System.Type)">
            <summary>
            Gets the known types that inherits the given <paramref name="baseType"/>.
            </summary>
            <param name="baseType">The base type.</param>
        </member>
        <member name="M:SharpNL.Library.GetLang(System.String)">
            <summary>
            Gets the ISO 639-1 two-letter code for the language of the specified <paramref name="cultureName"/>.
            </summary>
            <param name="cultureName">The name of a culture.</param>
            <returns>The ISO 639-1 two-letter code for the language.</returns>
        </member>
        <member name="M:SharpNL.Library.GetModelComment(SharpNL.Utility.TrainingInfo)">
            <summary>
            Gets the model comment.
            </summary>
            <param name="info">The information.</param>
            <returns>The comment.</returns>
        </member>
        <member name="M:SharpNL.Library.CurrentTimeMillis">
            <summary>
            Currents the current time in millis.
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:SharpNL.Library.LoadKnownTypes">
            <summary>
            Loads the known types from the assemblies in the current application domain.
            </summary>
        </member>
        <member name="P:SharpNL.Library.MinOpenNLPVersion">
            <summary>
            Gets the minimum supported version of OpenNLP.
            </summary>
            <value>The minimum supported version of OpenNLP</value>
        </member>
        <member name="P:SharpNL.Library.MaxOpenNLPVersion">
            <summary>
            Gets the highest supported OpenNLP version.
            </summary>
            <value>The supported OpenNLP version.</value>
        </member>
        <member name="P:SharpNL.Library.Version">
            <summary>
            Gets the version of the SharpNL library.
            </summary>
            <value>The version of the SharpNLP library.</value>
        </member>
        <member name="P:SharpNL.Library.TypeResolver">
            <summary>
            Gets type resolver loaded for this library instance.
            </summary>
            <value>The type resolver.</value>
        </member>
        <member name="T:SharpNL.ML.AbstractTrainer">
            <summary>
            Represents an abstract trainer.
            </summary>
        </member>
        <member name="F:SharpNL.ML.AbstractTrainer.DefaultCutoff">
            <summary>
            The default cutoff value.
            </summary>
        </member>
        <member name="F:SharpNL.ML.AbstractTrainer.DefaultIterations">
            <summary>
            The default iterations value.
            </summary>
        </member>
        <member name="F:SharpNL.ML.AbstractTrainer.info">
            <summary>
            The training information field.
            </summary>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.#ctor(SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.AbstractTrainer"/> class.
            </summary>
            <param name="monitor">The evaluation monitor. This value can be null.</param>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.AddToReport(System.String,System.String)">
            <summary>
            Adds the specified key and value to report map.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.Display(System.String)">
            <summary>
            Displays the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.GetStringParam(System.String,System.String)">
            <summary>
            Gets the parameter from the train parameters. 
            </summary>
            <param name="key">The param key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A value or the <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.GetIntParam(System.String,System.Int32)">
            <summary>
            Gets the int parameter from the train parameters. 
            </summary>
            <param name="key">The param key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A int value or the <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.GetDoubleParam(System.String,System.Double)">
            <summary>
            Gets the double parameter from the train parameters. 
            </summary>
            <param name="key">The param key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A double value or the <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.GetBoolParam(System.String,System.Boolean)">
            <summary>
            Gets the bool parameter from the train parameters. 
            </summary>
            <param name="key">The param key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A bool value or the <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.Init(SharpNL.Utility.TrainingParameters,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes abstract trainer using the specified train parameters.
            </summary>
            <param name="trainParameters">The train parameters.</param>
            <param name="reportMapping">The report map.</param>
        </member>
        <member name="M:SharpNL.ML.AbstractTrainer.IsValid">
            <summary>
            Determines whether the parameters of this trainer are valid.
            </summary>
            <returns><c>true</c> if the parameters of this trainer are valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SharpNL.ML.AbstractTrainer.Algorithm">
            <summary>
            Gets the algorithm associated to this trainer.
            </summary>
            <value>The algorithm associated to this trainer.</value>
        </member>
        <member name="P:SharpNL.ML.AbstractTrainer.Cutoff">
            <summary>
            Gets the trainer cutoff.
            </summary>
            <value>The trainer cutoff.</value>
        </member>
        <member name="P:SharpNL.ML.AbstractTrainer.Iterations">
            <summary>
            Gets the number of iterations of this trainer.
            </summary>
            <value>The the number of iterations of this trainer.</value>
        </member>
        <member name="P:SharpNL.ML.AbstractTrainer.Monitor">
            <summary>
            Gets evaluation the monitor.
            </summary>
            <value>The evaluation monitor.</value>
        </member>
        <member name="M:SharpNL.ML.AbstractEventModelSequenceTrainer.#ctor(SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.AbstractEventModelSequenceTrainer"/> class with the specified evaluation monitor.
            </summary>
            <param name="monitor">The evaluation monitor. This argument can be <c>null</c>. </param>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.BasicContextGenerator">
            <summary>
            Generate contexts for maxent decisions, assuming that the input given to 
            the <see cref="M:SharpNL.ML.MaxEntropy.BasicContextGenerator.GetContext(System.Object)"/> method is a string containing contextual
            predicates separated by spaces.
            </summary>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.IContextGenerator">
            <summary>
            Generate contexts for maximum entropy decisions.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IContextGenerator.GetContext(System.Object)">
            <summary>
            Builds up the list of contextual predicates given an Object.
            </summary>
            <param name="obj">The object.</param>
            <returns>A string array with the contextual predicates.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.BasicContextGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.BasicContextGenerator"/> class using a space as separator.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.BasicContextGenerator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.BasicContextGenerator"/> class using a specified <paramref name="separator"/> value.
            </summary>
            <param name="separator">The separator.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.BasicContextGenerator.GetContext(System.Object)">
            <summary>
            Builds up the list of contextual predicates given an Object.
            </summary>
            <param name="obj">The object.</param>
            <returns>A string array with the contextual predicates.</returns>
            <remarks>The obj type must be a string, otherwise this method will throw a exception.</remarks>
            <exception cref="T:System.NotSupportedException">The object type X is not supported.</exception>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.IO.GISModelReader">
            <summary>
            Generalized Iterative Scaling model reader.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModelReader.GetParameters(System.Int32[][])">
            <summary>
            Reads the parameters from a file and populates an array of context objects.
            </summary>
            <param name="outcomePatterns">The outcomes patterns for the model. The first index refers to which
            outcome pattern (a set of outcomes that occurs with a context) is being specified. The
            second index specifies the number of contexts which use this pattern at index 0, and the
            index of each outcomes which make up this pattern in indices 1-n.</param>
            <returns>An array of context objects.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IO.GISModelReader.ConstructModel">
            <summary>
            Constructs the model.
            <para>
             GIS (model type identifier)
              1. the correction constant (int)
              2. the correction constant parameter (double)
              3. # of outcomes (int)
                 list of outcome names (string) 
              4. # of different types of outcome patterns (int)
                 list of (int int[])
                 [# of predicates for which outcome pattern is true] [outcome pattern]
              5. # of predicates (int)
                 list of predicate names (String)
            </para>
            </summary>
            <returns><see cref="T:SharpNL.ML.MaxEntropy.GISModel"/></returns>
        </member>
        <member name="T:SharpNL.ML.Model.AbstractModel">
            <summary>
            Represents a abstract model.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.IMaxentModel">
            <summary>
            Interface for maximum entropy models.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IMaxentModel.Eval(System.String[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together..</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IMaxentModel.Eval(System.String[],System.Double[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of string names of the contextual predicates which are to be evaluated together..</param>
            <param name="probs">An array which is populated with the probabilities for each of the different outcomes, all of which sum to 1.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IMaxentModel.Eval(System.String[],System.Single[])">
            <summary>
            Evaluates a contexts with the specified context values.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together.</param>
            <param name="probs">The values associated with each context.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IMaxentModel.GetBestOutcome(System.Double[])">
            <summary>
            Simple function to return the outcome associated with the index containing the highest probability in the double[].
            </summary>
            <param name="outcomes"></param>
            <returns>The string name of the best outcome.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IMaxentModel.GetOutcome(System.Int32)">
            <summary>
            Gets the string name of the outcome associated with the index,
            </summary>
            <param name="index">The index for which the name of the associated outcome is desired.</param>
            <returns>The string name of the outcome.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IMaxentModel.GetOutcomes">
            <summary>
            Gets an array of the outcome names.
            </summary>
            <returns>An array of the current outcome names.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IMaxentModel.GetIndex(System.String)">
            <summary>
            Gets the index associated with the String name of the given outcome.
            </summary>
            <param name="outcome">The string name of the outcome for which the index is desired.</param>
            <returns>The index if the given outcome label exists for this model, -1 if it does not.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IMaxentModel.GetNumOutcomes">
            <summary>
            Gets the data structures relevant to storing the model.
            </summary>
            <returns>The data structures relevant to storing the model.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.ContainsOutcome(System.String)">
            <summary>
            Determines whether the model contains the specified outcome.
            </summary>
            <param name="outcome">The outcome to locate in the model.</param>
            <returns><c>true</c> if the model contains the specified outcome; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.ContainsOutcomes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the model contains all the specified outcomes.
            </summary>
            <param name="outcomes">The outcomes to locate in the model.</param>
            <returns><c>true</c> if the model contains ALL the specified outcome; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.Eval(System.String[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together..</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.Eval(System.String[],System.Double[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of string names of the contextual predicates which are to be evaluated together..</param>
            <param name="probs">An array which is populated with the probabilities for each of the different outcomes, all of which sum to 1.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.Eval(System.String[],System.Single[])">
            <summary>
            Evaluates a contexts with the specified context values.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together.</param>
            <param name="probs">The values associated with each context.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.GetBestOutcome(System.Double[])">
            <summary>
            Gets the name of the outcome corresponding to the highest likelihood in the parameter <paramref name="outcomes"/>.
            </summary>
            <param name="outcomes">The outcomes to be evaluated.</param>
            <returns>The string name of the best outcome.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.GetOutcome(System.Int32)">
            <summary>
            Gets the string name of the outcome associated with the index,
            </summary>
            <param name="index">The index for which the name of the associated outcome is desired.</param>
            <returns>The string name of the outcome.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.GetOutcomes">
            <summary>
            Gets an array of the current outcome names.
            </summary>
            <returns>An array of the current outcome names.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.GetIndex(System.String)">
            <summary>
            Gets the index associated with the String name of the given outcome.
            </summary>
            <param name="outcome">The string name of the outcome for which the index is desired.</param>
            <returns>The index if the given outcome label exists for this model, -1 if it does not.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.GetNumOutcomes">
            <summary>
            Gets the data structures relevant to storing the model.
            </summary>
            <returns>The data structures relevant to storing the model.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractModel.GetDataStructures">
            <summary>
            Provides  the fundamental data structures which encode the maxent model information.  This method will usually only be needed by GISModelWriters.  The following values are held in the Object array which is returned by this method:
            <para>
              <c>index 0</c>: <see cref="T:Context[]"/> containing the model parameters.
              <c>index 1</c>: <see cref="T:IndexHashTable{string}"/> containing the mapping of model predicates to unique integers.
              <c>index 2</c>: <see cref="T:string[]"/> containing the names of the outcomes, stored in the index of the array which represents their unique ids in the model.
              <c>index 3</c>: <see cref="T:int"/> containing the value of the models correction constant.
              <c>index 4</c>: <see cref="T:double"/> containing the value of the models correction parameter.
            </para>
            </summary>
            <returns>System.Object[].</returns>
        </member>
        <member name="P:SharpNL.ML.Model.AbstractModel.ModelType">
            <summary>
            Gets the model type.
            </summary>
            <value>The type of the model.</value>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.QuasiNewton.QNModel.Eval(System.String[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together..</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.QuasiNewton.QNModel.Eval(System.String[],System.Double[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of string names of the contextual predicates which are to be evaluated together..</param>
            <param name="probs">An array which is populated with the probabilities for each of the different outcomes, all of which sum to 1.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.QuasiNewton.QNModel.Eval(System.String[],System.Single[])">
            <summary>
            Evaluates a contexts with the specified context values.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together.</param>
            <param name="probs">The values associated with each context.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.RealBasicEventStream">
            <summary>
            Represents a real basic event stream.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.RealBasicEventStream.#ctor(SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.RealBasicEventStream"/> class.
            </summary>
            <param name="objectStream">The object stream.</param>
            <exception cref="T:System.ArgumentNullException">objectStream</exception>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.RealBasicEventStream.#ctor(SharpNL.Utility.IObjectStream{System.String},SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.RealBasicEventStream"/> using a evaluation monitor.
            </summary>
            <param name="objectStream">The object stream.</param>
            <param name="monitor">The evaluation monitor.</param>
            <exception cref="T:System.ArgumentNullException">objectStream</exception>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.RealBasicEventStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.RealBasicEventStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.RealBasicEventStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="P:SharpNL.ML.MaxEntropy.RealBasicEventStream.Monitor">
            <summary>
            Gets the evaluation monitor.
            </summary>
            <value>The evaluation monitor.</value>
        </member>
        <member name="T:SharpNL.ML.BeamSearch`1">
            <summary>
            Performs k-best search over sequence.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <remarks>This is based on the description in Ratnaparkhi (1998), PhD diss, Univ. of Pennsylvania.</remarks>
        </member>
        <member name="T:SharpNL.ML.Model.ISequenceClassificationModel`1">
            <summary>
            A classification model that can label an input sequence.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpNL.ML.Model.ISequenceClassificationModel`1.BestSequence(`0[],System.Object[],SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the sequence with the highest probability.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="contextGenerator">The context generator.</param>
            <param name="validator">The validator.</param>
            <returns>Sequence.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.ISequenceClassificationModel`1.BestSequences(System.Int32,`0[],System.Object[],SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the n most probable sequences.
            </summary>
            <param name="numSequences">The number sequences.</param>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="contextGenerator">The context generator.</param>
            <param name="validator">The validator.</param>
            <returns>Sequence[].</returns>
        </member>
        <member name="M:SharpNL.ML.Model.ISequenceClassificationModel`1.BestSequences(System.Int32,`0[],System.Object[],System.Double,SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the n most probable sequences.
            </summary>
            <param name="numSequences">The number sequences.</param>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="minSequenceScore">The minimum sequence score.</param>
            <param name="contextGenerator">The context generator.</param>
            <param name="validator">The validator.</param>
            <returns>Sequence[].</returns>
        </member>
        <member name="M:SharpNL.ML.Model.ISequenceClassificationModel`1.GetOutcomes">
            <summary>
            Gets all possible outcomes.
            </summary>
            <returns>All possible outcomes.</returns>
        </member>
        <member name="M:SharpNL.ML.BeamSearch`1.#ctor(System.Int32,SharpNL.ML.Model.IMaxentModel)">
            <summary>
            Creates new search object.
            </summary>
            <param name="size">The size of the beam (k).</param>
            <param name="model">The model for assigning probabilities to the sequence outcomes.</param>
        </member>
        <member name="M:SharpNL.ML.BeamSearch`1.#ctor(System.Int32,SharpNL.ML.Model.IMaxentModel,System.Int32)">
            <summary>
            Creates new search object with the specified cache size.
            </summary>
            <param name="size">The size of the beam (k).</param>
            <param name="model">The model for assigning probabilities to the sequence outcomes.</param>
            <param name="cacheSize">Size of the cache.</param>
        </member>
        <member name="M:SharpNL.ML.BeamSearch`1.BestSequence(`0[],System.Object[],SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the sequence with the highest probability.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="beamSearch">The beam search.</param>
            <param name="validator">The validator.</param>
            <returns>The sequence with the highest probability.</returns>
        </member>
        <member name="M:SharpNL.ML.BeamSearch`1.BestSequences(System.Int32,`0[],System.Object[],SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the n most probable sequences.
            </summary>
            <param name="numSequences">The number sequences.</param>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="beamSearch">The beam search.</param>
            <param name="validator">The validator.</param>
            <returns>The n most probable sequences.</returns>
        </member>
        <member name="M:SharpNL.ML.BeamSearch`1.BestSequences(System.Int32,`0[],System.Object[],System.Double,SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the n most probable sequences.
            </summary>
            <param name="numSequences">The number sequences.</param>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="minSequenceScore">The minimum sequence score.</param>
            <param name="beamSearch">The beam search.</param>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:SharpNL.ML.BeamSearch`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.ML.BeamSearch`1.GetOutcomes">
            <summary>
            Gets all possible outcomes.
            </summary>
            <returns>all possible outcomes.</returns>
        </member>
        <member name="T:SharpNL.ML.Model.BinaryFileDataWriter">
            <summary>
            Provides Java compatible methods to write binary files.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.IDataWriter">
            <summary>
            Represents a data writer.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IDataWriter.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:SharpNL.ML.Model.IDataWriter.Write(System.Double)">
            <summary>
            Writes the specified double value.
            </summary>
            <param name="value">The double value.</param>
        </member>
        <member name="M:SharpNL.ML.Model.IDataWriter.Write(System.Int32)">
            <summary>
            Writes the specified integer value.
            </summary>
            <param name="value">The integer value.</param>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.BinaryFileDataWriter"/> class.
            </summary>
            <param name="outStream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">outStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not writable.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataWriter.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">The string value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">String too long.</exception>
            <remarks>The string length cannot exceed <see cref="F:System.UInt16.MaxValue"/> (65535).</remarks>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataWriter.Write(System.Double)">
            <summary>
            Writes the specified double value.
            </summary>
            <param name="value">The double value.</param>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataWriter.Write(System.Int32)">
            <summary>
            Writes the specified int value.
            </summary>
            <param name="value">The int value.</param>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataWriter.Flush">
            <summary>
            Clears all buffers for the current <see cref="T:System.IO.Stream"/> object and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataWriter.Close">
            <summary>
            Closes the current <see cref="T:System.IO.Stream"/> object and releases any resources (such as sockets and file handles) associated with it.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.GenericModelReader">
            <summary>
            Represents a generic model reader.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.GenericModelReader.#ctor(SharpNL.ML.Model.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.GenericModelReader"/> using a <see cref="T:SharpNL.ML.Model.IDataReader"/> object.
            </summary>
            <param name="reader">The data reader.</param>
        </member>
        <member name="T:SharpNL.ML.Model.GenericModelWriter">
            <summary>
            Represents a generic model writer.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Model.GenericModelWriter.writer">
            <summary>
            The model writer
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.GenericModelWriter.#ctor(SharpNL.ML.Model.AbstractModel,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.GenericModelWriter"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="outputStream">The output stream.</param>
            <exception cref="T:System.InvalidOperationException">Invalid model type.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.GenericModelWriter.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:SharpNL.ML.Model.GenericModelWriter.Write(System.Int32)">
            <summary>
            Writes the specified int32 value.
            </summary>
            <param name="value">The int32 value.</param>
        </member>
        <member name="M:SharpNL.ML.Model.GenericModelWriter.Write(System.Double)">
            <summary>
            Writes the specified double value.
            </summary>
            <param name="value">The double value.</param>
        </member>
        <member name="M:SharpNL.ML.Model.GenericModelWriter.Close">
            <summary>
            Closes this writer instance.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.GenericModelWriter.Persist">
            <summary>
            Persists this instance.
            </summary>
        </member>
        <member name="P:SharpNL.ML.Model.GenericModelWriter.Writer">
            <summary>
            Gets the model writer.
            </summary>
            <value>The model writer.</value>
        </member>
        <member name="T:SharpNL.ML.Model.ITrainer">
            <summary>
            Represents a trainer.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.ITrainer.Init(SharpNL.Utility.TrainingParameters,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes the trainer with the specified parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="reportMap">The report map.</param>
        </member>
        <member name="T:SharpNL.ML.ISequenceClassificationModel`1">
            <summary>
            The interface for sequence classification models.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpNL.ML.ISequenceClassificationModel`1.BestSequence(`0[],System.Object[],SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the sequence with the highest probability.
            </summary>
            <param name="sequence"></param>
            <param name="additionalContext"></param>
            <param name="beamSearch"></param>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:SharpNL.ML.ISequenceClassificationModel`1.BestSequences(System.Int32,`0[],System.Object[],System.Double,SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the n most probable sequences.
            </summary>
            <param name="numSequences">The number sequences.</param>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="minSequenceScore">The minimum sequence score.</param>
            <param name="beamSearch">The beam search.</param>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:SharpNL.ML.ISequenceClassificationModel`1.BestSequences(System.Int32,`0[],System.Object[],SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.Utility.ISequenceValidator{`0})">
            <summary>
            Finds the n most probable sequences.
            </summary>
            <param name="numSequences">The number sequences.</param>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="beamSearch">The beam search.</param>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:SharpNL.ML.ISequenceClassificationModel`1.GetOutcomes">
            <summary>
            Gets all possible outcomes.
            </summary>
            <returns>all possible outcomes.</returns>
        </member>
        <member name="T:SharpNL.ML.ISequenceTrainer">
            <summary>
            Represents a sequence trainer that uses a <see cref="T:SharpNL.ML.Model.ISequenceStream"/> to train a <see cref="T:Model.ISequenceClassificationModel{string}"/> model.
            </summary>
        </member>
        <member name="M:SharpNL.ML.ISequenceTrainer.Train(SharpNL.ML.Model.ISequenceStream)">
            <summary>
            Trains a sequence classification model using a event sequence stream.
            </summary>
            <param name="events">The sequence event stream.</param>
            <returns>A trained sequence classification model.</returns>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.GIS">
            <summary>
            A Factory class which uses instances of <see cref="T:SharpNL.ML.MaxEntropy.GISTrainer"/> to create and train <see cref="T:SharpNL.ML.MaxEntropy.GISModel"/>s.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.AbstractEventTrainer">
            <summary>
            Represents a abstract event trainer.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.IEventTrainer">
            <summary>
            Represents a event trainer.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IEventTrainer.Train(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event})">
            <summary>
            Trains a <see cref="T:SharpNL.ML.Model.IMaxentModel"/> model using the specified <paramref name="events"/> stream.
            </summary>
            <param name="events">The events.</param>
            <returns>A trained <see cref="T:SharpNL.ML.Model.IMaxentModel"/> model.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractEventTrainer.#ctor(SharpNL.Monitor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.AbstractEventTrainer"/> class.
            </summary>
            <param name="monitor">The monitor.</param>
            <param name="isSortAndMerge">if set to <c>true</c> [is sort and merge].</param>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractEventTrainer.GetDataIndexer(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event})">
            <summary>
            Creates a new data indexer for the given event stream.
            </summary>
            <param name="events">The event stream.</param>
            <returns>IDataIndexer.</returns>
            <exception cref="T:System.InvalidOperationException">Unexpected data indexer name: Name</exception>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractEventTrainer.DoTrain(SharpNL.ML.Model.IDataIndexer)">
            <summary>
            Execute the training operation.
            </summary>
            <param name="indexer">The data indexer.</param>
            <returns>The trained <see cref="T:SharpNL.ML.Model.IMaxentModel"/> model.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractEventTrainer.Train(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event})">
            <summary>
            Trains the maximum entropy model using the specified <paramref name="events"/>.
            </summary>
            <param name="events">The training events.</param>
            <returns>The trained <see cref="T:SharpNL.ML.Model.IMaxentModel"/> model.</returns>
        </member>
        <member name="P:SharpNL.ML.Model.AbstractEventTrainer.DataIndexerName">
            <summary>
            Gets the data indexer name.
            </summary>
            <value>The name of the data indexer.</value>
        </member>
        <member name="P:SharpNL.ML.Model.AbstractEventTrainer.IsSortAndMerge">
            <summary>
            Gets a value indicating whether this instance is sort and merge.
            </summary>
            <value><c>true</c> if this instance is sort and merge; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GIS.MaxEntropy">
            <summary>
            The maximum entropy entry value.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GIS.SmoothingObservation">
            <summary>
            If we are using smoothing, this is used as the "number" of times we want the trainer to imagine that it saw a feature that it actually didn't see.
            </summary>
            <remarks>The default value is 0.1.</remarks>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.GIS"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.#ctor(SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.GIS"/> class with the given evaluation monitor.
            </summary>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns><c>true</c> if this instance is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.DoTrain(SharpNL.ML.Model.IDataIndexer)">
            <summary>
            Perform the training process using the specified <paramref name="indexer"/> object.
            </summary>
            <param name="indexer">The indexer.</param>
            <returns>The trained <see cref="T:SharpNL.ML.Model.IMaxentModel"/> model.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,SharpNL.Monitor)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Boolean)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="smoothing">Defines whether the created trainer will use smoothing while training the model.</param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Boolean,SharpNL.Monitor)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="smoothing">Defines whether the created trainer will use smoothing while training the model.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Boolean,SharpNL.ML.Model.IPrior,System.Int32,SharpNL.Monitor)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="smoothing">Defines whether the created trainer will use smoothing while training the model.</param>
            <param name="modelPrior">The prior distribution for the model.</param>
            <param name="cutoff">The number of times a predicate must occur to be used in a model.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Boolean,SharpNL.ML.Model.IPrior,System.Int32)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="smoothing">Defines whether the created trainer will use smoothing while training the model.</param>
            <param name="modelPrior">The prior distribution for the model.</param>
            <param name="cutoff">The number of times a predicate must occur to be used in a model.</param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Boolean,SharpNL.ML.Model.IPrior,System.Int32,System.Int32)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="smoothing">Defines whether the created trainer will use smoothing while training the model.</param>
            <param name="modelPrior">The prior distribution for the model.</param>
            <param name="cutoff">The number of times a predicate must occur to be used in a model.</param>
            <param name="threads">The number of threads to use during the training.</param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GIS.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Boolean,SharpNL.ML.Model.IPrior,System.Int32,System.Int32,SharpNL.Monitor)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="smoothing">Defines whether the created trainer will use smoothing while training the model.</param>
            <param name="modelPrior">The prior distribution for the model.</param>
            <param name="cutoff">The number of times a predicate must occur to be used in a model.</param>
            <param name="threads">The number of threads to use during the training.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.GISModel">
            <summary>
            A maximum entropy model which has been trained using the Generalized Iterative Scaling procedure.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.#ctor(SharpNL.ML.Model.Context[],System.String[],System.String[],System.Int32,System.Double)">
            <summary>
            Creates a new model with the specified parameters, outcome names, and predicate/feature labels using the <see cref="T:SharpNL.ML.Model.UniformPrior"/> as prior.
            </summary>
            <param name="parameters">The parameters of the model.</param>
            <param name="predLabels">The names of the predicates used in this model.</param>
            <param name="outcomeNames">The names of the outcomes this model predicts.</param>
            <param name="correctionConstant">The maximum number of active features which occur in an event.</param>
            <param name="correctionParam">The parameter associated with the correction feature.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.#ctor(SharpNL.ML.Model.Context[],System.String[],System.String[],System.Int32,System.Double,SharpNL.ML.Model.IPrior)">
            <summary>
            Creates a new model with the specified parameters, outcome names, and predicate/feature labels.
            </summary>
            <param name="parameters">The parameters of the model.</param>
            <param name="predLabels">The names of the predicates used in this model.</param>
            <param name="outcomeNames">The names of the outcomes this model predicts.</param>
            <param name="correctionConstant">The maximum number of active features which occur in an event.</param>
            <param name="correctionParam">The parameter associated with the correction feature.</param>
            <param name="prior">The prior to be used with this model.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.Eval(System.String[])">
            <summary>
            Use this model to evaluate a context and return an array of the likelihood of each outcome given that context.
            </summary>
            <param name="context">The names of the predicates which have been observed at the present decision point.</param>
            <returns>
            The normalized probabilities for the outcomes given the context.
            The indexes of the double[] are the outcome ids, and the actual
            string representation of the outcomes can be obtained from the
            method getOutcome(int i).
            </returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.Eval(System.String[],System.Double[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of string names of the contextual predicates which are to be evaluated together..</param>
            <param name="outsums">An array which is populated with the probabilities for each of the different outcomes, all of which sum to 1.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.Eval(System.String[],System.Single[])">
            <summary>
            Evaluates a contexts with the specified context values.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together.</param>
            <param name="values">The values associated with each context.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.Eval(System.String[],System.Single[],System.Double[])">
            <summary>
            Use this model to evaluate a context and return an array of the likelihood of each outcome given that context.
            </summary>
            <param name="context">The names of the predicates which have been observed at the present decision point.</param>
            <param name="values">This is where the distribution is stored.</param>
            <param name="outsums">The outsums.</param>
            <returns>The normalized probabilities for the outcomes given the context. The indexes of the double[] are the outcome ids, and the actual string representation of the outcomes can be obtained from the method getOutcome(int i).</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.Eval(System.Int32[],System.Double[],SharpNL.ML.Model.EvalParameters)">
            <summary>
            Use this model to evaluate a context and return an array of the likelihood of each outcome given the specified context and the specified parameters.
            </summary>
            <param name="context">The integer values of the predicates which have been observed at the present decision point.</param>
            <param name="prior">The prior distribution for the specified context.</param>
            <param name="evalParams">The set of parameters used in this computation.</param>
            <returns>
            The normalized probabilities for the outcomes given the context.
            The indexes of the double[] are the outcome ids, and the actual
            string representation of the outcomes can be obtained from the
            method getOutcome(int i).
            </returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.Eval(System.Int32[],System.Single[],System.Double[],SharpNL.ML.Model.EvalParameters)">
            <summary>
            Use this model to evaluate a context and return an array of the likelihood of each outcome given the specified context and the specified parameters.
            </summary>
            <param name="context">The integer values of the predicates which have been observed at the present decision point.</param>
            <param name="values">The values for each of the parameters.</param>
            <param name="prior">The prior distribution for the specified context.</param>
            <param name="evalParams">The set of parameters used in this computation.</param>
            <returns>
            The normalized probabilities for the outcomes given the context.
            The indexes of the double[] are the outcome ids, and the actual
            string representation of the outcomes can be obtained from the
            method getOutcome(int i).
            </returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISModel.GetAllOutcomes(System.Double[])">
            <summary>
            Return a string matching all the outcome names with all the
            probabilities produced by the <see cref="M:SharpNL.ML.MaxEntropy.GISModel.Eval(System.String[])"/> method.
            </summary>
            <param name="outcomes">The normalized probabilities for the outcomes as returned by the <see cref="M:SharpNL.ML.MaxEntropy.GISModel.Eval(System.String[])"/> method.</param>
            <returns>
            A string value containing outcome names paired with the normalized
            probability (contained in the <paramref name="outcomes"/>) for each one.
            </returns>
            <exception cref="T:System.ArgumentException">The ocs argument must not have been produced by this model.</exception>
            <remarks>
            The argument <paramref name="outcomes"/> must have the same length of the length of the outcomes produce during the evaluation, otherwise the argument exception will occur.
            </remarks>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.GISTrainer">
            <summary>
            An implementation of Generalized Iterative Scaling.
            </summary>
            <remarks>
            The reference paper for this implementation was Adwait Ratnaparkhi's tech report at the
            University of Pennsylvania's Institute for Research in Cognitive Science, and is available at 
            <see href="ftp://ftp.cis.upenn.edu/pub/ircs/tr/97-08.ps.Z" />.
            
            The slack parameter used in the above implementation has been removed by default from the computation and a method
            for updating with Gaussian smoothing has been  added per Investigating GIS and Smoothing for Maximum Entropy Taggers,
            Clark and Curran (2002).
            <see href="http://acl.ldc.upenn.edu/E/E03/E03-1071.pdf" />
            
            A prior can be used to train models which converge to the distribution which minimizes the
            relative entropy between the distribution specified by the empirical constraints of the training
            data and the specified prior.  By default, the uniform distribution is used as the prior.
            </remarks>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.useGaussianSmoothing">
            <summary>
            Specified whether parameter updates should prefer a distribution of parameters which is gaussian.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.numUniqueEvents">
            <summary>
            Number of unique events which occurred in the event set.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.numPreds">
            <summary>
            Number of predicates.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.numOutcomes">
            <summary>
            The number outcomes.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.contexts">
            <summary>
            Records the array of predicates seen in each event.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.values">
            <summary>
            The value associated with each context. If null then context values are assumes to be 1.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.outcomeList">
            <summary>
            List of outcomes for each event i, in context[i].
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.numTimesEventsSeen">
            <summary>
            Records the num of times an event has been seen for each event i, in context[i].
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.lastAccuracy">
            <summary>
            Records the last iteration accuracy.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.predicateCounts">
            <summary>
            The number of times a predicate occurred in the training data.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.outcomeLabels">
            <summary>
            Stores the String names of the outcomes. The GIS only tracks outcomes as 
            ints, and so this array is needed to save the model to disk and thereby
            allow users to know what the outcome was in human understandable terms.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.predLabels">
            <summary>
            Stores the String names of the predicates. The GIS only tracks predicates
            as ints, and so this array is needed to save the model to disk and thereby
            allow users to know what the outcome was in human understandable terms.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.observedExpects">
            <summary>
            Stores the observed expected values of the features based on training data.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.param">
            <summary>
            Stores the estimated parameter value of each predicate during iteration.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.modelExpects">
            <summary>
            Stores the expected values of the features based on the current models.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.prior">
            <summary>
            This is the prior distribution that the model uses for training.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.evalParams">
            <summary>
            Initial probability for all outcomes.
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.monitor">
            <summary>
            The evaluation monitor
            </summary>
        </member>
        <member name="F:SharpNL.ML.MaxEntropy.GISTrainer.info">
            <summary>
            The training information.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISTrainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.GISTrainer"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISTrainer.#ctor(SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.GISTrainer"/> class with a specified evaluation monitor.
            </summary>
            <param name="monitor">The evaluation monitor.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISTrainer.NextIteration(System.Int32,System.Double)">
            <summary>
            Compute one iteration of GIS and return the log-likelihood.
            </summary>
            <param name="iteration">The iteration number.</param>
            <param name="correctionConstant">The correction constant.</param>
            <remarks>Compute contribution of p(a|b_i) for each feature and the new correction parameter.</remarks>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISTrainer.UseGaussianSigma(System.Double)">
            <summary>
            Sets this trainer to use smoothing while training the model.
            This can improve model accuracy, though training will potentially take
            longer and use more memory. Model size will also be larger.
            </summary>
            <param name="sigmaValue">The sigma value.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISTrainer.FindParameters(System.Int32,System.Double)">
            <summary>
            Estimate and return the model parameters.
            </summary>
            <param name="iterations">The iterations.</param>
            <param name="correctionConstant">The correction constant.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISTrainer.GaussianUpdate(System.Int32,System.Int32,System.Double)">
            <remarks>
            Modeled on implementation in Zhang Le's maxent kit.
            </remarks>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISTrainer.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Int32)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="di">The data indexer used to compress events in memory.</param>
            <param name="modelCutoff">The number of times a feature must occur to be included.</param>
            <returns>The newly trained model, which can be used immediately or saved to disk using an <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.GISTrainer.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,SharpNL.ML.Model.IPrior,System.Int32,System.Int32)">
            <summary>
            Train a model using the GIS algorithm.
            </summary>
            <param name="iterations">The number of GIS iterations to perform.</param>
            <param name="di">The data indexer used to compress events in memory.</param>
            <param name="modelPrior">The prior distribution used to train this model.</param>
            <param name="modelCutoff">The number of times a feature must occur to be included.</param>
            <param name="threads">The number of threads used to train this model.</param>
            <returns>The newly trained model, which can be used immediately or saved to disk using an <see cref="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter"/> object.</returns>
        </member>
        <member name="P:SharpNL.ML.MaxEntropy.GISTrainer.TrainingInfo">
            <summary>
            Gets the training information.
            </summary>
            <value>The training information.</value>
        </member>
        <member name="P:SharpNL.ML.MaxEntropy.GISTrainer.Smoothing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SharpNL.ML.MaxEntropy.GISTrainer"/> will use smoothing while training the model.
            This can improve model accuracy, though training will potentially take longer and use more memory. Model size will also be larger.
            </summary>
            <value><c>true</c> if smoothing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.ML.MaxEntropy.GISTrainer.SmoothingObservation">
            <summary>
            Gets or sets the "number" of times we want the trainer to imagine it saw a feature that it actually didn't see.
            </summary>
            <remarks>Default value is 0.1.</remarks>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.IO.BinaryGISModelWriter">
            <summary>
            Represents a binary GIS model writer.
            </summary>
        </member>
        <member name="T:SharpNL.ML.MaxEntropy.IO.GISModelWriter">
            <summary>
            Generalized Iterative Scaling model writer.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IO.GISModelWriter.#ctor(SharpNL.ML.Model.AbstractModel)">
            <para>
              <c>index 0</c>: <see cref="T:Context[]"/> containing the model parameters.
              <c>index 1</c>: <see cref="T:IndexHashTable{string}"/> containing the mapping of model predicates to unique integers.
              <c>index 2</c>: <see cref="T:string[]"/> containing the names of the outcomes, stored in the index of the array which represents their unique ids in the model.
              <c>index 3</c>: <see cref="T:double"/> containing the value of the models correction constant.
              <c>index 4</c>: <see cref="T:double"/> containing the value of the models correction parameter.
            </para>
            
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IO.BinaryGISModelWriter.#ctor(SharpNL.ML.Model.AbstractModel,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.MaxEntropy.IO.BinaryGISModelWriter"/> class.
            </summary>
            <param name="model">The GIS model.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IO.BinaryGISModelWriter.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IO.BinaryGISModelWriter.Write(System.Int32)">
            <summary>
            Writes the specified int value.
            </summary>
            <param name="value">The int value.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IO.BinaryGISModelWriter.Write(System.Double)">
            <summary>
            Writes the specified double value.
            </summary>
            <param name="value">The double value.</param>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IO.BinaryGISModelWriter.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:SharpNL.ML.MaxEntropy.IO.BinaryQNModelWriter.#ctor(SharpNL.ML.Model.AbstractModel,System.IO.Stream)">
            <summary>
            Constructor which takes a <see cref="T:SharpNL.ML.MaxEntropy.GISModel"/> and a <paramref name="outStream"/> and prepares itself to write the model to that stream.
            </summary>
            <param name="model">The model.</param>
            <param name="outStream">The out stream.</param>
        </member>
        <member name="T:SharpNL.ML.Model.AbstractDataIndexer">
            <summary>
            Abstract class for collecting event and context counts used in training.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.IDataIndexer">
            <summary>
            Object which compresses events in memory and performs feature selection.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IDataIndexer.Execute">
            <summary>
            Execute the data indexing.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IDataIndexer.GetContexts">
            <summary>
            Gets the predicates seen in each event.
            </summary>
            <returns>A 2-D array whose first dimension is the event index and array this refers to contains.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IDataIndexer.GetNumTimesEventsSeen">
            <summary>
            Gets the number of times a particular event was seen.
            </summary>
            <returns>An array indexed by the event index indicating the number of times a particular event was seen.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IDataIndexer.GetOutcomeList">
            <summary>
            Gets the outcome index for each event.
            </summary>
            <returns>The outcome index for each event.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IDataIndexer.GetOutcomeLabels">
            <summary>
            Gets the outcome names.
            </summary>
            <returns>The outcome names indexed by outcome index.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IDataIndexer.GetPredLabels">
            <summary>
            Gets the predicate/context names.
            </summary>
            <returns>
            The predicate/context names indexed by context index.
            These indices are the value of the array returned by <see cref="M:GetContexts"/>.
            </returns>
        </member>
        <member name="M:SharpNL.ML.Model.IDataIndexer.GetPredCounts">
            <summary>
            Gets the count of each predicate in the events.
            </summary>
            <returns>The count of each predicate in the events.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.IDataIndexer.GetNumEvents">
            <summary>
            Gets the number of total events indexed.
            </summary>
            <returns>The number of total events indexed.</returns>
        </member>
        <member name="P:SharpNL.ML.Model.IDataIndexer.Values">
            <summary>
            Gets the values associated with each event context or null if integer values are to be used.
            </summary>
            <returns>The values associated with each event context.</returns>
        </member>
        <member name="F:SharpNL.ML.Model.AbstractDataIndexer.contexts">
            The integer contexts associated with each unique event. 
        </member>
        <member name="F:SharpNL.ML.Model.AbstractDataIndexer.numTimesEventsSeen">
            The integer outcome associated with each unique event. 
            The number of times an event occurred in the training data. 
        </member>
        <member name="F:SharpNL.ML.Model.AbstractDataIndexer.outcomeLabels">
            The predicate/context names. 
            The names of the outcomes. 
        </member>
        <member name="F:SharpNL.ML.Model.AbstractDataIndexer.predCounts">
            The number of times each predicate occurred. 
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.AbstractDataIndexer"/> class without a evaluation monitor.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.#ctor(SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.AbstractDataIndexer"/> with the specified evaluation monitor.
            </summary>
            <param name="monitor">The evaluation monitor.</param>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.Display(System.String)">
            <summary>
            Displays the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.Execute">
            <summary>
            Execute the data indexing.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The data indexing has already been performed.
            </exception>
            <remarks>
            Do NOT call this method in the constructor of the data indexer, otherwise it will not work in C#!
            </remarks>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.PerformIndexing">
            <summary>
            Performs the data indexing.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.GetContexts">
            <summary>
            Gets the predicates seen in each event.
            </summary>
            <returns>A 2-D array whose first dimension is the event index and array this refers to contains.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.GetNumTimesEventsSeen">
            <summary>
            Gets the number of times a particular event was seen.
            </summary>
            <returns>An array indexed by the event index indicating the number of times a particular event was seen.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.GetOutcomeList">
            <summary>
            Gets the outcome index for each event.
            </summary>
            <returns>The outcome index for each event.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.GetOutcomeLabels">
            <summary>
            Gets the outcome names.
            </summary>
            <returns>The outcome names indexed by outcome index.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.GetPredLabels">
            <summary>
            Gets the predicate/context names.
            </summary>
            <returns>
            The predicate/context names indexed by context index.
            These indices are the value of the array returned by <see cref="M:GetContexts"/>.
            </returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.GetPredCounts">
            <summary>
            Gets the count of each predicate in the events.
            </summary>
            <returns>The count of each predicate in the events.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.GetNumEvents">
            <summary>
            Gets the number of total events indexed.
            </summary>
            <returns>The number of total events indexed.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.ToIndexedStringArray(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Utility method for creating a string[] array from a map whose
            keys are labels (strings) to be stored in the array and whose
            values are the indices (integers) at which the corresponding
            labels should be inserted.
            </summary>
            <param name="labelToIndexMap">The label to index map.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:SharpNL.ML.Model.AbstractDataIndexer.Update(System.String[],System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32)">
            <summary>
            Updates the set of predicated and counter with the specified event contexts and cutoff.
            </summary>
            <param name="ec">The contexts/features which occur in a event.</param>
            <param name="predicateSet">The set of predicates which will be used for model building.</param>
            <param name="counter">The predicate counters.</param>
            <param name="cutoff">The cutoff which determines whether a predicate is included.</param>
        </member>
        <member name="P:SharpNL.ML.Model.AbstractDataIndexer.Values">
            <summary>
            Gets the values associated with each event context or null if integer values are to be used.
            </summary>
            <returns>The values associated with each event context.</returns>
        </member>
        <member name="P:SharpNL.ML.Model.AbstractDataIndexer.Monitor">
            <summary>
            Gets the evaluation monitor.
            </summary>
            <value>The evaluation monitor.</value>
        </member>
        <member name="T:SharpNL.ML.Model.BinaryFileDataReader">
            <summary>
            Provides Java compatible methods to read binary files.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.IDataReader">
            <summary>
            Represents a data reader.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IDataReader.ReadDouble">
            <summary>
            Reads a double value.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IDataReader.ReadInt">
            <summary>
            Reads a int value.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IDataReader.ReadString">
            <summary>
            Reads a string value.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.BinaryFileDataReader"/> class.
            </summary>
            <param name="inStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not readable.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataReader.ReadInt">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataReader.ReadString">
            <summary>
            Reads a string from the current stream. 
            The string is prefixed with the length, encoded as an ushort.
            </summary>
            <returns>The string being read.</returns>
            <remarks>This method is compatible with Java ReadUTF method.</remarks>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataReader.ReadUShort">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer read from this stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.BinaryFileDataReader.ReadLong">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
        </member>
        <member name="T:SharpNL.ML.Model.ComparableEvent">
            <summary>
            A maxent event representation which we can use to sort based on the predicates indexes contained in the events.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.ComparableEvent.CompareTo(SharpNL.ML.Model.ComparableEvent)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.ML.Model.ComparableEvent.ToString">
            <summary>
            Returns a string that represents the current event.
            </summary>
            <returns>
            A string that represents the current event.
            </returns>
        </member>
        <member name="T:SharpNL.ML.Model.ComparablePredicate">
            <summary>
            A maxent predicate representation which we can use to sort based on the
            outcomes. This allows us to make the mapping of features to their parameters
            much more compact.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.ComparablePredicate.#ctor(System.String,System.Int32[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.ComparablePredicate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="outcomes">The outcomes.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SharpNL.ML.Model.ComparablePredicate.CompareTo(SharpNL.ML.Model.ComparablePredicate)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.ML.Model.ComparablePredicate.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.ML.Model.ComparablePredicate.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpNL.ML.Model.ComparablePredicate.Outcomes">
            <summary>
            Gets the outcomes.
            </summary>
            <value>The outcomes.</value>
        </member>
        <member name="P:SharpNL.ML.Model.ComparablePredicate.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:SharpNL.ML.Model.Context">
            <summary>
            Represents a real valued parameter or expected value associated with a particular contextual predicate or feature. 
            This is used to store maxent model parameters as well as model and empirical expected values.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.Context.#ctor(System.Int32[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.Context"/> with the specified parameters associated with the specified outcome pattern.
            </summary>
            <param name="outcomes">The outcomes outcomes for which parameters exists for this context..</param>
            <param name="parameters">The parameters for the outcomes specified.</param>
        </member>
        <member name="M:SharpNL.ML.Model.Context.Contains(System.Int32)">
            <summary>
            Determines whether this context contains the specified outcome.
            </summary>
            <param name="outcome">The outcome to seek.</param>
            <returns><c>true</c> if the <paramref name="outcome"/> occurs within this context; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SharpNL.ML.Model.Context.Outcomes">
            <summary>
            Gets the outcomes for which parameters exists for this context.
            </summary>
            <value>A array of outcomes for which parameters exists for this context.</value>
        </member>
        <member name="P:SharpNL.ML.Model.Context.Parameters">
            <summary>
            Gets the parameters or expected values for the outcomes which occur with this context.
            </summary>
            <value>A array of parameters for the outcomes of this context.</value>
        </member>
        <member name="T:SharpNL.ML.Model.EvalParameters">
            <summary>
            Encapsulates the variables used in producing probabilities from a model and facilitates passing these variables to the eval method.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.EvalParameters.#ctor(SharpNL.ML.Model.Context[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.EvalParameters"/> which can be evaluated.
            </summary>
            <param name="parameters">The parameters of the model.</param>
            <param name="numOutcomes">The number outcomes.</param>
        </member>
        <member name="M:SharpNL.ML.Model.EvalParameters.#ctor(SharpNL.ML.Model.Context[],System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.EvalParameters"/> which can be evaluated.
            </summary>
            <param name="parameters">The parameters of the model.</param>
            <param name="correctionParam">The correction parameter.</param>
            <param name="correctionConstant">The correction constant.</param>
            <param name="numOutcomes">The number outcomes.</param>
        </member>
        <member name="P:SharpNL.ML.Model.EvalParameters.Parameters">
            <summary>
            Gets the parameters of the model.
            </summary>
            <value>The parameters of the model.</value>
        </member>
        <member name="P:SharpNL.ML.Model.EvalParameters.NumOutcomes">
            <summary>
            Gets the number outcomes.
            </summary>
            <value>The number outcomes.</value>
        </member>
        <member name="P:SharpNL.ML.Model.EvalParameters.CorrectionConstant">
            <summary>
            Gets the correction constant.
            </summary>
            <value>The correction constant.</value>
        </member>
        <member name="P:SharpNL.ML.Model.EvalParameters.CorrectionParam">
            <summary>
            Gets or sets the correction parameter.
            </summary>
            <value>The correction parameter.</value>
        </member>
        <member name="P:SharpNL.ML.Model.EvalParameters.ConstantInverse">
            <summary>
            Gets the constant inverse.
            </summary>
            <value>The constant inverse.</value>
        </member>
        <member name="T:SharpNL.ML.Model.Event">
            <summary>
            The context of a decision point during training.
            This includes contextual predicates and an outcome.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.Event.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.Event"/> with a outcome and its context.
            </summary>
            <param name="outcome">The event outcome.</param>
            <param name="context">The event context.</param>
        </member>
        <member name="M:SharpNL.ML.Model.Event.#ctor(System.String,System.String[],System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.Event"/> with the specified outcome, context and values.
            </summary>
            <param name="outcome">The event outcome.</param>
            <param name="context">The event context.</param>
            <param name="values">The event values.</param>
        </member>
        <member name="M:SharpNL.ML.Model.Event.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.ML.Model.Event.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:SharpNL.ML.Model.Event.Outcome">
            <summary>
            Gets the outcome.
            </summary>
            <value>The outcome.</value>
        </member>
        <member name="P:SharpNL.ML.Model.Event.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:SharpNL.ML.Model.FileEventStream">
            <summary>
            Class for using a file of events as an event stream. The format of the file is one event per line with
            each line consisting of outcome followed by contexts (space delimited).
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.FileEventStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.FileEventStream"/> class.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputStream"/></exception>
            <exception cref="T:System.ArgumentException">The stream is not readable.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.FileEventStream.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.FileEventStream"/> class.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputStream"/>
            or
            <paramref name="encoding"/>
            </exception>
            <exception cref="T:System.ArgumentException">The stream is not readable.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.FileEventStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.FileEventStream"/> class using a file as source.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SharpNL.ML.Model.FileEventStream.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.FileEventStream"/> class using a file as source with the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:SharpNL.ML.Model.FileEventStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.FileEventStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.ML.Model.FileEventStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SharpNL.ML.Model.FileEventStream.ToLine(SharpNL.ML.Model.Event)">
            <summary>
            Generates a string representing the specified event.
            </summary>
            <param name="ev">The event for which a string representation is needed.</param>
            <returns>A string representing the specified event.</returns>
            <exception cref="T:System.ArgumentNullException">ev</exception>
        </member>
        <member name="P:SharpNL.ML.Model.FileEventStream.Reader">
            <summary>
            Gets the stream reader.
            </summary>
            <value>The stream reader.</value>
        </member>
        <member name="T:SharpNL.ML.Model.HashSumEventStream">
            <summary>
            Represents a stream that wraps a <see cref="T:IObjectStream{Event}"/>, 
            and maintains a hash of the events readed from it.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.AbstractObjectStream`1">
            <summary>
            Represents an abstract object stream.
            </summary>
            <typeparam name="T">The type of the object in the stream.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.AbstractObjectStream`1.#ctor(SharpNL.Utility.IObjectStream{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.AbstractObjectStream`1"/> class.
            </summary>
            <param name="objectStream">The object stream.</param>
        </member>
        <member name="M:SharpNL.Utility.AbstractObjectStream`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.AbstractObjectStream`1.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns, null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.AbstractObjectStream`1.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="P:SharpNL.Utility.AbstractObjectStream`1.IsFinished">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpNL.Utility.AbstractObjectStream`1"/> is finished.
            </summary>
            <value><c>true</c> if finished; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharpNL.ML.Model.HashSumEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.HashSumEventStream"/> class.
            </summary>
            <param name="eventStream">The event stream.</param>
        </member>
        <member name="M:SharpNL.ML.Model.HashSumEventStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.HashSumEventStream.CalculateHashSum">
            <summary>
            Calculates the hash sum of the stream. 
            The method must be called after the stream is completely consumed.
            </summary>
            <returns>The hash string value.</returns>
        </member>
        <member name="M:SharpNL.ML.Model.HashSumEventStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns, null will return each object from the underlying source exactly once.
            </summary>
            <returns>The next object or null to signal that the stream is exhausted.</returns>
            <exception cref="T:System.InvalidOperationException">The CalculateHashSum was called! Theoretically this stream should be completely consumed.</exception>
        </member>
        <member name="T:SharpNL.ML.Model.IndexHashTable`1">
            <summary>
            The <see cref="T:IndexHashTable{T}"/> is a hash table which maps entries of an array to their index in the array. All entries in the array must be unique otherwise a well-defined mapping is not possible.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            The entry objects must implement <see cref="T:IEquatable{T}"/> and <see cref="M:Object.GetHashCode"/> otherwise the behavior of this class is undefined.
            The implementation uses a hash table with open addressing and linear probing.
            The table is thread safe and can concurrently accessed by multiple threads, thread safety is achieved through immutability. Though its not strictly immutable which means, that the table must still be safely published to other threads.
            </remarks>
        </member>
        <member name="M:SharpNL.ML.Model.IndexHashTable`1.#ctor(`0[],System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.IndexHashTable`1"/> class.
            The specified array is copied into the table and later changes to the array do not affect this table in any way.
            </summary>
            <param name="mapping">The values to be indexed, all values must be unique otherwise a well-defined mapping of an entry to an index is not possible.</param>
            <param name="loadFactor">The load factor, usually 0.7.</param>
            <exception cref="T:System.ArgumentException">@The load factor must be larger than 0 and equal to or smaller than 1.;loadFactor</exception>
            <exception cref="T:System.InvalidOperationException">Array must contain only unique keys!</exception>
        </member>
        <member name="P:SharpNL.ML.Model.IndexHashTable`1.Size">
            <summary>
            Gets the hash table size.
            </summary>
            <value>The hash table size.</value>
        </member>
        <member name="P:SharpNL.ML.Model.IndexHashTable`1.Item(`0)">
            <summary>
            Gets the index for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The index or -1 if there is no entry to the keys.</returns>
        </member>
        <member name="T:SharpNL.ML.Model.IPrior">
            <summary>
            This interface allows one to implement a prior distribution for use in maximum entropy model training.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.IPrior.LogPrior(System.Double[],System.Int32[])">
            <summary>
            Populates the specified array with the the log of the distribution for the specified context.
            The returned array will be overwritten and needs to be re-initialized with every call to this method.
            </summary>
            <param name="dist">An array to be populated with the log of the prior distribution.</param>
            <param name="context">The indices of the contextual predicates for an event.</param>
        </member>
        <member name="M:SharpNL.ML.Model.IPrior.LogPrior(System.Double[],System.Int32[],System.Single[])">
            <summary>
            Populates the specified array with the the log of the distribution for the specified context.
            The returned array will be overwritten and needs to be re-initialized with every call to this method.
            </summary>
            <param name="dist">An array to be populated with the log of the prior distribution.</param>
            <param name="context">The indices of the contextual predicates for an event.</param>
            <param name="values">The values associated with the context.</param>
        </member>
        <member name="M:SharpNL.ML.Model.IPrior.SetLabels(System.String[],System.String[])">
            <summary>
            Method to specify the label for the outcomes and contexts.  This is used to map
            integer outcomes and contexts to their string values.  This method is called prior
            to any call to #logPrior.
            </summary>
            <param name="outcomeLabels">An array of each outcome label.</param>
            <param name="contextLabels">An array of each context label.</param>
        </member>
        <member name="T:SharpNL.ML.Model.ModelType">
            <summary>
            Enumerates the model types.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Model.ModelType.Maxent">
            <summary>
            The Maximum Entropy model type.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Model.ModelType.Perceptron">
            <summary>
            The Perceptron model type.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.MutableContext">
            <summary>
            Class used to store parameters or expected values associated with this context which
            can be updated or assigned. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.MutableContext.#ctor(System.Int32[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:MutableContext"/> with the specified parameters associated with the specified outcome pattern.
            </summary>
            <param name="outcomes">The outcomes outcomes for which parameters exists for this context.</param>
            <param name="parameters">The parameters for the outcomes specified.</param>
        </member>
        <member name="M:SharpNL.ML.Model.MutableContext.SetParameter(System.Int32,System.Double)">
            <summary>
            Assigns the parameter or expected value at the specified outcomeIndex the specified value.
            </summary>
            <param name="index">The index of the parameter or expected value to be updated.</param>
            <param name="value">The value to be assigned.</param>
        </member>
        <member name="M:SharpNL.ML.Model.MutableContext.UpdateParameter(System.Int32,System.Double)">
            <summary>
            Updates the parameter or expected value at the specified index by adding the specified value to its current value.
            </summary>
            <param name="index">The index of the parameter or expected value to be updated.</param>
            <param name="value">The value to be added.</param>
        </member>
        <member name="T:SharpNL.ML.Model.OnePassDataIndexer">
            <summary>
            An indexer for maxent model data which handles cutoffs for uncommon contextual 
            predicates and provides a unique integer index for each of the predicates.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.OnePassDataIndexer"/> class using a event stream and a cutoff value.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="cutoff">The cutoff.</param>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32,SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.OnePassDataIndexer"/> class, using a event stream, a cutoff value and a evaluation <see cref="T:SharpNL.Monitor"/>.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="cutoff">The cutoff value.</param>
            <param name="monitor">The evaluation monitor.</param>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.OnePassDataIndexer"/> class, using a event stream, a cutoff value and a value that indicates if the events should be sorted.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="cutoff">The cutoff.</param>
            <param name="sort">if set to <c>true</c> the events will be sorted during the indexing.</param>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32,System.Boolean,SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.OnePassDataIndexer"/> class, using a event stream, a cutoff value and a value that indicates if the events should be sorted.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="cutoff">The cutoff.</param>
            <param name="sort">if set to <c>true</c> the events will be sorted during the indexing.</param>
            <param name="monitor">The evaluation monitor.</param>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassDataIndexer.PerformIndexing">
            <summary>
            Performs the data indexing.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassDataIndexer.ComputeEventCounts(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Reads events into a linked list. The predicates associated with each event are
            counted and any which occur at least cutoff times are added to the 
            <see cref="!:predicatesInOut"/> map along with a unique integer index.
            </summary>
            <param name="predicatesInOut">The predicates.</param>
            <returns>The events</returns>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassDataIndexer.Index(System.Collections.Generic.LinkedList{SharpNL.ML.Model.Event},System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Indexes the specified events.
            </summary>
            <param name="events">The events.</param>
            <param name="predicateIndex">Index of the predicate.</param>
            <returns>List&lt;ComparableEvent&gt;.</returns>
        </member>
        <member name="P:SharpNL.ML.Model.OnePassDataIndexer.Cutoff">
            <summary>
            Gets the cutoff value.
            </summary>
            <value>The cutoff value.</value>
        </member>
        <member name="P:SharpNL.ML.Model.OnePassDataIndexer.EventStream">
            <summary>
            Gets the event stream.
            </summary>
            <value>The event stream.</value>
        </member>
        <member name="P:SharpNL.ML.Model.OnePassDataIndexer.Sort">
            <summary>
            Gets a value indicating whether data should be sorted.
            </summary>
            <value><c>true</c> if data should be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.ML.Model.OnePassRealValueDataIndexer">
            <summary>
            An indexer for maxent model data which handles cutoffs for uncommon
            contextual predicates and provides a unique integer index for each of the
            predicates and maintains event values.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassRealValueDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.OnePassRealValueDataIndexer"/> class using a event stream and a cutoff value.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="cutoff">The cutoff.</param>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassRealValueDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32,SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.OnePassRealValueDataIndexer"/> class using a event stream a cutoff value and a evaluation <see cref="T:SharpNL.Monitor"/>.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="cutoff">The cutoff.</param>
            <param name="monitor">The evaluation monitor.</param>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassRealValueDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.OnePassDataIndexer"/> class, using a event stream, a cutoff value and a value that indicates if the events should be sorted.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="cutoff">The cutoff.</param>
            <param name="sort">if set to <c>true</c> the events will be sorted during the indexing.</param>
        </member>
        <member name="M:SharpNL.ML.Model.OnePassRealValueDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32,System.Boolean,SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.OnePassDataIndexer"/> class, using a event stream, a cutoff value and a value that indicates if the events should be sorted.
            </summary>
            <param name="eventStream">The event stream.</param>
            <param name="cutoff">The cutoff.</param>
            <param name="sort">if set to <c>true</c> the events will be sorted during the indexing.</param>
            <param name="monitor">The evaluation monitor.</param>
        </member>
        <member name="T:SharpNL.ML.Model.PlainTextFileDataReader">
            <summary>
            Represents a plain text data reader.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.PlainTextFileDataReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.PlainTextFileDataReader"/> class using a input stream as source.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="inputStream"/> was not readable.</exception>
        </member>
        <member name="M:SharpNL.ML.Model.PlainTextFileDataReader.#ctor(System.IO.StreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.PlainTextFileDataReader"/> class using a <paramref name="streamReader"/> as source.
            </summary>
            <param name="streamReader">The stream reader.</param>
            <exception cref="T:System.ArgumentNullException">streamReader</exception>
        </member>
        <member name="M:SharpNL.ML.Model.PlainTextFileDataReader.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.PlainTextFileDataReader.ReadDouble">
            <summary>
            Reads a double value.
            </summary>
            <returns>System.Double.</returns>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">
            Unable to convert to double the following line: Line
            or
            Unable to read a double value.
            </exception>
        </member>
        <member name="M:SharpNL.ML.Model.PlainTextFileDataReader.ReadInt">
            <summary>
            Reads a int value.
            </summary>
            <returns>System.Int32.</returns>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">
            Unable to convert to int the following line:  + line
            or
            Unable to read a int value.
            </exception>
        </member>
        <member name="M:SharpNL.ML.Model.PlainTextFileDataReader.ReadString">
            <summary>
            Reads a string value.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:SharpNL.ML.Model.RealValueFileEventStream">
            <summary>
            Represents a real value file event stream.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.RealValueFileEventStream.ParseContexts(System.String[])">
            <summary>
            Parses the specified contexts and re-populates context array with features and returns the 
            values for these features. 
            If all values are unspecified, then null is returned.
            </summary>
            <param name="contexts">The contexts.</param>
            <returns>The event values.</returns>
            <exception cref="T:System.InvalidOperationException">Negative values are not allowed: context</exception>
        </member>
        <member name="M:SharpNL.ML.Model.RealValueFileEventStream.ParseContexts(System.String[],SharpNL.Monitor)">
            <summary>
            Parses the specified contexts and re-populates context array with features and returns 
            the values for these features. 
            If all values are unspecified, then null is returned.
            </summary>
            <param name="contexts">The contexts.</param>
            <param name="monitor">The evaluation monitor.</param>
            <returns>The event values.</returns>
            <exception cref="T:System.InvalidOperationException">Negative values are not allowed: context</exception>
        </member>
        <member name="M:SharpNL.ML.Model.RealValueFileEventStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="P:SharpNL.ML.Model.RealValueFileEventStream.Monitor">
            <summary>
            Gets the evaluation monitor.
            </summary>
            <value>The evaluation monitor.</value>
        </member>
        <member name="T:SharpNL.ML.Model.Sequence">
            <summary>
            Class which models a sequence.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.Sequence.#ctor(SharpNL.ML.Model.Event[],System.Object)">
            <summary>
            Creates a new sequence made up of the specified events and derived from the specified source.
            </summary>
            <param name="events">The events of the sequence.</param>
            <param name="source">The source object for this sequence.</param>
        </member>
        <member name="M:SharpNL.ML.Model.Sequence.GetSource``1">
            <summary>
            Gets an object from which this sequence can be derived. This object is
            used when the events for this sequence need to be re-derived such as in a
            call to <see cref="M:SharpNL.ML.Model.ISequenceStream.UpdateContext(SharpNL.ML.Model.Sequence,SharpNL.ML.Model.AbstractModel)"/>.
            </summary>
            <value>An object from which this sequence can be derived.</value>
        </member>
        <member name="P:SharpNL.ML.Model.Sequence.Events">
            <summary>
            Gets the events which make up this sequence.
            </summary>
            <value>The events which make up this sequence.</value>
        </member>
        <member name="T:SharpNL.ML.Model.SequenceStreamEventStream">
            <summary>
            Class which turns a sequence stream into an event stream.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.SequenceStreamEventStream.#ctor(SharpNL.ML.Model.ISequenceStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Model.SequenceStreamEventStream"/> class.
            </summary>
            <param name="sequenceStream">The sequence stream.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="sequenceStream"/> is null.
            </exception>
        </member>
        <member name="M:SharpNL.ML.Model.SequenceStreamEventStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.SequenceStreamEventStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.ML.Model.SequenceStreamEventStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Model.TwoPassDataIndexer">
            <summary>
            Collecting event and context counts by making two passes over the events. The
            first pass determines which contexts will be used by the model, and the 
            second pass creates the events in memory containing only the contexts which
            will be used. This greatly reduces the amount of memory required for storing
            the events. During the first pass a temporary event file is created which
            is read during the second pass.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.TwoPassDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event})">
            <summary>
            One argument constructor for DataIndexer which calls the two argument constructor assuming no cutoff.
            </summary>
            <param name="eventStream">An event stream which contains the a list of all the Events seen in the training data.</param>
        </member>
        <member name="M:SharpNL.ML.Model.TwoPassDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32)">
            <summary>
            Two argument constructor for DataIndexer.
            </summary>
            <param name="eventStream">An event stream which contains the a list of all the Events seen in the training data.</param>
            <param name="cutoff">The minimum number of times a predicate must have been observed in order to be included in the model.</param>
        </member>
        <member name="M:SharpNL.ML.Model.TwoPassDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32,System.Boolean)">
            <summary>
            Two argument constructor for DataIndexer.
            </summary>
            <param name="eventStream">An event stream which contains the a list of all the Events seen in the training data.</param>
            <param name="cutoff">The minimum number of times a predicate must have been observed in order to be included in the model.</param>
            <param name="sort">if set to <c>true</c> the events will be sorted.</param>
        </member>
        <member name="M:SharpNL.ML.Model.TwoPassDataIndexer.#ctor(SharpNL.Utility.IObjectStream{SharpNL.ML.Model.Event},System.Int32,System.Boolean,SharpNL.Monitor)">
            <summary>
            Two argument constructor for DataIndexer.
            </summary>
            <param name="eventStream">An event stream which contains the a list of all the Events seen in the training data.</param>
            <param name="cutoff">The minimum number of times a predicate must have been observed in order to be included in the model.</param>
            <param name="sort">if set to <c>true</c> the events will be sorted.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the evaluation messages or it can cancel the indexing operation.
            This argument can be a <c>null</c> value.
            </param>
        </member>
        <member name="M:SharpNL.ML.Model.TwoPassDataIndexer.PerformIndexing">
            <summary>
            Performs the data indexing.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.TwoPassDataIndexer.ComputeEventCounts(System.IO.StreamWriter,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Reads events into a linked list. The predicates associated with each event are 
            counted and any which occur at least N times (cutoff) are added to the
            <paramref name="predicatesInOut"/> map along with a unique integer index.
            </summary>
            <param name="eventStore">A writer to which the events are written to for later processing.</param>
            <param name="predicatesInOut">The predicates in out.</param>
            <returns>The number of events readed from the event stream.</returns>
        </member>
        <member name="P:SharpNL.ML.Model.TwoPassDataIndexer.Cutoff">
            <summary>
            Gets the cutoff value.
            </summary>
            <value>The cutoff value.</value>
        </member>
        <member name="P:SharpNL.ML.Model.TwoPassDataIndexer.EventStream">
            <summary>
            Gets the event stream.
            </summary>
            <value>The event stream.</value>
        </member>
        <member name="P:SharpNL.ML.Model.TwoPassDataIndexer.Sort">
            <summary>
            Gets a value indicating whether the data should be sorted.
            </summary>
            <value><c>true</c> if the data should be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.ML.Model.UniformPrior">
            <summary>
            Provide a maximum entropy model with a uniform prior.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Model.UniformPrior.LogPrior(System.Double[],System.Int32[])">
            <summary>
            Populates the specified array with the the log of the distribution for the specified context.
            The returned array will be overwritten and needs to be re-initialized with every call to this method.
            </summary>
            <param name="dist">An array to be populated with the log of the prior distribution.</param>
            <param name="context">The indices of the contextual predicates for an event.</param>
        </member>
        <member name="M:SharpNL.ML.Model.UniformPrior.LogPrior(System.Double[],System.Int32[],System.Single[])">
            <summary>
            Populates the specified array with the the log of the distribution for the specified context.
            The returned array will be overwritten and needs to be re-initialized with every call to this method.
            </summary>
            <param name="dist">An array to be populated with the log of the prior distribution.</param>
            <param name="context">The indices of the contextual predicates for an event.</param>
            <param name="values">The values associated with the context.</param>
        </member>
        <member name="M:SharpNL.ML.Model.UniformPrior.SetLabels(System.String[],System.String[])">
            <summary>
            Method to specify the label for the outcomes and contexts. This is used to map
            integer outcomes and contexts to their string values. This method is called prior
            to any call to #logPrior.
            </summary>
            <param name="outcomeLabels">An array of each outcome label.</param>
            <param name="contextLabels">An array of each context label.</param>
        </member>
        <member name="T:SharpNL.ML.Perceptron.IO.PerceptronModelReader">
            <summary>
            Abstract parent class for readers of Perceptron.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Perceptron.IO.PerceptronModelWriter">
            <summary>
            Abstract parent class for Perceptron writers. It provides the persist method
            which takes care of the structure of a stored document, and requires an
            extending class to define precisely how the data should be stored.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Perceptron.IO.PlainTextPerceptronModelWriter">
            <summary>
            Model writer that saves models in plain text format.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Perceptron.IO.PlainTextPerceptronModelWriter.#ctor(SharpNL.ML.Model.AbstractModel,System.String)">
            <summary>
            Constructor which takes a <see cref="T:SharpNL.ML.Perceptron.PerceptronModel"/> and a File and prepares itself to
            write the model to that file. Detects whether the file is GZipped or not based on whether
            the suffix contains ".gz".
            </summary>
            <param name="model">The PerceptronModel which is to be persisted.</param>
            <param name="fileName">The filename in which the model is to be persisted.</param>
        </member>
        <member name="M:SharpNL.ML.Perceptron.IO.PlainTextPerceptronModelWriter.#ctor(SharpNL.ML.Model.AbstractModel,System.IO.Stream)">
            <summary>
            Constructor which takes a <see cref="T:SharpNL.ML.Perceptron.PerceptronModel"/> and a <see cref="T:System.IO.Stream"/> and prepares
            itself to write the model to that writer.
            </summary>
            <param name="model">The <seealso cref="T:SharpNL.ML.Perceptron.PerceptronModel"/> which is to be persisted.</param>
            <param name="outputStream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">outputStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not writable.</exception>
        </member>
        <member name="M:SharpNL.ML.Perceptron.IO.PlainTextPerceptronModelWriter.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="T:SharpNL.ML.Perceptron.IO.SuffixSensitivePerceptronModelWriter">
             <summary>
             A writer for perceptron models which inspects the filename and invokes the
             appropriate <see cref="T:SharpNL.ML.Perceptron.IO.PerceptronModelWriter"/> depending on the filename's suffixes.
             </summary>
             <remarks>
            <para>
             The following assumption are made about suffixes:
             
              .gz  - file is GZipped (must be last suffix)
              .bin - file is binary
              .txt - file is plain text (default)
             
             </para>
             </remarks>
        </member>
        <member name="T:SharpNL.ML.Perceptron.PerceptronModel">
            <summary>
            A perceptron model which has been trained using the perceptron algorithm.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronModel.Eval(System.String[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together..</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronModel.Eval(System.String[],System.Double[])">
            <summary>
            Evaluates a context.
            </summary>
            <param name="context">A list of string names of the contextual predicates which are to be evaluated together..</param>
            <param name="probs">An array which is populated with the probabilities for each of the different outcomes, all of which sum to 1.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronModel.Eval(System.String[],System.Single[])">
            <summary>
            Evaluates a contexts with the specified context values.
            </summary>
            <param name="context">A list of String names of the contextual predicates which are to be evaluated together.</param>
            <param name="probs">The values associated with each context.</param>
            <returns>An array of the probabilities for each of the different outcomes, all of which sum to 1.</returns>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronModel.Eval(System.String[],System.Single[],System.Double[])">
            <summary>
            Use this model to evaluate a context and return an array of the likelihood of each outcome given that context.
            </summary>
            <param name="context">The names of the predicates which have been observed at the present decision point.</param>
            <param name="values">This is where the distribution is stored.</param>
            <param name="outsums">The outsums.</param>
            <returns>The normalized probabilities for the outcomes given the context. The indexes of the double[] are the outcome ids, and the actual string representation of the outcomes can be obtained from the method getOutcome(int i).</returns>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronModel.Eval(System.Int32[],System.Single[],System.Double[],SharpNL.ML.Model.EvalParameters,System.Boolean)">
            <summary>
            Use this model to evaluate a context and return an array of the likelihood of each outcome given that context.
            </summary>
            <param name="context">The names of the predicates which have been observed at the present decision point.</param>
            <param name="values">This is where the distribution is stored.</param>
            <param name="prior">The prior distribution for the specified context.</param>
            <param name="evalParams">The set of parameters used in this computation.</param>
            <param name="normalize">if set to <c>true</c> the probabilities will be normalized.</param>
            <returns>The normalized probabilities for the outcomes given the context. 
            The indexes of the double[] are the outcome ids, and the actual string representation of 
            the outcomes can be obtained from the method getOutcome(int i).</returns>
        </member>
        <member name="T:SharpNL.ML.Perceptron.PerceptronTrainer">
            <summary>
            Trains models using the perceptron algorithm.
            </summary>
            <remarks>
            Each outcome is represented as a binary perceptron classifier. 
            This supports standard (integer) weighting as well average weighting as described in:
            
            Discriminative Training Methods for Hidden Markov Models: Theory and Experiments
            with the Perceptron Algorithm. Michael Collins, EMNLP 2002.
            </remarks>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.DefaultTolerance">
            <summary>
            The default tolerance of the perception trainer.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.contexts">
            <summary>
            Records the array of predicates seen in each event.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.numEvents">
            <summary>
            Number of events in the event set.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.numOutcomes">
            <summary>
            Number of outcomes.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.numPreds">
            <summary>
            Number of predicates.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.numTimesEventsSeen">
            <summary>
            Records the num of times an event has been seen for each event i, in context[i].
            </summary>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.numUniqueEvents">
            <summary>
            Number of unique events which occurred in the event set.
            </summary>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.outcomeLabels">
            <summary>
            Stores the String names of the outcomes.
            </summary>
            <remarks>The GIS only tracks outcomes as ints, and so this array is needed to save the model to disk and thereby allow users to know what the outcome was in human understandable terms.</remarks>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.outcomeList">
            <summary>
            List of outcomes for each event i, in context[i].
            </summary>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.predLabels">
            <summary>
            Stores the String names of the predicates.
            </summary>
            <remarks>The GIS only tracks predicates as ints, and so this array is needed to save the model to disk and thereby allow users to know what the outcome was in human understandable terms.</remarks>
        </member>
        <member name="F:SharpNL.ML.Perceptron.PerceptronTrainer.values">
            <summary>
            The value associates with each context. If null then context values are assumes to be 1.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronTrainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Perceptron.PerceptronTrainer"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronTrainer.#ctor(SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Perceptron.PerceptronTrainer"/> class.
            </summary>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronTrainer.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Int32)">
            <summary>
            Train a model using the Perceptron algorithm.
            </summary>
            <param name="iterations">The number of Perceptron iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="cutoff">The number of times a predicate must occur to be used in a model.</param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.Perceptron.IO.PerceptronModelWriter"/> object.</returns>
        </member>
        <member name="M:SharpNL.ML.Perceptron.PerceptronTrainer.TrainModel(System.Int32,SharpNL.ML.Model.IDataIndexer,System.Int32,System.Boolean)">
            <summary>
            Train a model using the Perceptron algorithm.
            </summary>
            <param name="iterations">The number of Perceptron iterations to perform.</param>
            <param name="indexer">The object which will be used for event compilation.</param>
            <param name="cutoff">The number of times a predicate must occur to be used in a model.</param>
            <param name="useAverage"></param>
            <returns>The newly trained model, which can be used immediately or saved to disk using a <see cref="T:SharpNL.ML.Perceptron.IO.PerceptronModelWriter"/> object.</returns>
        </member>
        <member name="P:SharpNL.ML.Perceptron.PerceptronTrainer.StepSizeDecrease">
            <summary>
            Enables and sets step size decrease. 
            The step size is decreased every iteration by the specified value.
            </summary>
            <value>The step size decrease in percent.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Decrease value must be between 0 and 100.</exception>
        </member>
        <member name="P:SharpNL.ML.Perceptron.PerceptronTrainer.Tolerance">
            <summary>
            Gets or sets the tolerance.
            If the change in training set accuracy is less than this, stop iterating.
            </summary>
            <value>The tolerance.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Tolerance must be a positive number.</exception>
        </member>
        <member name="P:SharpNL.ML.Perceptron.PerceptronTrainer.UseSkippedAveraging">
            <summary>
            Gets or sets a value indicating whether skipped averaging is enabled.
            </summary>
            <value><c>true</c> if skipped averaging is enabled; otherwise, <c>false</c>.</value>
            <remarks>
            If we are doing averaging, and the current iteration is one 
            of the first 20 or it is a perfect square, then updated the
            summed parameters.
            
            The reason we don't take all of them is that the parameters change
            less toward the end of training, so they drown out the contributions
            of the more volatile early iterations. The use of perfect
            squares allows us to sample from successively farther apart iterations.
            </remarks>
        </member>
        <member name="T:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer">
            <summary>
            Trains models for sequences using the perceptron algorithm.
            </summary>
            <remarks>
            Each outcome is represented as a binary perceptron classifier. 
            This supports standard (integer) weighting as well average weighting. 
            Sequence information is used in a simplified was to that described in:
            Discriminative Training Methods for Hidden Markov Models: Theory and Experiments
            with the Perceptron Algorithm. Michael Collins, EMNLP 2002.
            Specifically only updates are applied to tokens which were incorrectly tagged by a sequence tagger
            rather than to all feature across the sequence which differ from the training sequence.
            </remarks>
        </member>
        <member name="F:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer.numEvents">
            Number of events in the event set. 
        </member>
        <member name="F:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer.numOutcomes">
            Number of predicates. 
        </member>
        <member name="F:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer.oMap">
            List of outcomes for each event i, in context[i]. 
        </member>
        <member name="F:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer.param">
            Stores the estimated parameter value of each predicate during iteration. 
        </member>
        <member name="M:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer"/> class
            without a evaluation monitor.
            </summary>
        </member>
        <member name="M:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer.#ctor(SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.ML.Perceptron.SimplePerceptronSequenceTrainer"/> 
            class with the specified evaluation monitor.
            </summary>
            <param name="monitor">The evaluation monitor. This argument can be <c>null</c>.</param>
        </member>
        <member name="T:SharpNL.ML.TrainerFactory">
            <summary>
            Represents the trainer factory.
            </summary>
        </member>
        <member name="M:SharpNL.ML.TrainerFactory.GetEventTrainer(SharpNL.Utility.TrainingParameters,System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Monitor)">
            <summary>
            Gets the event trainer.
            </summary>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="reportMap">The report map.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The <see cref="T:SharpNL.ML.Model.IEventTrainer"/> trainer object.</returns>
        </member>
        <member name="M:SharpNL.ML.TrainerFactory.GetEventModelSequenceTrainer(SharpNL.Utility.TrainingParameters,System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Monitor)">
            <summary>
            Gets the event model sequence trainer.
            </summary>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="reportMap">The report map.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The <see cref="T:SharpNL.ML.IEventModelSequenceTrainer"/> trainer object.</returns>
            <exception cref="T:System.InvalidOperationException">Trainer type couldn't be determined!</exception>
        </member>
        <member name="M:SharpNL.ML.TrainerFactory.GetSequenceModelTrainer(SharpNL.Utility.TrainingParameters,System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Monitor)">
            <summary>
            Gets the sequence model trainer.
            </summary>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="reportMap">The report map.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The <see cref="T:SharpNL.ML.ISequenceTrainer"/> trainer object.</returns>
            <exception cref="T:System.InvalidOperationException">Trainer type couldn't be determined!</exception>
        </member>
        <member name="M:SharpNL.ML.TrainerFactory.GetTrainerType(SharpNL.Utility.TrainingParameters)">
            <summary>
            Gets the type of the trainer from the <see cref="T:SharpNL.Utility.TrainingParameters"/> object.
            </summary>
            <param name="trainParams">The train parameters.</param>
            <returns>A nullable <see cref="T:SharpNL.ML.TrainerType"/> value.</returns>
        </member>
        <member name="M:SharpNL.ML.TrainerFactory.IsValid(SharpNL.Utility.TrainingParameters)">
            <summary>
            Determines whether the specified train parameters are valid.
            </summary>
            <param name="trainParams">The train parameters.</param>
            <returns><c>true</c> if the specified train parameters are valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.ML.TrainerFactory.RegisterTrainer(System.String,System.Type)">
            <summary>
            Registers a custom trainer with the given name.
            </summary>
            <param name="trainerName">Name of the trainer.</param>
            <param name="trainerType">The trainer type.</param>
            <exception cref="T:System.ArgumentNullException">trainerName
            or
            trainerType</exception>
            <exception cref="T:System.ArgumentException">The specified trainer name is an built in trainer.</exception>
            <exception cref="T:System.ArgumentException">The specified trainer name is already registered.</exception>
            <exception cref="T:System.InvalidOperationException">The specified trainer type does not implement an valid interface.</exception>
        </member>
        <member name="T:SharpNL.ML.TrainerType">
            <summary>
            Enumerates the trainer types.
            </summary>
        </member>
        <member name="F:SharpNL.ML.TrainerType.EventModelTrainer">
            <summary>
            The event model trainer
            </summary>
            <remarks>EVENT_MODEL_TRAINER</remarks>
        </member>
        <member name="F:SharpNL.ML.TrainerType.EventModelSequenceTrainer">
            <summary>
            The model sequence trainer
            </summary>
            <remarks>EVENT_MODEL_SEQUENCE_TRAINER</remarks>
        </member>
        <member name="F:SharpNL.ML.TrainerType.SequenceTrainer">
            <summary>
            The sequence trainer
            </summary>
            <remarks>SEQUENCE_TRAINER</remarks>
        </member>
        <member name="T:SharpNL.NameFind.BilouCodec">
            <summary>
            Represents a BILOU (Begin, Inside, Last, Outside, Unit) sequence codec.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.ISequenceCodec`1">
            <summary>
            Interface ISequenceCodec
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpNL.Utility.ISequenceCodec`1.Decode(`0[])">
            <summary>
            Decodes a sequence T objects into <see cref="T:SharpNL.Utility.Span"/> objects.
            </summary>
            <param name="objectList">The object list.</param>
            <returns>A array with the decoded objects.</returns>
        </member>
        <member name="M:SharpNL.Utility.ISequenceCodec`1.Encode(SharpNL.Utility.Span[],System.Int32)">
            <summary>
            Encodes the specified names.
            </summary>
            <param name="names">The names.</param>
            <param name="length">The length.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:SharpNL.Utility.ISequenceCodec`1.CreateSequenceValidator">
            <summary>
            Creates a sequence validator which can validate a sequence of outcomes.
            </summary>
            <returns>A sequence validator which can validate a sequence of outcomes.</returns>
        </member>
        <member name="M:SharpNL.Utility.ISequenceCodec`1.AreOutcomesCompatible(System.String[])">
            <summary>
            Checks if the outcomes of the model are compatible with the codec.
            </summary>
            <param name="outcomes">All possible model outcomes</param>
            <returns><c>true</c> if the outcomes of the model are compatible with the codec, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.NameFind.BilouCodec.Decode(System.String[])">
            <summary>
            Decodes a sequence string objects into its respective <see cref="T:SharpNL.Utility.Span"/> objects.
            </summary>
            <param name="objectList">The object list.</param>
            <returns>A array with the decoded objects.</returns>
        </member>
        <member name="M:SharpNL.NameFind.BilouCodec.Encode(SharpNL.Utility.Span[],System.Int32)">
            <summary>
            Encodes the specified names.
            </summary>
            <param name="names">The names.</param>
            <param name="length">The length.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:SharpNL.NameFind.BilouCodec.CreateSequenceValidator">
            <summary>
            Creates a sequence validator which can validate a sequence of outcomes.
            </summary>
            <returns>A sequence validator which can validate a sequence of outcomes.</returns>
        </member>
        <member name="M:SharpNL.NameFind.BilouCodec.AreOutcomesCompatible(System.String[])">
            <summary>
            Checks if the outcomes of the model are compatible with the codec.
            </summary>
            <param name="outcomes">All possible model outcomes</param>
            <returns><c>true</c> if the outcomes of the model are compatible with the codec, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpNL.NameFind.BilouNameFinderSequenceValidator">
            <summary>
            Represents a BILOU (Begin, Inside, Last, Outside, Unit) sequence validator.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.BilouNameFinderSequenceValidator.ValidSequence(System.Int32,System.String[],System.String[],System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.
            This is used to restrict invalid sequences such as those used in start/continue tag-based chunking or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">The index in the input sequence for which the new outcome is being proposed.</param>
            <param name="inputSequence">The input sequence.</param>
            <param name="outcomesSequence">The outcomes so far in this sequence.</param>
            <param name="outcome">The next proposed outcome for the outcomes sequence.</param>
            <returns><c>true</c> if the sequence would still be valid with the new outcome, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.NameFind.BioCodec.AreOutcomesCompatible(System.String[])">
            <summary>
            Checks if the outcomes of the model are compatible with the codec.
            </summary>
            <param name="outcomes">All possible model outcomes</param>
            <returns><c>true</c> if the outcomes of the model are compatible with the codec, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.NameFind.BioCodec.CreateSequenceValidator">
            <summary>
            Creates a sequence validator which can validate a sequence of outcomes.
            </summary>
            <returns>A sequence validator which can validate a sequence of outcomes.</returns>
        </member>
        <member name="M:SharpNL.NameFind.BioCodec.Decode(System.String[])">
            <summary>
            Decodes a sequence string objects into its respective <see cref="T:SharpNL.Utility.Span"/> objects.
            </summary>
            <param name="objectList">The object list.</param>
            <returns>A array with the decoded objects.</returns>
        </member>
        <member name="M:SharpNL.NameFind.BioCodec.Encode(SharpNL.Utility.Span[],System.Int32)">
            <summary>
            Encodes the specified names.
            </summary>
            <param name="names">The names.</param>
            <param name="length">The length.</param>
            <returns>T[].</returns>
        </member>
        <member name="T:SharpNL.NameFind.DefaultNameContextGenerator">
            <summary>
            Class for determining contextual features for a tag/chunk style named-entity recognizer.
            </summary>
        </member>
        <member name="T:SharpNL.NameFind.INameContextGenerator">
            <summary>
            Interface for generating the context for an name finder by specifying a set of feature generators.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.INameContextGenerator.AddFeatureGenerator(SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator)">
            <summary>
            Adds a feature generator to this set of feature generators.
            </summary>
            <param name="generator">The feature generator to add.</param>
        </member>
        <member name="M:SharpNL.NameFind.INameContextGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs all the feature generators for a name finder that the specified tokens have been classified with the coorisponds set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="M:SharpNL.NameFind.INameContextGenerator.ClearAdaptiveData">
            <summary>
            Informs all the feature generators for a name finder that the context of the adaptive data (typically a document) is no longer valid.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.DefaultNameContextGenerator.#ctor(SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.DefaultNameContextGenerator"/> class.
            </summary>
            <param name="featureGenerators">The feature generators.</param>
        </member>
        <member name="M:SharpNL.NameFind.DefaultNameContextGenerator.AddFeatureGenerator(SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator)">
            <summary>
            Adds a feature generator to this set of feature generators.
            </summary>
            <param name="featureGenerator">The feature generator to add.</param>
        </member>
        <member name="M:SharpNL.NameFind.DefaultNameContextGenerator.ClearAdaptiveData">
            <summary>
            Informs all the feature generators for a name finder that the context of the adaptive data (typically a document) is no longer valid.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.DefaultNameContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.Object[])">
            <summary>Gets the context for finding names at the specified index.</summary>
            <param name="index">The index of the token in the specified toks array for which the context should be constructed.</param>
            <param name="tokens">The sequence of items over which the beam search is performed.</param>
            <param name="preds">The previous decisions made in the tagging of this sequence. Only indices less than i will be examined.</param>
            <param name="additionalContext">Addition features which may be based on a context outside of the sentence.</param>
            <returns>The context for finding names at the specified index.</returns>
        </member>
        <member name="M:SharpNL.NameFind.DefaultNameContextGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs all the feature generators for a name finder that the specified tokens have been classified with the corresponds set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="T:SharpNL.NameFind.DictionaryNameFinder">
            <summary>
            This is a dictionary based name finder, it scans text for names inside a dictionary.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.DictionaryNameFinder.#ctor(SharpNL.Dictionary.Dictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.DictionaryNameFinder"/> with the provided dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:SharpNL.NameFind.DictionaryNameFinder.#ctor(SharpNL.Dictionary.Dictionary,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.DictionaryNameFinder"/> with the provided dictionary and a type.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="type">The type of the result spans.</param>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:SharpNL.NameFind.DictionaryNameFinder.Find(System.String[])">
            <summary>
            Generates name tags for the given sequence, typically a sentence, returning token spans for any identified names.
            </summary>
            <param name="tokens">An array of the tokens or words of the sequence, typically a sentence.</param>
            <returns>An array of spans for each of the names identified.</returns>
        </member>
        <member name="M:SharpNL.NameFind.DictionaryNameFinder.ClearAdaptiveData">
            <summary>
            Forgets all adaptive data which was collected during previous calls to one of the find methods.
            </summary>
            <remarks>This method is typical called at the end of a document.</remarks>
        </member>
        <member name="P:SharpNL.NameFind.DictionaryNameFinder.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:SharpNL.NameFind.DictionaryNameFinder.Type">
            <summary>
            Gets the result span type.
            </summary>
            <value>The result span type string.</value>
        </member>
        <member name="T:SharpNL.NameFind.NameFinderEventStream">
            <summary>
            Class for creating an event stream out of data files for training an name finder.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderEventStream.AdditionalContext(System.String[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generated previous decision features for each token based on contents of the specified map.
            </summary>
            <param name="tokens">The token for which the context is generated.</param>
            <param name="prevMap">A mapping of tokens to their previous decisions.</param>
            <returns>An additional context array with features for each token.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderEventStream.CreateEvents(SharpNL.NameFind.NameSample)">
            <summary>
            Creates events for the provided sample.
            </summary>
            <param name="sample">The sample the sample for which training <see cref="T:Event"/>s are be created.</param>
            <returns>The events enumerator.</returns>
        </member>
        <member name="T:SharpNL.NameFind.NameFinderME">
            <summary>
            Class for creating a maximum-entropy-based name finder.
            </summary>
        </member>
        <member name="F:SharpNL.NameFind.NameFinderME.DefaultBeamSize">
            <summary>
            The default beam size.
            </summary>
        </member>
        <member name="F:SharpNL.NameFind.NameFinderME.DefaultType">
            <summary>
            The default span type.
            </summary>
        </member>
        <member name="F:SharpNL.NameFind.NameFinderME.Empty">
            <summary>
            Represents a empty additional context.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.#ctor(SharpNL.NameFind.TokenNameFinderModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameFinderME"/> using the given <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/>.
            </summary>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">model</exception>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.ClearAdaptiveData">
            <summary>
            Forgets all adaptive data which was collected during previous calls to one of the find methods.
            </summary>
            <remarks>This method is typical called at the end of a document.</remarks>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.CreateFeatureGenerator">
            <summary>
            Creates the default feature generators.
            </summary>
            <returns>The <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> feature generator object.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.CreateFeatureGenerator(System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the feature generators with the given parameters.
            </summary>
            <param name="generatorDescriptor">The generator descriptor.</param>
            <param name="resources">The resources dictionary.</param>
            <returns>The <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> feature generator object.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.ExtractNameType(System.String)">
            <summary>
            Gets the name type from the outcome.
            </summary>
            <param name="outcome">The outcome.</param>
            <returns>The name type, or <c>null</c> if not set.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.Find(System.String[])">
            <summary>
            Generates name tags for the given sequence, typically a sentence, returning token spans for any identified names.
            </summary>
            <param name="tokens">An array of the tokens or words of the sequence, typically a sentence.</param>
            <returns>An array of spans for each of the names identified.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.Find(System.String[],System.String[][])">
            <summary>
            Generates name tags for the given sequence, typically a sentence, returning token spans for any identified names.
            </summary>
            <param name="tokens">An array of the tokens or words of the sequence, typically a sentence.</param>
            <param name="additionalContext">Features which are based on context outside of the sentence but which should also be used.</param>
            <returns>An array of spans for each of the names identified.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.Utility.TrainingParameters,SharpNL.NameFind.TokenNameFinderFactory)">
            <summary>
            Trains a name finder model.
            </summary>
            <param name="languageCode">The language of the training data.</param>
            <param name="samples">The training samples.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <param name="factory">The name finder factory.</param>
            <returns>the newly <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> trained model.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.Utility.TrainingParameters,SharpNL.NameFind.TokenNameFinderFactory,SharpNL.Monitor)">
            <summary>
            Trains a name finder model.
            </summary>
            <param name="languageCode">The language of the training data.</param>
            <param name="samples">The training samples.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <param name="factory">The name finder factory.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.</param>
            <returns>the newly <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> trained model.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.Train(System.String,System.String,SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.Utility.TrainingParameters,SharpNL.NameFind.TokenNameFinderFactory)">
            <summary>
            Trains a name finder model with the given parameters.
            </summary>
            <param name="languageCode">The language of the training data.</param>
            <param name="type">Overrides the type parameter in the provided samples. This value can be null.</param>
            <param name="samples">The training samples.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <param name="factory">The name finder factory.</param>
            <returns>the newly <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> trained model.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.Train(System.String,System.String,SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.Utility.TrainingParameters,SharpNL.NameFind.TokenNameFinderFactory,SharpNL.Monitor)">
            <summary>
            Trains a name finder model with the given parameters.
            </summary>
            <param name="languageCode">The language of the training data.</param>
            <param name="type">Overrides the type parameter in the provided samples. This value can be null.</param>
            <param name="samples">The training samples.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <param name="factory">The name finder factory.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.</param>
            <returns>the newly <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> trained model.</returns>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderME.Probs(SharpNL.Utility.Span[])">
            <summary>
            Returns an array of probabilities for each of the specified spans which is
            the arithmetic mean of the probabilities for each of the outcomes which
            make up the span.
            </summary>
            <param name="spans">The spans of the names for which probabilities are desired.</param>
            <returns>An array of probabilities for each of the specified spans.</returns>
        </member>
        <member name="P:SharpNL.NameFind.NameFinderME.Probabilities">
            <summary>
            Gets an array with the probabilities of the last decoded sequence.
            The sequence was determined based on the previous call to <see cref="M:Find"/>.
            </summary>
            <value>The probabilities.</value>
        </member>
        <member name="T:SharpNL.NameFind.NameFinderSequenceValidator">
            <summary>
            Validates the sequences from the name finder.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameFinderSequenceValidator.ValidSequence(System.Int32,System.String[],System.String[],System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.
            This is used to restrict invalid sequences such as those used in start/continue tag-based chunking or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">The index in the input sequence for which the new outcome is being proposed.</param>
            <param name="inputSequence">The input sequence.</param>
            <param name="outcomesSequence">The outcomes so far in this sequence.</param>
            <param name="outcome">The next proposed outcome for the outcomes sequence.</param>
            <returns><c>true</c> if the sequence would still be valid with the new outcome, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpNL.NameFind.NameSample">
            <summary>
            Class for holding names for a single unit of text.
            </summary>
        </member>
        <member name="F:SharpNL.NameFind.NameSample.DefaultType">
            <summary>
            The a default type value when there is no type in training data.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.NameFind.NameSample"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.#ctor(System.String[],SharpNL.Utility.Span[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameSample"/> class.
            </summary>
            <param name="sentence">The sentence tokens.</param>
            <param name="names">The name spans.</param>
            <param name="clearAdaptiveData">if set to <c>true</c> adaptive data should be clear.</param>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.#ctor(System.String[],SharpNL.Utility.Span[],System.String[][],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameSample"/> class.
            </summary>
            <param name="sentence">The sentence tokens.</param>
            <param name="names">The name spans.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="clearAdaptiveData">if set to <c>true</c> adaptive data should be clear.</param>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.#ctor(System.String,System.String[],SharpNL.Utility.Span[],System.String[][],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameSample"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="sentence">The sentence tokens.</param>
            <param name="names">The name spans.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="clearAdaptiveData">if set to <c>true</c> adaptive data should be clear.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sentence"/></exception>
            <exception cref="T:System.InvalidOperationException">The name spans are overlapping.</exception>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.Equals(SharpNL.NameFind.NameSample)">
            <summary>
            Determines whether the specified <see cref="T:NameSample"/> is equal to the current <see cref="T:NameSample"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The other <see cref="T:SharpNL.NameFind.NameSample"/> to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:NameSample"/>.
            </returns>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.Parse(System.String,System.Boolean)">
            <summary>
            Parses the specified tagged tokens.
            </summary>
            <param name="taggedTokens">The tagged tokens.</param>
            <param name="ClearAdaptiveData">if set to <c>true</c> the clear adaptive data.</param>
            <returns>The parsed <see cref="T:SharpNL.NameFind.NameSample"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">
            Found unexpected annotation while handling a name sequence: [Token]
            or
            Missing a name type: [Token]
            or
            Found unexpected annotation: [Token]
            </exception>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified tagged tokens.
            </summary>
            <param name="taggedTokens">The tagged tokens.</param>
            <param name="defaultType">The default type.</param>
            <param name="ClearAdaptiveData">if set to <c>true</c> to clear adaptive data.</param>
            <returns>The parsed <see cref="T:SharpNL.NameFind.NameSample"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">
            Found unexpected annotation while handling a name sequence: [Token]
            or
            Missing a name type: [Token]
            or
            Found unexpected annotation: [Token]
            </exception>
        </member>
        <member name="M:SharpNL.NameFind.NameSample.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.NameFind.NameSample.AdditionalContext">
            <summary>
            Gets the additional context.
            </summary>
            <value>The additional context.</value>
        </member>
        <member name="P:SharpNL.NameFind.NameSample.ClearAdaptiveData">
            <summary>
            Gets a value indicating whether adaptive data should be cleared.
            </summary>
            <value><c>true</c> if adaptive data should be cleared; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.NameFind.NameSample.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:SharpNL.NameFind.NameSample.Names">
            <summary>
            Gets the name spans.
            </summary>
            <value>The name spans.</value>
        </member>
        <member name="P:SharpNL.NameFind.NameSample.Sentence">
            <summary>
            Gets the sentence tokens.
            </summary>
            <value>The sentence tokens.</value>
        </member>
        <member name="T:SharpNL.NameFind.NameSampleStream">
            <summary>
            The <see cref="T:SharpNL.NameFind.NameSampleStream"/> class converts tagged strings
            provided by a sample stream to <see cref="T:SharpNL.NameFind.NameSample"/> objects.
            It uses text that is is one-sentence per line and tokenized
            with names identified by <i>&lt;START&gt;</i> and <i>&lt;END&gt;</i> tags.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.NameFind.NameSampleSequenceStream">
            <summary>
            Represents a <seealso cref="T:SharpNL.NameFind.NameSample"/> sequence stream used to train the name finder models.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameSampleSequenceStream"/> class.
            </summary>
            <param name="psi">The sample stream.</param>
            <param name="featureGen">The feature generator.</param>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameSampleSequenceStream"/> class.
            </summary>
            <param name="psi">The sample stream.</param>
            <param name="featureGen">The feature generator.</param>
            <param name="useOutcomes">if set to <c>true</c> will be used in the samples.</param>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.NameFind.INameContextGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameSampleSequenceStream"/> class.
            </summary>
            <param name="psi">The sample stream.</param>
            <param name="pcg">The context generator.</param>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.NameFind.INameContextGenerator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameSampleSequenceStream"/> class using the <seealso cref="T:SharpNL.NameFind.BioCodec"/> as sequence codec.
            </summary>
            <param name="psi">The sample stream.</param>
            <param name="pcg">The context generator.</param>
            <param name="useOutcomes">if set to <c>true</c> will be used in the samples.</param>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.NameFind.NameSample},SharpNL.NameFind.INameContextGenerator,System.Boolean,SharpNL.Utility.ISequenceCodec{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.NameSampleSequenceStream"/> class.
            </summary>
            <param name="psi">The sample stream.</param>
            <param name="pcg">The context generator.</param>
            <param name="useOutcomes">if set to <c>true</c> will be used in the samples.</param>
            <param name="seqCodec">The sequence codec.</param>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.NameSampleSequenceStream.UpdateContext(SharpNL.ML.Model.Sequence,SharpNL.ML.Model.AbstractModel)">
            <summary>
            Creates a new event array based on the outcomes predicted by the specified parameters for the specified sequence.
            </summary>
            <param name="sequence">The sequence to be evaluated.</param>
            <param name="model">The model.</param>
            <returns>The event array.</returns>
        </member>
        <member name="T:SharpNL.NameFind.TokenNameFinderEvaluator">
            <summary>
            The <see cref="T:SharpNL.NameFind.TokenNameFinderEvaluator"/> measures the performance of the given 
            <see cref="T:SharpNL.NameFind.ITokenNameFinder"/> with the provided reference <see cref="T:SharpNL.NameFind.NameSample"/>s.
            </summary>
            <seealso cref="T:SharpNL.NameFind.NameSample"/>
            <seealso cref="T:SharpNL.Utility.Evaluation.Evaluator`2"/>
            <seealso cref="T:SharpNL.NameFind.ITokenNameFinder"/>    
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderEvaluator.#ctor(SharpNL.NameFind.ITokenNameFinder,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.NameFind.NameSample}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderEvaluator"/> with the given <paramref name="nameFinder"/>.
            </summary>
            <param name="nameFinder">The <see cref="T:SharpNL.NameFind.ITokenNameFinder"/> to evaluate.</param>
            <param name="listeners">The evaluation sample listeners.</param>
            <exception cref="T:System.ArgumentNullException">listeners</exception>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderEvaluator.ProcessSample(SharpNL.NameFind.NameSample)">
            <summary>
            Evaluates the given reference sample object.
            The implementation has to update the score after every invocation.
            </summary>
            <param name="reference">The reference sample.</param>
            <returns>The predicted sample</returns>
        </member>
        <member name="T:SharpNL.NameFind.TokenNameFinderFactory">
            <summary>
            Represents a tool factory for the extensions of the name finder.
            </summary>
            <remarks>
            The implementations of this class will work only if they are used during the training.
            </remarks>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderFactory"/> that provides the 
            default implementation of the resources.
            </summary>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderFactory.#ctor(System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderFactory"/> with the given parameters.
            </summary>
            <param name="featureGeneratorBytes">The feature generator bytes.</param>
            <param name="resources">The resources dictionary.</param>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderFactory.#ctor(System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object},SharpNL.Utility.ISequenceCodec{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderFactory"/> with the given parameters.
            </summary>
            <param name="featureGeneratorBytes">The feature generator bytes.</param>
            <param name="resources">The resources dictionary.</param>
            <param name="seqCodec">The sequence codec.</param>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderFactory.CreateContextGenerator">
            <summary>
            Creates the context generator.
            </summary>
            <returns>INameContextGenerator.</returns>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderFactory.CreateFeatureGenerators">
            <summary>
            Creates the <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/>.
            Usually this is a set of generators contained in the <see cref="T:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator"/>.
            </summary>
            <returns>The feature generator or null if there is no descriptor in the model.</returns>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderFactory.CreateSequenceCodec">
            <summary>
            Creates the sequence codec.
            </summary>
            <returns>ISequenceCodec&lt;System.String&gt;.</returns>
        </member>
        <member name="P:SharpNL.NameFind.TokenNameFinderFactory.Resources">
            <summary>
            Gets the resources dictionary.
            </summary>
            <value>The resources dictionary.</value>
        </member>
        <member name="P:SharpNL.NameFind.TokenNameFinderFactory.SequenceCodec">
            <summary>
            Gets the sequence codec.
            </summary>
            <value>The sequence codec.</value>
        </member>
        <member name="P:SharpNL.NameFind.TokenNameFinderFactory.FeatureGenerator">
            <summary>
            Gets feature generator bytes.
            </summary>
            <value>The feature generator bytes.</value>
        </member>
        <member name="T:SharpNL.NameFind.TokenNameFinderModel">
            <summary>
            The <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> is the model used by a learnable <see cref="T:SharpNL.NameFind.ITokenNameFinder"/>.
            </summary>
            <seealso cref="T:SharpNL.NameFind.ITokenNameFinder"/>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> with the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.#ctor(System.String,SharpNL.ML.Model.ISequenceClassificationModel{System.String},System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Utility.ISequenceCodec{System.String},SharpNL.NameFind.TokenNameFinderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="nameFinderModel">The name finder model.</param>
            <param name="generatorDescriptor">The generator descriptor.</param>
            <param name="resources">The resources.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <param name="seqCodec">The sequence codec.</param>
            <param name="factory">The tool factory.</param>
            <exception cref="T:System.InvalidOperationException">Model not compatible with name finder!</exception>
            <exception cref="T:System.InvalidOperationException">Model not compatible with name finder!</exception>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,System.Int32,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Utility.ISequenceCodec{System.String},SharpNL.NameFind.TokenNameFinderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="nameFinderModel">The name finder model.</param>
            <param name="beamSize">Size of the beam.</param>
            <param name="generatorDescriptor">The generator descriptor.</param>
            <param name="resources">The resources.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <param name="sequenceCodec">The sequence codec.</param>
            <param name="factory">The tool factory.</param>
            <exception cref="T:System.InvalidOperationException">Model not compatible with name finder!</exception>
            <exception cref="T:System.InvalidOperationException">Model not compatible with name finder!</exception>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="nameFinderModel">The name finder model.</param>
            <param name="generatorDescriptor">The generator descriptor.</param>
            <param name="resources">The resources.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NameFind.TokenNameFinderModel"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="nameFinderModel">The name finder model.</param>
            <param name="resources">The resources.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.CreateArtifactSerializers">
            <summary>
            Registers all serializers for their artifact file name extensions.
            Override this method to register custom file extensions.
            </summary>
            <remarks>
            The subclasses should invoke the <see cref="M:SharpNL.Utility.Serialization.ArtifactProvider.RegisterArtifactType(System.String,SharpNL.Utility.Serialization.SerializeDelegate,SharpNL.Utility.Serialization.DeserializeDelegate)"/> to register 
            the proper serialization/deserialization methods for an new extension.
            </remarks>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.Init(System.Object,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object},SharpNL.Utility.ISequenceCodec{System.String})">
            <summary>
            Initializes the specified name finder model.
            </summary>
            <param name="nameFinderModel">The name finder model.</param>
            <param name="generatorDescriptor">The generator descriptor.</param>
            <param name="resources">The resources.</param>
            <param name="seqCodec">The seq codec.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.UpdateFeatureGenerator(System.Byte[])">
            <summary>
            Updates the feature generator with the given descriptor.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <returns>A updated <see cref="T:SharpNL.NameFind.ITokenNameFinder"/> model.</returns>
        </member>
        <member name="M:SharpNL.NameFind.TokenNameFinderModel.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts.
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to find the manifest entry.</exception>
            <remarks>Subclasses should generally invoke base.validateArtifactMap at the beginning of this method.</remarks>
        </member>
        <member name="P:SharpNL.NameFind.TokenNameFinderModel.DefaultFactory">
            <summary>
            Gets the default tool factory.
            </summary>
            <returns>The default tool factory.</returns>
        </member>
        <member name="P:SharpNL.NameFind.TokenNameFinderModel.Factory">
            <summary>
            Gets the factory.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:SharpNL.NameFind.TokenNameFinderModel.NameFinderSequenceModel">
            <summary>
            Gets the name finder sequence model.
            </summary>
            <value>The name finder sequence model.</value>
        </member>
        <member name="T:SharpNL.NGram.NGramModel">
            <summary>
            The <seealso cref="T:SharpNL.NGram.NGramModel"/> can be used to crate ngrams and character ngrams.
            </summary>
            <seealso cref="T:SharpNL.Utility.StringList"/>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:SharpNL.NGram.NGramModel"/>.
            </summary>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.NGram.NGramModel"/>.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputStream"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputStream"/> was not readable.
            </exception>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">
            Unable to deserialize the dictionary.
            or
            The count attribute must be set!
            or
            The count attribute '...' must be a number!
            </exception>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.Add(SharpNL.Utility.StringList)">
            <summary>
            Adds one NGram, if it already exists the count increase by one.
            </summary>
            <param name="ngram">The ngram.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ngram"/></exception>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.Add(SharpNL.Utility.StringList,System.Int32,System.Int32)">
            <summary>
            Adds NGrams up to the specified length to the current instance.
            </summary>
            <param name="ngram">The tokens to build the uni-grams, bi-grams, tri-grams, ... from.</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Adds character NGrams to the current instance.
            </summary>
            <param name="chars">The chars.</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.Contains(SharpNL.Utility.StringList)">
            <summary>
            Determines whether the ngrams are contained bu the current instance.
            </summary>
            <param name="ngram">The ngram.</param>
            <returns><c>true</c> if the ngram is contained; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.CutOff(System.Int32,System.Int32)">
            <summary>
            Deletes all ngram which do appear less than the <paramref name="cutoffUnder"/> value 
            and more often than the <paramref name="cutoffOver"/> value.
            </summary>
            <param name="cutoffUnder">The cutoff under.</param>
            <param name="cutoffOver">The cutoff over.</param>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:SharpNL.NGram.NGramModel"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.GetCount(SharpNL.Utility.StringList)">
            <summary>
            Gets the count of the given ngram.
            </summary>
            <param name="ngram">The ngram.</param>
            <returns>count of the ngram or 0 if it is not contained.</returns>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:SharpNL.NGram.NGramModel"/>.
            </returns>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.Remove(SharpNL.Utility.StringList)">
            <summary>
            Removes the specified ngram.
            </summary>
            <param name="ngram">The ngram to remove from the instance.</param>
            <returns><c>true</c> if ngram was successfully removed from the instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.Serialize(System.IO.Stream)">
            <summary>
            Serializes this instance to the given output stream.
            </summary>
            <param name="outputStream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">outputStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not writable.</exception>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.SetCount(SharpNL.Utility.StringList,System.Int32)">
            <summary>
            Sets the count of an existing ngram.
            </summary>
            <param name="ngram">The ngram.</param>
            <param name="count">The count.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The specified ngram does not exist in this instance.</exception>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.ToDictionary">
            <summary>
            Creates a dictionary which contain all <see cref="T:SharpNL.Utility.StringList"/> which 
            are in the current <see cref="T:SharpNL.NGram.NGramModel"/>.
            Entries which are only different in the case are merged into one.
            </summary>
            <returns>A dictionary of the NGrams.</returns>
            <remarks>Calling this method is the same as calling <see cref="M:SharpNL.NGram.NGramModel.ToDictionary(System.Boolean)"/> with false.</remarks>
        </member>
        <member name="M:SharpNL.NGram.NGramModel.ToDictionary(System.Boolean)">
            <summary>
            Creates a dictionary which contains all <see cref="T:SharpNL.Utility.StringList"/>s which
            are in the current <see cref="T:SharpNL.NGram.NGramModel"/>.
            </summary>
            <param name="caseSensitive">Specifies whether case distinctions should be kept in the creation of the dictionary.</param>
            <returns>A dictionary of the NGrams.</returns>
        </member>
        <member name="P:SharpNL.NGram.NGramModel.Count">
            <summary>
            Gets the number of entries in the current instance.
            </summary>
            <value>The number of different grams.</value>
        </member>
        <member name="P:SharpNL.NGram.NGramModel.NumberOfGrams">
            <summary>
            Gets the total count of all NGrams.
            </summary>
            <value>The total count of all NGrams.</value>
        </member>
        <member name="T:SharpNL.Parser.AbstractBottomUpParser">
            <summary>
            Abstract class which contains code to tag and chunk parses for bottom up parsing and
            leaves implementation of advancing parses and completing parses to extend class.
            </summary>
            <remarks>
            The nodes within the returned parses are shared with other parses and therefore their parent 
            node references will not be consistent with their child node reference.
            </remarks>
        </member>
        <member name="T:SharpNL.Parser.IParser">
            <summary>
            Interface for full-syntactic parsers.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.IParser.Parse(SharpNL.Parser.Parse,System.Int32)">
            <summary>
            Returns the specified number of parses or fewer for the specified tokens.
            </summary>
            <param name="tokens">A parse containing the tokens with a single parent node.</param>
            <param name="numParses">The number of parses desired.</param>
            <returns>The specified number of parses for the specified tokens.</returns>
            <remarks>
            The nodes within the returned parses are shared with other parses and therefore their 
            parent node references will not be consistent with their child node reference. 
            <see cref="P:SharpNL.Parser.Parse.Parent"/> can be used to make the parents consistent with a 
            particular parse, but subsequent calls to this property can invalidate the results of earlier
            calls.
            </remarks>
        </member>
        <member name="M:SharpNL.Parser.IParser.Parse(SharpNL.Parser.Parse)">
            <summary>
            Returns a parse for the specified parse of tokens.
            </summary>
            <param name="tokens">The root node of a flat parse containing only tokens.</param>
            <returns>A full parse of the specified tokens or the flat chunks of the tokens if a full parse could not be found.</returns>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.TOP_NODE">
            <summary>
            The label for the top node.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.INC_NODE">
            <summary>
            The label for the top if an incomplete node.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.TOK_NODE">
            <summary>
            The label for a token node.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.START">
            <summary>
            Prefix for outcomes starting a constituent.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.CONT">
            <summary>
            Prefix for outcomes continuing a constituent.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.OTHER">
            <summary>
            Outcome for token which is not contained in a basal constituent.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.COMPLETE">
            <summary>
            Outcome used when a constituent is complete.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.INCOMPLETE">
            <summary>
            Outcome used when a constituent is incomplete.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.ZERO">
            <summary>
            The integer 0.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.DefaultAdvancePercentage">
            <summary>
            The default amount of probability mass required of advanced outcomes.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.DefaultBeamSize">
            <summary>
            The default beam size used if no beam size is given.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.M">
            <summary>
            The maximum number of parses advanced from all preceding parses at each derivation step.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.K">
            <summary>
            The maximum number of parses to advance from a single preceding parse.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.Q">
            <summary>
             The minimum total probability mass of advanced outcomes.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.completeParses">
            <summary>
            Completed parses.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.odh">
            <summary>
            Incomplete parses which will be advanced.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.ndh">
            <summary>
            Incomplete parses which have been advanced.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.headRules">
            <summary>
            The head rules for the parser.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.punctSet">
            <summary>
            The set strings which are considered punctuation for the parser.
            </summary>
            <remarks>
            Punctuation is not attached, but floats to the top of the parse as attachment
            decisions are made about its non-punctuation sister nodes.
            </remarks>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.tagger">
            <summary>
            The pos-tagger that the parser uses.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.chunker">
            <summary>
            The chunker that the parser uses to chunk non-recursive structures.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.AbstractBottomUpParser.createDerivationString">
            <summary>
            Specifies whether a derivation string should be created during parsing.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.#ctor(SharpNL.POSTag.IPOSTagger,SharpNL.Chunker.IChunker,SharpNL.Parser.AbstractHeadRules,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.AbstractBottomUpParser"/>.
            </summary>
            <param name="tagger">The pos-tagger that the parser uses.</param>
            <param name="chunker">The chunker that the parser uses to chunk non-recursive structures.</param>
            <param name="headRules">The head rules for the parser.</param>
            <param name="beamSize">Size of the beam.</param>
            <param name="advancePercentage">The advance percentage.</param>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.AdvanceChunks(SharpNL.Parser.Parse,System.Double)">
            <summary>
            Returns the top chunk sequences for the specified parse.
            </summary>
            <param name="p">A pos-tag assigned parse.</param>
            <param name="minChunkScore">A minimum score below which chunks should not be advanced.</param>
            <returns>The top chunk assignments to the specified parse.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.AdvanceParses(SharpNL.Parser.Parse,System.Double)">
            <summary>
            Advances the specified parse and returns the an array advanced parses whose probability accounts for
            more than the specified amount of probability mass.
            </summary>
            <param name="p">The parse to advance.</param>
            <param name="probMass">The amount of probability mass that should be accounted for by the advanced parses.</param>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.AdvanceTags(SharpNL.Parser.Parse)">
            <summary>
            Advances the parse by assigning it POS tags and returns multiple tag sequences.
            </summary>
            <param name="p">The parse to be tagged.</param>
            <returns>Parses with different POS-tag sequence assignments.</returns>
            <exception cref="T:System.InvalidOperationException">No tag sequence.</exception>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.AdvanceTop(SharpNL.Parser.Parse)">
            <summary>
            Adds the "TOP" node to the specified parse.
            </summary>
            <param name="parse">The complete parse.</param>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.BuildDictionary(SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,SharpNL.Utility.TrainingParameters)">
            <summary>
            Creates a n-gram dictionary from the specified data stream using the specified head rule and specified cut-off.
            </summary>
            <param name="data">The data stream of parses.</param>
            <param name="rules">The head rules for the parses.</param>
            <param name="parameters">Can contain a cutoff, the minimum number of entries required for the n-gram to be saved as part of the dictionary.</param>
            <returns>A dictionary object.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.CollapsePunctuation(SharpNL.Parser.Parse[],System.Collections.Generic.List{System.String})">
            <summary>
            Removes the punctuation from the specified set of chunks, adds it to the parses
            adjacent to the punctuation is specified, and returns a new array of parses with the punctuation.
            </summary>
            <param name="chunks">A set of parses.</param>
            <param name="punctSet">The set of punctuation which is to be removed.</param>
            <returns>An array of parses which is a subset of chunks with punctuation removed.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.MapParseIndex(System.Int32,SharpNL.Parser.Parse[],SharpNL.Parser.Parse[])">
            <summary>
            Determines the mapping between the specified index into the specified parses without punctuation to
            the corresponding index into the specified parses.
            </summary>
            <param name="index">An index into the parses without punctuation.</param>
            <param name="nonPunctParses">The parses without punctuation.</param>
            <param name="parses">The parses wit punctuation.</param>
            <returns>An index into the specified parses which corresponds to the same node the specified index into the parses with punctuation.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.Parse(SharpNL.Parser.Parse,System.Int32)">
            <summary>
            Returns the specified number of parses or fewer for the specified tokens.
            </summary>
            <param name="tokens">A parse containing the tokens with a single parent node.</param>
            <param name="numParses">The number of parses desired.</param>
            <returns>The specified number of parses for the specified tokens.</returns>
            <remarks>
            The nodes within the returned parses are shared with other parses and therefore their 
            parent node references will not be consistent with their child node reference. 
            <see cref="P:SharpNL.Parser.Parse.Parent"/> can be used to make the parents consistent with a 
            particular parse, but subsequent calls to this property can invalidate the results of earlier
            calls.
            </remarks>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.Parse(SharpNL.Parser.Parse)">
            <summary>
            Returns a parse for the specified parse of tokens.
            </summary>
            <param name="tokens">The root node of a flat parse containing only tokens.</param>
            <returns>A full parse of the specified tokens or the flat chunks of the tokens if a full parse could not be found.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractBottomUpParser.SetParents(SharpNL.Parser.Parse)">
            <summary>
            Assigns parent references for the specified parse so that they
            are consistent with the children references.
            </summary>
            <param name="p">The parse whose parent references need to be assigned.</param>
        </member>
        <member name="P:SharpNL.Parser.AbstractBottomUpParser.ReportFailedParse">
            <summary>
            Gets or sets a value indicating whether the parser should report when it was unable to 
            find a parse for a particular sentence.
            </summary>
            <value>if <c>true</c> then un-parsed sentences are reported; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.Parser.AbstractContextGenerator">
            <summary>
            Abstract class containing many of the methods used to generate contexts for parsing.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.AbstractContextGenerator.Punct(SharpNL.Parser.Parse,System.Int32)">
            <summary>
            Creates punctuation feature for the specified punctuation at the specified index based on the punctuation mark.
            </summary>
            <param name="punctuation">The punctuation which is in context.</param>
            <param name="index">The index of the punctuation with relative to the parse.</param>
            <returns>Punctuation feature for the specified parse and the specified punctuation at the specified index.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractContextGenerator.PunctBo(SharpNL.Parser.Parse,System.Int32)">
            <summary>
            Creates punctuation feature for the specified punctuation at the specfied index based on the punctuation's tag.
            </summary>
            <param name="punctuation">The punctuation which is in context.</param>
            <param name="index">The index of the punctuation relative to the parse.</param>
            <returns>Punctuation feature for the specified parse and the specified punctuation at the specfied index.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractContextGenerator.Production(SharpNL.Parser.Parse,System.Boolean)">
            <summary>
            Generates a string representing the grammar rule production that the specified parse is starting.
            </summary>
            <param name="p">The parse which stats teh production.</param>
            <param name="includePunctuation">if set to <c>true</c> punctuation will be included in the production.</param>
            <returns>A string representing the grammar rule production that the specified parse is starting</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractContextGenerator.Cons3(System.Collections.Generic.List{System.String},SharpNL.Parser.Cons,SharpNL.Parser.Cons,SharpNL.Parser.Cons,System.Collections.Generic.SortedSet{SharpNL.Parser.Parse},System.Collections.Generic.SortedSet{SharpNL.Parser.Parse},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates cons features involving the 3 specified nodes and adds them to the specified feature list.
            </summary>
            <param name="features">The list of features.</param>
            <param name="c0">The first node.</param>
            <param name="c1">The second node.</param>
            <param name="c2">The third node.</param>
            <param name="punct1s">The punctuation between the first and second node.</param>
            <param name="punct2s">The punctuation between the second and third node.</param>
            <param name="trigram">Specifies whether lexical tri-gram features between these nodes should be generated.</param>
            <param name="bigram1">Specifies whether lexical bi-gram features between the first and second node should be generated.</param>
            <param name="bigram2">Specifies whether lexical bi-gram features between the second and third node should be generated.</param>
        </member>
        <member name="M:SharpNL.Parser.AbstractContextGenerator.Surround(SharpNL.Parser.Parse,System.Int32,System.String,System.Collections.Generic.SortedSet{SharpNL.Parser.Parse},System.Collections.Generic.List{System.String})">
            <summary>
            Generates features for nodes surrounding a completed node of the specified type.
            </summary>
            <param name="node">A surrounding node.</param>
            <param name="i">The index of the surrounding node with respect to the completed node.</param>
            <param name="type">The type of the completed node.</param>
            <param name="punctuation">The punctuation adjacent and between the specified surrounding node.</param>
            <param name="features">A list to which features are added.</param>
        </member>
        <member name="M:SharpNL.Parser.AbstractContextGenerator.CheckCons(SharpNL.Parser.Parse,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Produces features to determine whether the specified child node is part of
            a complete constituent of the specified type and adds those features to the
            specified list.
            </summary>
            <param name="child">The parse node to consider.</param>
            <param name="i">A string indicating the position of the child node.</param>
            <param name="type">The type of constituent being built.</param>
            <param name="features">List to add features to.</param>
        </member>
        <member name="M:SharpNL.Parser.AbstractContextGenerator.GetFrontierNodes(System.Collections.Generic.List{SharpNL.Parser.Parse},SharpNL.Parser.Parse[])">
            <summary>
            Populates specified nodes array with left-most right frontier 
            node with a unique head. If the right frontier doesn't contain
            enough nodes, then nulls are placed in the array elements.
            </summary>
            <param name="rf">The current right frontier.</param>
            <param name="nodes">The array to be populated.</param>
        </member>
        <member name="T:SharpNL.Parser.AbstractHeadRule">
            <summary>
            Represents an abstract head rule.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.AbstractHeadRule.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:AbstractHeadRule"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Parser.AbstractHeadRule.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SharpNL.Parser.AbstractParserEventStream">
            <summary>
            Abstract class extended by parser event streams which perform tagging and chunking.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.AbstractParserEventStream.AddParseEvents(System.Collections.Generic.List{SharpNL.ML.Model.Event},SharpNL.Parser.Parse[])">
            <summary>
            Produces all events for the specified sentence chunks and adds them to the specified list.
            </summary>
            <param name="parseEvents">A list of events to be added to.</param>
            <param name="chunks">Pre-chunked constituents of a sentence.</param>
        </member>
        <member name="M:SharpNL.Parser.AbstractParserEventStream.CreateEvents(SharpNL.Parser.Parse)">
            <summary>
            Creates events for the provided sample.
            </summary>
            <param name="sample">The sample the sample for which training <see cref="T:Event"/>s are be created.</param>
            <returns>The events enumerator.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractParserEventStream.LastChild(SharpNL.Parser.Parse,SharpNL.Parser.Parse)">
            <summary>
            Returns true if the specified child is the last child of the specified parent.
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
            <returns><c>true</c> if the specified child is the last child of the specified parent, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SharpNL.Parser.AbstractParserEventStream.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:SharpNL.Parser.AbstractParserEventStream.Punctuation">
            <summary>
            Gets or sets the punctuation list.
            </summary>
            <value>The punctuation list.</value>
        </member>
        <member name="P:SharpNL.Parser.AbstractParserEventStream.Rules">
            <summary>
            Gets the head rules.
            </summary>
            <value>The head rules.</value>
        </member>
        <member name="P:SharpNL.Parser.AbstractParserEventStream.Type">
            <summary>
            Gets the parser event type.
            </summary>
            <value>The parser event type.</value>
        </member>
        <member name="T:SharpNL.Parser.ChunkContextGenerator">
            <summary>
            Creates predictive context for the pre-chunking phases of parsing.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.ChunkContextGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ChunkContextGenerator"/> class without cache.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.ChunkContextGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ChunkContextGenerator"/> class with the specified cache size.
            </summary>
            <param name="cacheSize">Size of the cache.</param>
        </member>
        <member name="M:SharpNL.Parser.ChunkContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.Object[])">
            <summary>Gets the context for the specified position in the specified sequence (list).</summary>
            <param name="index">The index of the sequence.</param>
            <param name="sequence">The sequence of items over which the beam search is performed.</param>
            <param name="priorDecisions">The sequence of decisions made prior to the context for which this decision is being made.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The context for the specified position in the specified sequence.</returns>
        </member>
        <member name="M:SharpNL.Parser.ChunkContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.String[])">
            <summary>
            Gets the contexts for chunking of the specified index.
            </summary>
            <param name="index">The index of the token in the specified tokens array for which the context should be constructed.</param>
            <param name="tokens">The tokens of the sentence. The <code>ToString</code> methods of these objects should return the token text.</param>
            <param name="tags">The POS tags for the the specified tokens.</param>
            <param name="prevDecisions">The previous decisions made in the tagging of this sequence.</param>
            <returns>An array of predictive contexts on which a model basis its decisions.</returns>
        </member>
        <member name="M:SharpNL.Parser.ChunkContextGenerator.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="T:SharpNL.Parser.Chunking.BuildContextGenerator">
            <summary>
            Class to generator predictive contexts for deciding how constituents should be combined together.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Chunking.BuildContextGenerator.GetContext(SharpNL.Parser.Parse[],System.Int32)">
            <summary>
            Returns the predictive context used to determine how constituent at the specified index
            should be combined with other constituents.
            </summary>
            <param name="constituents">The constituents which have yet to be combined into new constituents.</param>
            <param name="index">The index of the constituent which is being considered.</param>
            <returns>The context for building constituents at the specified index.</returns>
        </member>
        <member name="T:SharpNL.Parser.Chunking.CheckContextGenerator">
            <summary>
            Class for generating predictive context for deciding when a constituent is complete.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Chunking.CheckContextGenerator.GetContext(SharpNL.Parser.Parse[],System.String,System.Int32,System.Int32)">
            <summary>
            Gets the predictive context for deciding whether the specified constituents between the specified start and end index
            can be combined to form a new constituent of the specified type.
            </summary>
            <param name="constituents">The constituents which have yet to be combined into new constituents.</param>
            <param name="type">The type of the new constituent proposed.</param>
            <param name="start">The first constituent of the proposed constituent.</param>
            <param name="end">The last constituent of the proposed constituent.</param>
            <returns>The predictive context for deciding whether a new constituent should be created.</returns>
        </member>
        <member name="T:SharpNL.Parser.Chunking.Parser">
            <summary>
            Class for a shift reduce style parser based on Adwait Ratnaparkhi's 1998 thesis.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Chunking.Parser.#ctor(SharpNL.POSTag.IPOSTagger,SharpNL.Chunker.IChunker,SharpNL.Parser.AbstractHeadRules,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.AbstractBottomUpParser"/>.
            </summary>
            <param name="tagger">The pos-tagger that the parser uses.</param>
            <param name="chunker">The chunker that the parser uses to chunk non-recursive structures.</param>
            <param name="headRules">The head rules for the parser.</param>
            <param name="beamSize">Size of the beam.</param>
            <param name="advancePercentage">The advance percentage.</param>
        </member>
        <member name="M:SharpNL.Parser.Chunking.Parser.AdvanceParses(SharpNL.Parser.Parse,System.Double)">
            <summary>
            Advances the specified parse and returns the an array advanced parses whose probability accounts for
            more than the specified amount of probability mass.
            </summary>
            <param name="p">The parse to advance.</param>
            <param name="probMass">The amount of probability mass that should be accounted for by the advanced parses.</param>
        </member>
        <member name="M:SharpNL.Parser.Chunking.Parser.AdvanceTop(SharpNL.Parser.Parse)">
            <summary>
            Adds the "TOP" node to the specified parse.
            </summary>
            <param name="parse">The complete parse.</param>
        </member>
        <member name="M:SharpNL.Parser.Chunking.Parser.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,System.Int32,System.Int32)">
            <summary>
            Trains a parser model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="rules">The head rules.</param>
            <param name="iterations">The number of training iterations.</param>
            <param name="cutoff">The min number of times a feature must be seen.</param>
            <returns>The trained <see cref="T:SharpNL.Parser.ParserModel"/> object.</returns>
        </member>
        <member name="M:SharpNL.Parser.Chunking.Parser.Train(SharpNL.Monitor,System.String,SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,System.Int32,System.Int32)">
            <summary>
            Trains a parser model with the given parameters.
            </summary>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="rules">The head rules.</param>
            <param name="iterations">The number of training iterations.</param>
            <param name="cutoff">The min number of times a feature must be seen.</param>
            <returns>The trained <see cref="T:SharpNL.Parser.ParserModel"/> object.</returns>
        </member>
        <member name="M:SharpNL.Parser.Chunking.Parser.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,SharpNL.Utility.TrainingParameters)">
            <summary>
            Trains a parser model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="rules">The head rules.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <returns>The trained <see cref="T:SharpNL.Parser.ParserModel"/> object.</returns>
        </member>
        <member name="M:SharpNL.Parser.Chunking.Parser.Train(SharpNL.Monitor,System.String,SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,SharpNL.Utility.TrainingParameters)">
            <summary>
            Trains a parser model with the given parameters.
            </summary>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="rules">The head rules.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <returns>The trained <see cref="T:SharpNL.Parser.ParserModel"/> object.</returns>
        </member>
        <member name="M:SharpNL.Parser.Chunking.ParserEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,SharpNL.Parser.ParserEventTypeEnum)">
            <summary>
            Create an event stream based on the specified data stream of the specified type using the specified head rules.
            </summary>
            <param name="samples">A 1-parse-per-line Penn Treebank Style parse.</param>
            <param name="rules">The head rules.</param>
            <param name="eType">The type of events desired (tag, chunk, build, or check).</param>
        </member>
        <member name="M:SharpNL.Parser.Chunking.ParserEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,SharpNL.Parser.ParserEventTypeEnum,SharpNL.Dictionary.Dictionary)">
            <summary>
            Create an event stream based on the specified data stream of the specified type using the specified head rules.
            </summary>
            <param name="samples">A 1-parse-per-line Penn Treebank Style parse.</param>
            <param name="rules">The head rules.</param>
            <param name="eType">The type of events desired (tag, chunk, build, or check).</param>
            <param name="dictionary">A tri-gram dictionary to reduce feature generation.</param>
        </member>
        <member name="M:SharpNL.Parser.Chunking.ParserEventStream.AddParseEvents(System.Collections.Generic.List{SharpNL.ML.Model.Event},SharpNL.Parser.Parse[])">
            <summary>
            Adds events for parsing (post tagging and chunking to the specified list of events for the specified parse chunks.
            </summary>
            <param name="parseEvents">The events for the specified chunks.</param>
            <param name="chunks">The incomplete parses to be parsed.</param>
        </member>
        <member name="M:SharpNL.Parser.Chunking.ParserEventStream.FirstChild(SharpNL.Parser.Parse,SharpNL.Parser.Parse)">
            <summary>
            Checks if the specified child is the first child of the specified parent.
            </summary>
            <param name="child">The child parse.</param>
            <param name="parent">The parent parse.</param>
            <returns><c>true</c> if the specified child is the first child of the specified parent, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Parser.ChunkSampleStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.Chunker.ChunkSample"/>. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next <see cref="T:SharpNL.Chunker.ChunkSample"/> or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Parser.Cons">
            <summary>
            Holds feature information about a specific parse node.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Cons.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.Cons"/> struct.
            </summary>
            <param name="cons">The cons.</param>
            <param name="consbo">The consbo.</param>
            <param name="index">The index.</param>
            <param name="unigram">if set to <c>true</c> [unigram].</param>
        </member>
        <member name="T:SharpNL.Parser.Constituent">
            <summary>
            Class used to hold constituents when reading parses.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Constituent.#ctor(System.String,SharpNL.Utility.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.Constituent"/>.
            </summary>
            <param name="label">The label.</param>
            <param name="span">The span.</param>
        </member>
        <member name="P:SharpNL.Parser.Constituent.Label">
            <summary>
            Gets or sets the label of the constituent.
            </summary>
            <value>The label of the constituent.</value>
        </member>
        <member name="P:SharpNL.Parser.Constituent.Span">
            <summary>
            Gets the span of the constituent.
            </summary>
            <value>The span of the constituent.</value>
        </member>
        <member name="T:SharpNL.Parser.IGapLabeler">
            <summary>
            Interface for labeling nodes which contain traces so that these traces can be predicted by the parser.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.IGapLabeler.LabelGaps(System.Collections.Generic.Stack{SharpNL.Parser.Constituent})">
            <summary>
            Labels the constituents found in the stack with gap labels if appropriate.
            </summary>
            <param name="list">The list of un-completed constituents.</param>
        </member>
        <member name="T:SharpNL.Parser.AbstractHeadRules">
            <summary>
            Abstract class for encoding the head rules associated with parsing.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.AbstractHeadRules.GetHead(SharpNL.Parser.Parse[],System.String)">
            <summary>
            Returns the head constituent for the specified constituents of the specified type.
            </summary>
            <param name="constituents">The constituents which make up a constituent of the specified type.</param>
            <param name="type">The type of a constituent which is made up of the specified constituents.</param>
            <returns>The constituent which is the head.</returns>
        </member>
        <member name="M:SharpNL.Parser.AbstractHeadRules.Serialize(System.IO.StreamWriter)">
            <summary>
            Writes the head rules to the writer in a format suitable for loading
            the head rules again with the constructor. The encoding must be
            taken into account while working with the writer and reader.
            </summary>
            <param name="writer">The stream writer.</param>
            <remarks>
            After the entries have been written, the writer is flushed. 
            The writer remains open after this method returns.
            </remarks>
        </member>
        <member name="M:SharpNL.Parser.AbstractHeadRules.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:AbstractHeadRules"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Parser.AbstractHeadRules.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SharpNL.Parser.AbstractHeadRules.PunctuationTags">
            <summary>
            Gets the set of punctuation tags.
            Attachment decisions for these tags will not be modeled.
            </summary>
            <returns>The list of punctuation tags.</returns>
        </member>
        <member name="T:SharpNL.Parser.Lang.en.HeadRule">
            <summary>
            Represents an english head rule.
            </summary>
        </member>
        <member name="T:SharpNL.Parser.Lang.en.HeadRules">
            <summary>
            Class HeadRules.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Lang.en.HeadRules.GetHead(SharpNL.Parser.Parse[],System.String)">
            <summary>
            Returns the head constituent for the specified constituents of the specified type.
            </summary>
            <param name="constituents">The constituents which make up a constituent of the specified type.</param>
            <param name="type">The type of a constituent which is made up of the specified constituents.</param>
            <returns>The constituent which is the head.</returns>
        </member>
        <member name="M:SharpNL.Parser.Lang.en.HeadRules.GetPunctuationTags">
            <summary>
            Returns the set of punctuation tags.
            Attachment decisions for these tags will not be modeled.
            </summary>
            <returns>The list of punctuation tags.</returns>
        </member>
        <member name="M:SharpNL.Parser.Lang.en.HeadRules.LabelGaps(System.Collections.Generic.Stack{SharpNL.Parser.Constituent})">
            <summary>
            Labels the constituents found in the stack with gap labels if appropriate.
            </summary>
            <param name="list">The list of un-completed constituents.</param>
        </member>
        <member name="T:SharpNL.Parser.Parse">
            <summary>
            Data structure for holding parse constituents.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.Parse.typePattern">
            <summary>
            The pattern used to find the base constituent label of a Penn Treebank labeled constituent.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.Parse.funTypePattern">
            <summary>
            The pattern used to find the function tags.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.Parse.tokenPattern">
            <summary>
            The patter used to identify tokens in Penn Treebank labeled constituents.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Parse.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Parser.Parse"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Parse.#ctor(System.String,SharpNL.Utility.Span,System.String,System.Double,System.Int32)">
            <summary>
            Creates a new parse node for this specified text and span of the specified type
            with the specified probability and the specified head index.
            </summary>
            <param name="text">The text of the sentence for which this node is a part of.</param>
            <param name="span">The character offsets for this node within the specified text.</param>
            <param name="type">The constituent label of this node.</param>
            <param name="probability">The probability of this parse.</param>
            <param name="headIndex">The token index of the head of this parse.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.#ctor(System.String,SharpNL.Utility.Span,System.String,System.Double,SharpNL.Parser.Parse)">
            <summary>
            Creates a new parse node for this specified text and span of the specified type 
            with the specified probability and the specified head and head index.
            </summary>
            <param name="text">The text of the sentence for which this node is a part of.</param>
            <param name="span">The character offsets for this node within the specified text.</param>
            <param name="type">The constituent label of this node.</param>
            <param name="probability">The probability of this parse.</param>
            <param name="head">The head token of this parse.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.Add(SharpNL.Parser.Parse,SharpNL.Parser.IHeadRules)">
            <summary>
            Adds the specified daughter.
            </summary>
            <param name="daughter">The daughter.</param>
            <param name="rules">The rules.</param>
            <exception cref="T:System.InvalidOperationException">The head is null.</exception>
        </member>
        <member name="M:SharpNL.Parser.Parse.AddNames(System.String,SharpNL.Utility.Span[],SharpNL.Parser.Parse[])">
            <summary>
            Adds named entities.
            </summary>
            <param name="tag">The tag.</param>
            <param name="names">The names.</param>
            <param name="tokens">The tokens.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.AddPreviousPunctuation(SharpNL.Parser.Parse)">
            <summary>
            Designates that the specified punctuation should is prior to this parse.
            </summary>
            <param name="punct">The punctuation.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.AddProbability(System.Double)">
            <summary>
            Adds the specified probability log to this current log for this parse.
            </summary>
            <param name="logProb">The probability of an action performed on this parse.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.AddNextPunctuation(SharpNL.Parser.Parse)">
            <summary>
            Designates that the specified punctuation follows this parse.
            </summary>
            <param name="punctuation">The punctuation set.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.AdJoin(SharpNL.Parser.Parse,SharpNL.Parser.IHeadRules)">
            <summary>
            Sister adjoins this node's last child and the specified sister node and returns their
            new parent node. The new parent node replace this nodes last child.
            </summary>
            <param name="sister">The node to be adjoined.</param>
            <param name="rules">The head rules for the parser.</param>
            <returns>The new parent node of this node and the specified sister node.</returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.Clone(SharpNL.Parser.Parse)">
            <summary>
            Clones the right frontier of parse up to the specified node.
            </summary>
            <param name="node">The last node in the right frontier of the parse tree which should be cloned.</param>
            <returns>A clone of this parse and its right frontier up to and including the specified node.</returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.CloneRoot(SharpNL.Parser.Parse,System.Int32)">
            <summary>
            Clones the right frontier of this root parse up to and including the specified node.
            </summary>
            <param name="node">The last node in the right frontier of the parse tree which should be cloned.</param>
            <param name="parseIndex">The child index of the parse for this root node.</param>
            <returns>A clone of this root parse and its right frontier up to and including the specified node.</returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.CompareTo(SharpNL.Parser.Parse)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Parser.Parse.ExpandTopNode(SharpNL.Parser.Parse)">
            <summary>
            Expands the top node.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.FixPossessives(SharpNL.Parser.Parse)">
            <summary>
            Fixes the possessives from the given <paramref name="parse"/>.
            </summary>
            <param name="parse">The parse.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.GetCodeTree(SharpNL.Parser.Parse)">
            <summary>
            Gets a representation of the specified parse which contains hash codes so 
            that parent/child relationships can be explicitly seen.
            </summary>
            <param name="parse">The parse.</param>
            <returns>A representation of the specified parse.</returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.GetCommonParent(SharpNL.Parser.Parse)">
            <summary>
            Gets the deepest shared parent of this node and the specified node.
            If the nodes are identical then their parent is returned.
            If one node is the parent of the other then the parent node is returned.
            </summary>
            <param name="node">The node from which parents are compared to this node's parents.</param>
            <returns>The deepest shared parent of this node and the specified node.</returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Parse"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.GetTagNodes">
            <summary>
            Gets the parse nodes which are children of this node and which are pos tags.
            </summary>
            <returns>The parse nodes which are children of this node and which are pos tags.</returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.GetToken(System.String)">
            <summary>
            Returns the string containing the token for the specified portion of the parse string or
            null if the portion of the parse string does not represent a token.
            </summary>
            <param name="rest">The portion of the parse string remaining to be processed.</param>
            <returns>
            The string containing the token for the specified portion of the parse string or
            null if the portion of the parse string does not represent a token.
            </returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.Insert(SharpNL.Parser.Parse)">
            <summary>
            Inserts the specified constituent into this parse based on its text span. 
            This method assumes that the specified constituent can be inserted into this parse.
            </summary>
            <param name="constituent">The constituent to be inserted.</param>
            <exception cref="T:System.InvalidOperationException">Inserting constituent not contained in the sentence!</exception>
        </member>
        <member name="M:SharpNL.Parser.Parse.ParseParse(System.String)">
            <summary>
            Parses the specified tree-bank style parse string and return a Parse structure for that string.
            </summary>
            <param name="parse">A tree-bank style parse string.</param>
            <returns>A <see cref="T:SharpNL.Parser.Parse"/> structure for the specified tree-bank style parse string.</returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.ParseParse(System.String,SharpNL.Parser.IGapLabeler)">
            <summary>
            Parses the specified tree-bank style parse string and return a Parse structure for that string.
            </summary>
            <param name="parse">A tree-bank style parse string.</param>
            <param name="gl">The gap labeler.</param>
            <returns>A <see cref="T:SharpNL.Parser.Parse"/> structure for the specified tree-bank style parse string.</returns>
        </member>
        <member name="M:SharpNL.Parser.Parse.PurneParse(SharpNL.Parser.Parse)">
            <summary>
            Prune the specified sentence parse of vacuous productions.
            </summary>
            <param name="parse">The sentence parse to be purned.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.SetChild(System.Int32,System.String)">
            <summary>
            Replaces the child at the specified index with a new child with the specified label.
            </summary>
            <param name="index">The index of the child to be replaced.</param>
            <param name="label">The label to be assigned to the new child.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.Remove(System.Int32)">
            <summary>
            Removes a part with the specified index.
            </summary>
            <param name="index">The part index.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.Show(System.Text.StringBuilder)">
            <summary>
            Appends the specified string buffer with a string representation of this parse.
            </summary>
            <param name="sb">A string buffer into which the parse string can be appended.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.UpdateHeads(SharpNL.Parser.IHeadRules)">
            <summary>
            Computes the head parses for this parse and its sub-parses and stores this information 
            in the parse data structure.
            </summary>
            <param name="rules">The head rules which determine how the head of the parse is computed.</param>
        </member>
        <member name="M:SharpNL.Parser.Parse.UpdateSpan">
            <summary>
            Updates the span object using the current parts.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.Parse.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Parser.Parse.ChildCount">
            <summary>
            Gets the number of children for this parse node.
            </summary>
            <value>The number of children for this parse node.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Children">
            <summary>
            Gets the children constituents.
            </summary>
            <value>The children constituents.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Complete">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpNL.Parser.Parse"/> is complete.
            </summary>
            <value><c>true</c> if the parse contains a single top-most node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.CoveredText">
            <summary>
            Gets the covered text by the current span.
            </summary>
            <value>The covered text by the current span.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Derivation">
            <summary>
            Gets or sets the derivation string for this parse if one has been created.
            </summary>
            <value>The derivation string for this parse or null if no derivation string has been created.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Head">
            <summary>
            Gets the head constituent associated with this constituent.
            </summary>
            <value>The head constituent associated with this constituent.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.HeadIndex">
            <summary>
            Gets the index within a sentence of the head token for this parse.
            </summary>
            <value>The index within a sentence of the head token for this parse.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.IsChunk">
            <summary>
            Gets or sets a value indicating whether this instance is chunk.
            </summary>
            <value><c>true</c> if this instance is chunk; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.IsFlat">
            <summary>
            Gets a value indicating whether this constituent contains no sub-constituents.
            </summary>
            <value><c>true</c> if this constituent contains no sub-constituents; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.IsPosTag">
            <summary>
            Gets a value indicating whether this instance is position tag.
            </summary>
            <value><c>true</c> if this instance is position tag; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Label">
            <summary>
            Gets or sets the label assigned to this parse node during parsing
            which specifies how this node will be formed into a constituent.
            </summary>
            <value>The outcome label assigned to this node during parsing.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.NextPunctuationSet">
            <summary>
            Gets or sets the set of punctuation tags which follow this parse.
            </summary>
            <value>The set of punctuation tags which follow this parse.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Parent">
            <summary>
            Gets or sets the parent parse node for this constituent.
            </summary>
            <value>The parent parse node for this constituent.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.PreviousPunctuationSet">
            <summary>
            Gets or sets the set of punctuation parses that occur immediately before this parse.
            </summary>
            <value>The set of punctuation parses that occur immediately before this parse.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Probability">
            <summary>
            Gets the log of the product of the probability associated with all the decisions which formed this constituent.
            </summary>
            <value>The log of the product of the probability associated with all the decisions which formed this constituent.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Span">
            <summary>
            Gets the character offsets for this constituent.
            </summary>
            <value>The the character offsets for this constituent.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Text">
            <summary>
            Gets the text of the sentence over which this parse was formed.
            </summary>
            <value>The text of the sentence over which this parse was formed.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.Item(System.Int32)">
            <summary>
            Gets the child <see cref="T:SharpNL.Parser.Parse"/> at the specified index.
            </summary>
            <param name="index">The child index.</param>
            <returns>The child <see cref="T:SharpNL.Parser.Parse"/> object.</returns>
        </member>
        <member name="P:SharpNL.Parser.Parse.Type">
            <summary>
            Gets or sets the type of this constituent to the specified type.
            </summary>
            <value>The type of this constituent to the specified type.</value>
        </member>
        <member name="P:SharpNL.Parser.Parse.UseFunctionTags">
            <summary>
            Specifies whether constituent labels should include parts specified after minus character.
            </summary>
            <value><c>true</c> if they should be included; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharpNL.Parser.ParserChunkerSequenceValidator.ValidSequence(System.Int32,System.String[],System.String[],System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.
            This is used to restrict invalid sequences such as those used in start/continue tag-based chunking or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">The index in the input sequence for which the new outcome is being proposed.</param>
            <param name="inputSequence">The input sequence.</param>
            <param name="outcomesSequence">The outcomes so far in this sequence.</param>
            <param name="outcome">The next proposed outcome for the outcomes sequence.</param>
            <returns><c>true</c> if the sequence would still be valid with the new outcome, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpNL.Parser.ParserEvaluator">
            <summary>
            Parser Evaluator.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.ParserEvaluator.GetConstituencySpans(SharpNL.Parser.Parse)">
            <summary>
            Obtain <see cref="T:SharpNL.Utility.Span"/>s for every parse in the sentence.
            </summary>
            <param name="parse">The parse from which to obtain the spans</param>
            <returns>An array containing every span for the parse.</returns>
        </member>
        <member name="M:SharpNL.Parser.ParserEvaluator.ProcessSample(SharpNL.Parser.Parse)">
            <summary>
            Evaluates the given reference sample object.
            The implementation has to update the score after every invocation.
            </summary>
            <param name="reference">The reference sample.</param>
            <returns>The predicted sample</returns>
        </member>
        <member name="T:SharpNL.Parser.ParserEventTypeEnum">
            <summary>
            Enumerated type of event types for the parser.
            </summary>
        </member>
        <member name="T:SharpNL.Parser.ParserModel">
            <summary>
            This is an abstract base class for <see cref="T:SharpNL.Parser.ParserModel"/> implementations.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.ParserModel.ParserTypeParameter">
            <summary>
            The parser type parameter in the manifest.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.ParserModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,SharpNL.ML.Model.IMaxentModel,SharpNL.ML.Model.IMaxentModel,SharpNL.POSTag.POSModel,SharpNL.Chunker.ChunkerModel,SharpNL.Parser.AbstractHeadRules,SharpNL.Parser.ParserType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ParserModel"/> using the specified models and head rules.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="buildModel">The model to assign constituent labels.</param>
            <param name="checkModel">The model to determine a constituent is complete.</param>
            <param name="attachModel">The attach model.</param>
            <param name="parserTagger">The model to assign pos-tags.</param>
            <param name="chunkerTagger">The model to assign flat constituent labels.</param>
            <param name="headRules">The head rules.</param>
            <param name="modelType">Type of the model.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <exception cref="T:System.ArgumentException">
            If the <paramref name="modelType"/> is equal to <see cref="F:SharpNL.Parser.ParserType.Chunking"/> the <paramref name="attachModel"/> must be <c>null</c>.
            or
            If the <paramref name="modelType"/> is equal to <see cref="F:SharpNL.Parser.ParserType.TreeInsert"/> the <paramref name="attachModel"/> must not be <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Unknown <paramref name="modelType"/> value.
            </exception>
        </member>
        <member name="M:SharpNL.Parser.ParserModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,SharpNL.ML.Model.IMaxentModel,SharpNL.ML.Model.IMaxentModel,SharpNL.POSTag.POSModel,SharpNL.Chunker.ChunkerModel,SharpNL.Parser.AbstractHeadRules,SharpNL.Parser.ParserType)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ParserModel"/> using the specified models and head rules without manifest information entries.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="buildModel">The model to assign constituent labels.</param>
            <param name="checkModel">The model to determine a constituent is complete.</param>
            <param name="attachModel">The attach model.</param>
            <param name="parserTagger">The model to assign pos-tags.</param>
            <param name="chunkerTagger">The model to assign flat constituent labels.</param>
            <param name="headRules">The head rules.</param>
            <param name="modelType">Type of the model.</param>
            <exception cref="T:System.ArgumentException">
            If the <paramref name="modelType"/> is equal to <see cref="F:SharpNL.Parser.ParserType.Chunking"/> the <paramref name="attachModel"/> must be <c>null</c>.
            or
            If the <paramref name="modelType"/> is equal to <see cref="F:SharpNL.Parser.ParserType.TreeInsert"/> the <paramref name="attachModel"/> must not be <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Unknown <paramref name="modelType"/> value.
            </exception>
        </member>
        <member name="M:SharpNL.Parser.ParserModel.#ctor(System.String,SharpNL.ML.Model.IMaxentModel,SharpNL.ML.Model.IMaxentModel,SharpNL.POSTag.POSModel,SharpNL.Chunker.ChunkerModel,SharpNL.Parser.AbstractHeadRules,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ParserModel"/> using the specified models and head rules using the model type as chunking.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="buildModel">The model to assign constituent labels.</param>
            <param name="checkModel">The model to determine a constituent is complete.</param>
            <param name="parserTagger">The model to assign pos-tags.</param>
            <param name="chunkerTagger">The model to assign flat constituent labels.</param>
            <param name="headRules">The head rules.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
        </member>
        <member name="M:SharpNL.Parser.ParserModel.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.ParserModel"/> class deserializing the input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="inputStream"/> is null.
            </exception>
        </member>
        <member name="M:SharpNL.Parser.ParserModel.CreateArtifactSerializers">
            <summary>
            Registers all serializers for their artifact file name extensions. Override this method to register custom file extensions.
            </summary>
            <seealso href="https://msdn.microsoft.com/en-us/library/ms182331.aspx"/>
            <remarks>The subclasses should invoke the <see cref="M:SharpNL.Utility.Serialization.ArtifactProvider.RegisterArtifactType(System.String,SharpNL.Utility.Serialization.SerializeDelegate,SharpNL.Utility.Serialization.DeserializeDelegate)"/> to register
            the proper serialization/deserialization methods for an new extension.
            Warning: This method is called in constructor of the base class!! Be aware that this method is ONLY designed to register serializers.</remarks>
        </member>
        <member name="M:SharpNL.Parser.ParserModel.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts.
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to find the manifest entry.</exception>
            <remarks>Subclasses should generally invoke super.validateArtifactMap at the beginning of this method.</remarks>
        </member>
        <member name="P:SharpNL.Parser.ParserModel.DefaultFactory">
            <summary>
            Gets the default tool factory.
            </summary>
            <returns>The default tool factory.</returns>
        </member>
        <member name="T:SharpNL.Parser.ParserTool">
            <summary>
            A helper tool to create the Parse objects that will be parsed by a implemented <see cref="T:SharpNL.Parser.IParser"/> object.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.ParserTool.ParseLine(SharpNL.SentenceDetector.ISentence,SharpNL.Parser.IParser,System.Int32)">
            <summary>
            Parses the specified <see cref="T:SharpNL.SentenceDetector.ISentence"/> object using a given <paramref name="parser"/>.
            </summary>
            <param name="sentence">The sentence to be parsed.</param>
            <param name="parser">The parser.</param>
            <param name="numParses">The number parses. Usually 1.</param>
            <returns>An array with the parsed results.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentence"/>
            or
            <paramref name="parser"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">numParses</exception>
            <exception cref="T:System.InvalidOperationException">The sentence is not tokenized.</exception>
        </member>
        <member name="M:SharpNL.Parser.ParseSampleStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.Parser.Parse"/> object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Parser.PosSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.AttachContextGenerator.GetContext(SharpNL.Parser.Parse[],System.Int32,System.Collections.Generic.List{SharpNL.Parser.Parse},System.Int32)">
            <summary>
            Gets the context features about this attachment.
            </summary>
            <param name="constituents">The constituents as they have been constructed so far.</param>
            <param name="index">The constituent index of the node being attached.</param>
            <param name="rightFrontier">The nodes which have been not attach to so far.</param>
            <param name="rfi">The rfi.</param>
            <returns>A set of contextual features about this attachment.</returns>
        </member>
        <member name="T:SharpNL.Parser.TreeInsert.BuildContextGenerator">
            <summary>
            Creates the features or contexts for the building phase of parsing.
            This phase builds constituents from the left-most node of these constituents.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.BuildContextGenerator.GetContext(SharpNL.Parser.Parse[],System.Int32)">
            <summary>
            Returns the contexts/features for the decision to build a new constituent for the 
            specified parse at the specified index.
            </summary>
            <param name="constituents">The constituents of the parse so far.</param>
            <param name="index">The index of the constituent where a build decision is being made.</param>
            <returns>The contexts/features for the decision to build a new constituent.</returns>
        </member>
        <member name="T:SharpNL.Parser.TreeInsert.Parser">
            <summary>
            Represents a built/attach parser.
            </summary>
            <remarks>
            Nodes are built when their left-most child is encountered. Subsequent children are attached as
            daughters. Attachment is based on node in the right-frontier of the tree.  After each attachment
            or building, nodes are assessed as either complete or incomplete.  Complete nodes are no longer
            eligible for daughter attachment. Complex modifiers which produce additional node levels of the
            same type are attached with sister-adjunction. Attachment can not take place higher in the 
            right-frontier than an incomplete node.
            </remarks>
        </member>
        <member name="F:SharpNL.Parser.TreeInsert.Parser.DONE">
            <summary>
            Outcome used when a constituent needs an no additional parent node/building.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.TreeInsert.Parser.ATTACH_SISTER">
            <summary>
            Outcome used when a node should be attached as a sister to another node.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.TreeInsert.Parser.ATTACH_DAUGHTER">
            <summary>
            Outcome used when a node should be attached as a daughter to another node.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.TreeInsert.Parser.NON_ATTACH">
            <summary>
            Outcome used when a node should not be attached to another node.
            </summary>
        </member>
        <member name="F:SharpNL.Parser.TreeInsert.Parser.BUILT">
            <summary>
            Label used to distinguish build nodes from non-built nodes.
            </summary>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.Parser.#ctor(SharpNL.Parser.ParserModel,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.TreeInsert.Parser"/> class using the specified model with the specified beam size and advance percentage.
            </summary>
            <param name="model">The parser model.</param>
            <param name="beamSize">The number of different parses kept during parsing.</param>
            <param name="advancePercentage">The minimal amount of probability mass which advanced outcomes must represent.</param>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.Parser.#ctor(SharpNL.Parser.ParserModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Parser.TreeInsert.Parser"/> class using the specified model with the default beam size and the default advance percentage.
            </summary>
            <param name="model">The parser model.</param>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.Parser.GetRightFrontier(SharpNL.Parser.Parse,System.Collections.Generic.List{System.String})">
            <summary>
            Returns the right frontier of the specified parse tree with nodes ordered from deepest to shallowest.
            </summary>
            <param name="root">The root of the parse tree.</param>
            <param name="punctSet">The punctuation set.</param>
            <returns>The right frontier of the specified parse tree.</returns>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.Parser.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,SharpNL.Utility.TrainingParameters)">
            <summary>
            Trains a parser model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="rules">The head rules.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <returns>The trained <see cref="T:SharpNL.Parser.ParserModel"/> object.</returns>
            <exception cref="T:System.NotSupportedException">Trainer type is not supported.</exception>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.Parser.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,SharpNL.Utility.TrainingParameters,SharpNL.Monitor)">
            <summary>
            Trains a parser model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="rules">The head rules.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The trained <see cref="T:SharpNL.Parser.ParserModel"/> object.</returns>
            <exception cref="T:System.NotSupportedException">Trainer type is not supported.</exception>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.Parser.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,System.Int32,System.Int32)">
            <summary>
            Trains a parser model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="rules">The head rules.</param>
            <param name="iterations">The number of training iterations.</param>
            <param name="cutoff">The min number of times a feature must be seen.</param>
            <returns>The trained <see cref="T:SharpNL.Parser.ParserModel"/> object.</returns>
            <exception cref="T:System.NotSupportedException">Trainer type is not supported.</exception>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.Parser.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.Parser.Parse},SharpNL.Parser.AbstractHeadRules,System.Int32,System.Int32,SharpNL.Monitor)">
            <summary>
            Trains a parser model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="rules">The head rules.</param>
            <param name="iterations">The number of training iterations.</param>
            <param name="cutoff">The min number of times a feature must be seen.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The trained <see cref="T:SharpNL.Parser.ParserModel"/> object.</returns>
            <exception cref="T:System.NotSupportedException">Trainer type is not supported.</exception>
        </member>
        <member name="M:SharpNL.Parser.TreeInsert.ParserEventStream.AddParseEvents(System.Collections.Generic.List{SharpNL.ML.Model.Event},SharpNL.Parser.Parse[])">
            <summary>
            Produces all events for the specified sentence chunks and adds them to the specified list.
            </summary>
            <param name="newEvents">A list of events to be added to.</param>
            <param name="chunks">Pre-chunked constituents of a sentence.</param>
        </member>
        <member name="T:SharpNL.POSTag.DefaultPOSContextGenerator">
            <summary>
            A context generator for the POS Tagger.
            </summary>
        </member>
        <member name="T:SharpNL.POSTag.IPOSContextGenerator">
            <summary>
            The interface for a context generator for the POS Tagger.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.IPOSContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.Object[])">
            <summary>
            Returns the context for making a pos tag decision at the specified token index given the specified tokens and previous tags.
            </summary>
            <param name="index">The index of the token for which the context is provided.</param>
            <param name="tokens">The tokens in the sentence.</param>
            <param name="prevTags">The tags assigned to the previous words in the sentence.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The context for making a pos tag decision at the specified token index given the specified tokens and previous tags.</returns>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSContextGenerator.#ctor(SharpNL.Dictionary.Dictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.DefaultPOSContextGenerator"/> without cache.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSContextGenerator.#ctor(System.Int32,SharpNL.Dictionary.Dictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.DefaultPOSContextGenerator"/> with the specified cache size.
            </summary>
            <param name="cacheSize">The cache size.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSContextGenerator.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSContextGenerator.GetPrefixes(System.String)">
            <summary>
            Gets the prefixes.
            </summary>
            <param name="lex">The lex.</param>
            <returns>The prefixes.</returns>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSContextGenerator.GetSuffixes(System.String)">
            <summary>
            Gets the suffixes
            </summary>
            <param name="lex">The lex.</param>
            <returns>The suffixes.</returns>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSContextGenerator.SharpNL#Utility#IBeamSearchContextGenerator{System#String}#GetContext(System.Int32,System.String[],System.String[],System.Object[])">
            <summary>Gets the context for the specified position in the specified sequence (list).</summary>
            <param name="index">The index of the sequence.</param>
            <param name="sequence">The sequence of items over which the beam search is performed.</param>
            <param name="priorDecisions">The sequence of decisions made prior to the context for which this decision is being made.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The context for the specified position in the specified sequence.</returns>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.Object[])">
            <summary>
            Returns the context for making a pos tag decision at the specified token index given the specified tokens and previous tags.
            </summary>
            <param name="index">The index of the token for which the context is provided.</param>
            <param name="tokens">The tokens in the sentence.</param>
            <param name="prevTags">The tags assigned to the previous words in the sentence.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The context for making a pos tag decision at the specified token index given the specified tokens and previous tags.</returns>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSContextGenerator.GetContext(System.Int32,System.Object[],System.String[])">
            <summary>
             Returns the context for making a pos tag decision at the specified token index given the specified tokens and previous tags.
            </summary>
            <param name="index">The index of the token for which the context is provided.</param>
            <param name="tokens">The tokens in the sentence.</param>
            <param name="tags">The tags assigned to the previous words in the sentence.</param>
            <returns>The context for making a pos tag decision at the specified token index given the specified tokens and previous tags.</returns>
        </member>
        <member name="T:SharpNL.POSTag.DefaultPOSSequenceValidator">
            <summary>
            Represents a default POS sequence validator.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSSequenceValidator.#ctor(SharpNL.POSTag.ITagDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.DefaultPOSSequenceValidator"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:SharpNL.POSTag.DefaultPOSSequenceValidator.ValidSequence(System.Int32,System.String[],System.String[],System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.
            This is used to restrict invalid sequences such as those used in start/continue tag-based chunking or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">The index in the input sequence for which the new outcome is being proposed.</param>
            <param name="inputSequence">The input sequence.</param>
            <param name="outcomesSequence">The outcomes so far in this sequence.</param>
            <param name="outcome">The next proposed outcome for the outcomes sequence.</param>
            <returns><c>true</c> if the sequence would still be valid with the new outcome, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpNL.POSTag.IMutableTagDictionary">
            <summary>
            Interface that allows <see cref="T:SharpNL.POSTag.ITagDictionary"/> entries to be added and removed. 
            This can be used to induce the dictionary from training data.
            </summary>
        </member>
        <member name="T:SharpNL.POSTag.ITagDictionary">
            <summary>
            Interface to determine which tags are valid for a particular word based on a tag dictionary.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.ITagDictionary.GetTags(System.String)">
            <summary>
            Returns a list of valid tags for the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns>A list of valid tags for the specified word or null if no information is available for that word.</returns>
        </member>
        <member name="M:SharpNL.POSTag.IMutableTagDictionary.Put(System.String,System.String[])">
            <summary>
            Associates the specified tags with the specified word. If the dictionary
            previously contained keys for the word, the old tags are replaced by the
            specified tags.
            </summary>
            <param name="word">The word with which the specified tags is to be associated.</param>
            <param name="tags">The tags to be associated with the specified word.</param>
            <returns>The previous tags associated with the word, or null if there was no mapping for word.</returns>
        </member>
        <member name="T:SharpNL.POSTag.IPOSTagger">
            <summary>
            The interface for part of speech taggers.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.IPOSTagger.Tag(System.String[])">
            <summary>
            Assigns the sentence of tokens pos tags.
            </summary>
            <param name="sentence">The sentence of tokens to be tagged.</param>
            <returns>an array of pos tags for each token provided in sentence.</returns>
            
        </member>
        <member name="M:SharpNL.POSTag.IPOSTagger.Tag(System.String[],System.Object[])">
            <summary>
            Assigns the sentence of tokens pos tags.
            </summary>
            <param name="sentence">The sentence of tokens to be tagged.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>an array of pos tags for each token provided in sentence.</returns>
        </member>
        <member name="M:SharpNL.POSTag.IPOSTagger.TopKSequences(System.String[])">
            <summary>
            Returns the top k sequences for the specified sentence.
            </summary>
            <param name="sentence">The sentence of tokens to be evaluated.</param>
            <returns>The top k sequences for the specified sentence.</returns>
        </member>
        <member name="M:SharpNL.POSTag.IPOSTagger.TopKSequences(System.String[],System.Object[])">
            <summary>
            Returns the top k sequences for the specified sentence.
            </summary>
            <param name="sentence">The sentence of tokens to be evaluated.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The top k sequences for the specified sentence.</returns>
        </member>
        <member name="T:SharpNL.POSTag.Language.pt.POSContextGenerator">
            <summary>
            Represents a context generator for the portuguese POS Tagger.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.Language.pt.POSContextGenerator.#ctor(SharpNL.Dictionary.Dictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.DefaultPOSContextGenerator"/> without cache.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:SharpNL.POSTag.Language.pt.POSContextGenerator.#ctor(System.Int32,SharpNL.Dictionary.Dictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.DefaultPOSContextGenerator"/> with the specified cache size.
            </summary>
            <param name="cacheSize">The cache size.</param>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:SharpNL.POSTag.Language.pt.POSContextGenerator.GetContext(System.Int32,System.String[],System.String[],System.Object[])">
            <summary>
            Returns the context for making a pos tag decision at the specified token index given the specified tokens and previous tags.
            </summary>
            <param name="index">The index of the token for which the context is provided.</param>
            <param name="tokens">The tokens in the sentence.</param>
            <param name="prevTags">The tags assigned to the previous words in the sentence.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The context for making a pos tag decision at the specified token index given the specified tokens and previous tags.</returns>
        </member>
        <member name="T:SharpNL.POSTag.Language.pt.POSSequenceValidator">
            <summary>
            Represents a portuguese POS sequence validator.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.Language.pt.POSSequenceValidator.#ctor(SharpNL.POSTag.ITagDictionary,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.Language.pt.POSSequenceValidator"/> with its respective tag dictionary.
            </summary>
            <param name="tagDictionary">The tag dictionary.</param>
            <param name="bosque">set true if the data is from BOSQUE file.</param>
        </member>
        <member name="M:SharpNL.POSTag.Language.pt.POSSequenceValidator.#ctor(SharpNL.POSTag.ITagDictionary,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.Language.pt.POSSequenceValidator"/> with the specified dictionary and a unknown word list.
            </summary>
            <param name="tagDictionary">The tag dictionary.</param>
            <param name="bosque">set true if the data is from BOSQUE file.</param>
            <param name="unknownList">
            The unknown list. If specified the validator will include the unknown words to this list.
            </param>
            <exception cref="T:System.ArgumentNullException">tagDictionary</exception>
        </member>
        <member name="M:SharpNL.POSTag.Language.pt.POSSequenceValidator.ValidSequence(System.Int32,System.String[],System.String[],System.String)">
            <summary>
            Determines whether a particular continuation of a sequence is valid.
            This is used to restrict invalid sequences such as those used in start/continue tag-based chunking or could be used to implement tag dictionary restrictions.
            </summary>
            <param name="index">The index in the input sequence for which the new outcome is being proposed.</param>
            <param name="inputSequence">The input sequence.</param>
            <param name="outcomesSequence">The outcomes so far in this sequence.</param>
            <param name="outcome">The next proposed outcome for the outcomes sequence.</param>
            <returns><c>true</c> if the sequence would still be valid with the new outcome, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpNL.POSTag.POSDictionary">
            <summary>
            Provides a means of determining which tags are valid for a particular 
            word based on a tag dictionary read from a file.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.#ctor">
            <summary>
            Initializes an empty case sensitive <see cref="T:SharpNL.POSTag.POSDictionary"/>.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.#ctor(System.Boolean)">
            <summary>
            Initializes an empty <see cref="T:SharpNL.POSTag.POSDictionary"/>.
            </summary>
            <param name="caseSensitive">if set to <c>true</c> the dictionary will be case sensitive.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.Equals(SharpNL.POSTag.POSDictionary)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.GetTags(System.String)">
            <summary>
            Returns a list of valid tags for the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns>A list of valid tags for the specified word or null if no information is available for that word.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.Put(System.String,System.String[])">
            <summary>
            Associates the specified tags with the specified word. If the dictionary
            previously contained keys for the word, the old tags are replaced by the
            specified tags.
            </summary>
            <param name="word">The word with which the specified tags is to be associated.</param>
            <param name="tags">The tags to be associated with the specified word.</param>
            <returns>The previous tags associated with the word, or null if there was no mapping for word.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.Serialize(System.IO.Stream)">
            <summary>
            Serializes the current instance to the given stream.
            </summary>
            <param name="outputStream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream is not writable.</exception>
        </member>
        <member name="M:SharpNL.POSTag.POSDictionary.ToString">
            <summary>
            Returns a string that represents the current dictionary.
            </summary>
            <returns>
            A string that represents the current dictionary.
            </returns>
        </member>
        <member name="T:SharpNL.POSTag.POSEvaluator">
            <summary>
            The <see cref="T:SharpNL.POSTag.POSEvaluator"/> measures the performance of the given <see cref="T:SharpNL.POSTag.IPOSTagger"/> 
            with the provided reference <see cref="T:SharpNL.POSTag.POSSample"/>s.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSEvaluator.#ctor(SharpNL.POSTag.IPOSTagger,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.POSTag.POSSample}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.POSEvaluator"/>.
            </summary>
            <param name="tagger">The tagger.</param>
            <param name="listeners">Any listeners.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tagger"/>
            </exception>
        </member>
        <member name="M:SharpNL.POSTag.POSEvaluator.ProcessSample(SharpNL.POSTag.POSSample)">
            <summary>
            Evaluates the given reference <see cref="T:SharpNL.POSTag.POSSample"/> object.
            The implementation has to update the score after every invocation.
            </summary>
            <param name="reference">The reference <see cref="T:SharpNL.POSTag.POSSample"/>.</param>
            <returns>The predicted <see cref="T:SharpNL.POSTag.POSSample"/>.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSEvaluator.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.POSTag.POSEvaluator.WordAccuracy">
            <summary>
            Gets the word accuracy.
            </summary>
            <value>The word accuracy.</value>
            <remarks>
            This is defined as: word accuracy = correctly detected tags / total words
            </remarks>
        </member>
        <member name="P:SharpNL.POSTag.POSEvaluator.WordCount">
            <summary>
            Gets the total number of words considered in the evaluation.
            </summary>
            <value>The word count.</value>
        </member>
        <member name="T:SharpNL.POSTag.POSModel">
            <summary>
            The <see cref="T:SharpNL.POSTag.POSModel"/> is the model used by a learnable <see cref="T:SharpNL.POSTag.IPOSTagger"/>.
            </summary>
            <seealso cref="T:SharpNL.POSTag.POSTaggerME"/>
        </member>
        <member name="M:SharpNL.POSTag.POSModel.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes the current instance. The sub-class constructor should call the method <see cref="M:SharpNL.Utility.Model.BaseModel.CheckArtifactMap"/> to check the artifact map is OK.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="manifestInfoEntries">Additional information in the manifest.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSModel.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="stream">The input stream containing the model.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="fileName">The model filename.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file does not exist.</exception>
        </member>
        <member name="P:SharpNL.POSTag.POSModel.DefaultFactory">
            <summary>
            Gets the default tool factory.
            </summary>
            <returns>The default tool factory.</returns>
        </member>
        <member name="P:SharpNL.POSTag.POSModel.Factory">
            <summary>
            Gets the <see cref="T:SharpNL.POSTag.POSTaggerFactory"/> factory.
            </summary>
            <value>The tool factory.</value>
        </member>
        <member name="P:SharpNL.POSTag.POSModel.MaxentModel">
            <summary>
            Gets the maxent model.
            </summary>
            <value>The maxent model.</value>
        </member>
        <member name="P:SharpNL.POSTag.POSModel.PosSequenceModel">
            <summary>
            Gets the position sequence model.
            </summary>
            <returns>The position sequence model.</returns>
        </member>
        <member name="T:SharpNL.POSTag.POSSample">
            <summary>
            Represents an pos-tagged sentence.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSSample.#ctor(System.String[],System.String[])">
            <summary>
            Initializes a new instance of the pos-tagged sentence.
            </summary>
            <param name="sentence">The sentence tokens.</param>
            <param name="tags">The tags for each sentence token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentence"/>
            or
            <paramref name="tags"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            null elements are not allowed in <paramref name="sentence"/> tokens!
            or
            null elements are not allowed in <paramref name="tags"/>!
            </exception>
        </member>
        <member name="M:SharpNL.POSTag.POSSample.#ctor(System.String[],System.String[],System.String[][])">
            <summary>
            Initializes a new instance of the pos-tagged sentence.
            </summary>
            <param name="sentence">The sentence tokens.</param>
            <param name="tags">The tags for each sentence token.</param>
            <param name="additionalContext">The additional context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sentence"/>
            or
            <paramref name="tags"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            null elements are not allowed in <paramref name="sentence"/> tokens!
            or
            null elements are not allowed in <paramref name="tags"/>!
            </exception>
        </member>
        <member name="M:SharpNL.POSTag.POSSample.ToString">
            <summary>
            Returns a string that represents the current sample.
            </summary>
            <returns>
            A string that represents the current sample.
            </returns>
        </member>
        <member name="M:SharpNL.POSTag.POSSample.Parse(System.String)">
            <summary>
            Parses the specified sentence string into an <see cref="T:SharpNL.POSTag.POSSample"/> object. 
            </summary>
            <param name="sentenceString">The sentence string.</param>
            <returns>The parsed <see cref="T:SharpNL.POSTag.POSSample"/> object.</returns>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Cannot find "_" inside token '...'!</exception>
        </member>
        <member name="M:SharpNL.POSTag.POSSample.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.POSTag.POSSample.Equals(SharpNL.POSTag.POSSample)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSSample.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:SharpNL.POSTag.POSSample"/>.
            </returns>
        </member>
        <member name="M:SharpNL.POSTag.POSSample.GetAdditionalContext">
            <summary>
            Gets the additional context as object array.
            </summary>
        </member>
        <member name="P:SharpNL.POSTag.POSSample.AdditionalContext">
            <summary>
            Gets the additional context.
            </summary>
            <value>The additional context.</value>
        </member>
        <member name="P:SharpNL.POSTag.POSSample.Sentence">
            <summary>
            Gets the sentence.
            </summary>
            <value>The sentence.</value>
        </member>
        <member name="P:SharpNL.POSTag.POSSample.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="T:SharpNL.POSTag.POSSampleEventStream">
            <summary>
            This class reads the <see cref="T:SharpNL.POSTag.POSSample"/>s from the given <see cref="T:IObjectStream{POSSample}"/>
            and converts the <see cref="T:SharpNL.POSTag.POSSample"/>s into <see cref="T:SharpNL.ML.Model.Event"/>s which can be used 
            by the maxent library for training.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.POSTag.POSSample})">
            <summary>
            Initializes the current instance with the given samples and a <see cref="T:SharpNL.POSTag.DefaultPOSContextGenerator"/>.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.POSTag.POSSample},SharpNL.POSTag.IPOSContextGenerator)">
            <summary>
            Initializes the current instance with the given samples and the given <see cref="T:SharpNL.POSTag.IPOSContextGenerator"/>.
            </summary>
            <param name="samples">The samples.</param>
            <param name="cg">The context generator.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleEventStream.CreateEvents(SharpNL.POSTag.POSSample)">
            <summary>
            Creates events for the provided sample.
            </summary>
            <param name="sample">The sample the sample for which training <see cref="T:Event"/>s are be created.</param>
            <returns>The events enumerator.</returns>
        </member>
        <member name="T:SharpNL.POSTag.POSSampleSequenceStream">
            <summary>
            Represents a sequence stream of <seealso cref="T:SharpNL.POSTag.POSSample"/> objects.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleSequenceStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.POSTag.POSSample})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.POSSampleSequenceStream"/> class.
            </summary>
            <param name="objectStream">The object stream.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleSequenceStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.POSTag.POSSample},SharpNL.POSTag.IPOSContextGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.POSSampleSequenceStream"/> class.
            </summary>
            <param name="objectStream">The object stream.</param>
            <param name="contextGenerator">The context generator.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleSequenceStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleSequenceStream.Read">
            <summary>
            Returns the next <see cref="T:SharpNL.ML.Model.Sequence"/>. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next <see cref="T:SharpNL.ML.Model.Sequence"/> or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleSequenceStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSSampleSequenceStream.UpdateContext(SharpNL.ML.Model.Sequence,SharpNL.ML.Model.AbstractModel)">
            <summary>
            Creates a new event array based on the outcomes predicted by the specified parameters for the specified sequence.
            </summary>
            <param name="sequence">The sequence to be evaluated.</param>
            <param name="model">The model.</param>
            <returns>The event array.</returns>
        </member>
        <member name="T:SharpNL.POSTag.POSTaggerFactory">
            <summary>
            The factory that provides POS Tagger default implementations and resources.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerFactory.CreateArtifactMap">
            <summary>
            Creates a dictionary with pairs of keys and objects. 
            The models implementation should call this constructor that creates a model programmatically.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerFactory.CreateArtifactSerializers(SharpNL.Utility.Serialization.ArtifactProvider)">
            <summary>
            Creates the artifact serializers for the <see cref="P:SharpNL.Utility.BaseToolFactory.ArtifactProvider"/>.
            The subclasses should call the <see cref="M:SharpNL.Utility.Serialization.ArtifactProvider.RegisterArtifactType(System.String,SharpNL.Utility.Serialization.SerializeDelegate,SharpNL.Utility.Serialization.DeserializeDelegate)"/> method to register an new artifact type.
            </summary>
            <param name="provider">The artifact provider.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerFactory.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts. 
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Invalid artifact map.</exception>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerFactory.Dictionary">
            <summary>
            Gets or sets ngram the dictionary.
            </summary>
            <value>The ngram dictionary.</value>
            <exception cref="T:System.InvalidOperationException">Can not set ngram dictionary while using artifact provider.</exception>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerFactory.TagDictionary">
            <summary>
            Gets or sets the tag dictionary.
            </summary>
            <value>The tag dictionary.</value>
            <exception cref="T:System.InvalidOperationException">Can not set tag dictionary while using artifact provider.</exception>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerFactory.Model">
            <summary>
            Gets the model from the artifact provider.
            </summary>
            <value>The model from the artifact provider..</value>
        </member>
        <member name="T:SharpNL.POSTag.POSTaggerME">
            <summary>
            A part-of-speech tagger that uses maximum entropy.  Tries to predict whether
            words are nouns, verbs, or any of 70 other POS tags depending on their
            surrounding context.
            </summary>
        </member>
        <member name="F:SharpNL.POSTag.POSTaggerME.DefaultBeamSize">
            <summary>
            The default beam size for the <see cref="T:SharpNL.POSTag.POSTaggerME"/>.
            </summary>
        </member>
        <member name="F:SharpNL.POSTag.POSTaggerME.useClosedClassTagsFilter">
            <summary>
            Says whether a filter should be used to check whether a tag assignment
            is to a word outside of a closed class.
            </summary>
        </member>
        <member name="F:SharpNL.POSTag.POSTaggerME.size">
            <summary>
            The size of the beam to be used in determining the best sequence of pos tags.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.#ctor(SharpNL.POSTag.POSModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.POSTaggerME"/> with the provided model
            and the default beam size of 3.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.#ctor(SharpNL.POSTag.POSModel,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.POSTaggerME"/> with the provided
            model and provided beam size.
            </summary>
            <param name="model">The model.</param>
            <param name="beamSize">Size of the beam.</param>
            <param name="cacheSize">Size of the cache.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="model"/></exception>
            <exception cref="T:System.InvalidOperationException">Unable to retrieve the model.</exception>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.BuildNGramDictionary(SharpNL.Utility.IObjectStream{SharpNL.POSTag.POSSample},System.Int32)">
            <summary>
            Builds the NGram dictionary with the given samples.
            </summary>
            <param name="samples">The samples.</param>
            <param name="cutoff">The cutoff.</param>
            <returns>The NGram dictionary.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.GetAllPosTags">
            <summary>
            Gets an array of all possible part-of-speech tags from the tagger.
            </summary>
            <returns>An array of all possible part-of-speech tags from the tagger.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.GetOrderedTags(System.String[],System.String[],System.Int32)">
            <summary>
            Gets the ordered tags by probability.
            </summary>
            <param name="words">The words.</param>
            <param name="tags">The tags.</param>
            <param name="index">The index.</param>
            <returns>String[].</returns>
            <exception cref="T:System.NotSupportedException">This method can only be called if the classification model is an event model!</exception>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.GetOrderedTags(System.String[],System.String[],System.Int32,System.Double[])">
            <summary>
            Gets the ordered tags by probability.
            </summary>
            <param name="words">The words.</param>
            <param name="tags">The tags.</param>
            <param name="index">The index.</param>
            <param name="tagProbs">The tag probs.</param>
            <returns>String[].</returns>
            <exception cref="T:System.NotSupportedException">This method can only be called if the classification model is an event model!</exception>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.Tag(System.String[])">
            <summary>
            Assigns the sentence of tokens pos tags.
            </summary>
            <param name="sentence">The sentence of tokens to be tagged.</param>
            <returns>an array of pos tags for each token provided in sentence.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.Tag(System.String[],System.Object[])">
            <summary>
            Assigns the sentence of tokens pos tags.
            </summary>
            <param name="sentence">The sentence of tokens to be tagged.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>an array of pos tags for each token provided in sentence.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.Tag(System.Int32,System.String[])">
            <summary>
            Returns at most the specified number of taggings for the specified sentence.
            </summary>
            <param name="numTaggings">The number of tagging to be returned.</param>
            <param name="sentence">An array of tokens which make up a sentence.</param>
            <returns>At most the specified number of taggings for the specified sentence.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.TopKSequences(System.String[])">
            <summary>
            Returns the top k sequences for the specified sentence.
            </summary>
            <param name="sentence">The sentence of tokens to be evaluated.</param>
            <returns>The top k sequences for the specified sentence.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.TopKSequences(System.String[],System.Object[])">
            <summary>
            Returns the top k sequences for the specified sentence.
            </summary>
            <param name="sentence">The sentence of tokens to be evaluated.</param>
            <param name="additionalContext">Any addition context specific to a class implementing this interface.</param>
            <returns>The top k sequences for the specified sentence.</returns>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.POSTag.POSSample},SharpNL.Utility.TrainingParameters,SharpNL.POSTag.POSTaggerFactory)">
            <summary>
            Trains a Part of Speech model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="factory">The sentence detector factory.</param>
            <returns>The trained <see cref="T:SharpNL.POSTag.POSModel"/> object.</returns>
            <exception cref="T:System.NotSupportedException">Trainer type is not supported.</exception>
        </member>
        <member name="M:SharpNL.POSTag.POSTaggerME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.POSTag.POSSample},SharpNL.Utility.TrainingParameters,SharpNL.POSTag.POSTaggerFactory,SharpNL.Monitor)">
            <summary>
            Trains a Part of Speech model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="factory">The sentence detector factory.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The trained <see cref="T:SharpNL.POSTag.POSModel"/> object.</returns>
            <exception cref="T:System.NotSupportedException">Trainer type is not supported.</exception>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerME.ContextGenerator">
            <summary>
            Gets the feature context generator.
            </summary>
            <value>The feature context generator.</value>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerME.TagDictionary">
            <summary>
            Gets tag dictionary used for restricting words to a fixed set of tags.
            </summary>
            <value>The tag dictionary used for restricting words to a fixed set of tags.</value>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerME.SequenceValidator">
            <summary>
            Gets the sequence validator.
            </summary>
            <value>The sequence validator.</value>
        </member>
        <member name="P:SharpNL.POSTag.POSTaggerME.Probabilities">
            <summary>
            Gets an array with the probabilities for each tag of the last tagged sentence.
            </summary>
            <value>An array with the probabilities for each tag of the last tagged sentence.</value>
        </member>
        <member name="T:SharpNL.POSTag.Triple">
            <summary>
            Represents a triple object with a class, lemma and features.
            </summary>
        </member>
        <member name="M:SharpNL.POSTag.Triple.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.Triple"/> class.
            </summary>
            <param name="tripleClass">The triple class.</param>
            <param name="tripleLemma">The triple lemma.</param>
            <param name="tripleFeatures">The triple features.</param>
        </member>
        <member name="M:SharpNL.POSTag.Triple.Equals(SharpNL.POSTag.Triple)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:SharpNL.POSTag.Triple.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.POSTag.Triple.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SharpNL.POSTag.Triple.CompareTo(SharpNL.POSTag.Triple)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. 
            The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.
            Zero This object is equal to <paramref name="other"/>. 
            Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.POSTag.Triple.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.POSTag.Triple.Class">
            <summary>
            Gets the triple class.
            </summary>
            <value>The triple class.</value>
        </member>
        <member name="P:SharpNL.POSTag.Triple.Lemma">
            <summary>
            Gets the triple lemma.
            </summary>
            <value>The triple lemma.</value>
        </member>
        <member name="P:SharpNL.POSTag.Triple.Features">
            <summary>
            Gets the triple features.
            </summary>
            <value>The triple features.</value>
        </member>
        <member name="T:SharpNL.POSTag.WordTagSampleStream">
            <summary>
            A stream filter which reads a sentence per line which contains
            words and tags in word_tag format and outputs a <see cref="T:SharpNL.POSTag.POSSample"/> objects.
            </summary>
            <remarks>
            The native POS Tagger training material looks like this:
            <para>
            <c>About_IN 10_CD Euro_NNP ,_, I_PRP reckon_VBP ._. That_DT sounds_VBZ good_JJ ._.</c>
            </para>
            </remarks>
        </member>
        <member name="M:SharpNL.POSTag.WordTagSampleStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.WordTagSampleStream"/> using a <see cref="T:SharpNL.Utility.PlainTextByLineStream"/> to read the input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <seealso cref="T:SharpNL.Utility.PlainTextByLineStream"/>
        </member>
        <member name="M:SharpNL.POSTag.WordTagSampleStream.#ctor(System.IO.Stream,SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.WordTagSampleStream"/> using 
            a <see cref="T:SharpNL.Utility.PlainTextByLineStream"/> to read the input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="monitor">The evaluation monitor.</param>
            <seealso cref="T:SharpNL.Utility.PlainTextByLineStream"/>
        </member>
        <member name="M:SharpNL.POSTag.WordTagSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.WordTagSampleStream"/> using the
            <see cref="T:IObjectStream{string}"/> as sample reader.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:SharpNL.POSTag.WordTagSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},SharpNL.Monitor)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.POSTag.WordTagSampleStream"/> using the
            <see cref="T:IObjectStream{string}"/> as sample reader.
            </summary>
            <param name="samples">The samples.</param>
            <param name="monitor">The evaluation monitor.</param>
        </member>
        <member name="M:SharpNL.POSTag.WordTagSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.DefaultEndOfSentenceScanner">
            <summary>
            Represents an default end of sentence scanner.
            </summary>
        </member>
        <member name="T:SharpNL.SentenceDetector.IEndOfSentenceScanner">
            <summary>
            Scans for the offsets of sentence ending characters.
            </summary>
            <remarks>
            Implementations of this interface can use regular expressions,
            hand-coded DFAs, and other scanning techniques to locate end of
            sentence offsets.
            </remarks>
        </member>
        <member name="M:SharpNL.SentenceDetector.IEndOfSentenceScanner.GetEndOfSentenceCharacters">
            <summary>
            Returns an array of character which can indicate the end of a sentence.
            </summary>
            <returns>An array of character which can indicate the end of a sentence.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.IEndOfSentenceScanner.GetPositions(System.String)">
            <summary>
            Scans the specified string for sentence ending characters and
            returns their offsets.
            </summary>
            <param name="value">The value.</param>
            <returns>The positions list.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.IEndOfSentenceScanner.GetPositions(System.Char[])">
            <summary>
            Scans the characters for sentence ending characters and returns their offsets.
            </summary>
            <param name="chars">The chars to scan.</param>
            <returns>Positions.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultEndOfSentenceScanner.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.DefaultEndOfSentenceScanner"/> with the specified eos delimiters.
            </summary>
            <param name="eosCharacters">The end of sentence characters.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultEndOfSentenceScanner.GetEndOfSentenceCharacters">
            <summary>
            Returns an array of character which can indicate the end of a sentence.
            </summary>
            <returns>An array of character which can indicate the end of a sentence.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultEndOfSentenceScanner.GetPositions(System.String)">
            <summary>
            Scans the specified string for sentence ending characters and
            returns their offsets.
            </summary>
            <param name="value">The value.</param>
            <returns>The positions list.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultEndOfSentenceScanner.GetPositions(System.Text.StringBuilder)">
            <summary>
            Scans the specified string for sentence ending characters and returns their offsets.
            </summary>
            <param name="sb">The sb.</param>
            <returns>The positions list.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultEndOfSentenceScanner.GetPositions(System.Char[])">
            <summary>
            Scans the characters for sentence ending characters and returns their offsets.
            </summary>
            <param name="chars">The chars to scan.</param>
            <returns>Positions.</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.DefaultSentenceContextGenerator">
            <summary>
            Generate event contexts for maxent decisions for sentence detection.
            </summary>
        </member>
        <member name="T:SharpNL.SentenceDetector.ISentenceContextGenerator">
            <summary>
            Interface for <see cref="T:SentenceDetectorME"/> context generators.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.ISentenceContextGenerator.GetContext(System.String,System.Int32)">
            <summary>
            Returns an array of contextual features for the potential sentence boundary at the
            specified position within the specified string buffer.
            </summary>
            <param name="value">The value for which sentences are being determined.</param>
            <param name="position">An index into the specified string buffer when a sentence boundary may occur.</param>
            <returns>An array of contextual features for the potential sentence boundary at the specified position within the specified string buffer.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultSentenceContextGenerator.CollectFeatures(System.String,System.String,System.String,System.String,System.Nullable{System.Char})">
            <summary>
            Determines some of the features for the sentence detector and adds them to list features.
            </summary>
            <param name="prefix">String preceding the eos character in the eos token.</param>
            <param name="suffix">String following the eos character in the eos token.</param>
            <param name="previous">Space delimited token preceding token containing eos character.</param>
            <param name="next">Space delimited token following token containing eos character.</param>
            <param name="eosChar">The EOS character been analyzed.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultSentenceContextGenerator.GetContext(System.String,System.Int32)">
            <summary>
            Returns an array of contextual features for the potential sentence boundary at the
            specified position within the specified string buffer.
            </summary>
            <param name="value">The value for which sentences are being determined.</param>
            <param name="position">An index into the specified string buffer when a sentence boundary may occur.</param>
            <returns>An array of contextual features for the potential sentence boundary at the specified position within the specified string buffer.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultSentenceContextGenerator.NextSpaceIndex(System.String,System.Int32,System.Int32)">
            <summary>
            Finds the index of the nearest space after a specified index.
            </summary>
            <param name="sb">The string buffer which contains the text being examined.</param>
            <param name="seek">The index to begin searching from.</param>
            <param name="lastIndex">The last index of the <paramref name="sb"/>.</param>
            <returns>The index which contains the nearest space.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.DefaultSentenceContextGenerator.PreviousSpaceIndex(System.String,System.Int32)">
            <summary>
            Finds the index of the nearest space before a specified index which is not itself preceded by a space.
            </summary>
            <param name="sb">The string buffer which contains the text being examined.</param>
            <param name="seek">The index to begin searching from.</param>
            <returns>The index which contains the nearest space.</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.EmptyLinePreprocessorStream">
            <summary>
            Stream to to clean up empty lines for empty line separated document streams.
            <code>
             - Skips empty line at training data start.
             - Transforms multiple empty lines in a row into one.
             - Replaces white space lines with empty lines.
            </code>
            This stream should be used by the components that mark empty lines to mark document boundaries.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.EmptyLinePreprocessorStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.ISentenceDetector">
            <summary>
            The interface for sentence detectors, which find the sentence boundaries in a text.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.ISentenceDetector.SentDetect(System.String)">
            <summary>
            Detects the sentences in the specified string.
            </summary>
            <param name="text">The string to be sentence detected.</param>
            <returns>The <see cref="T:string[]"/> with the individual sentences as the array elements.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.ISentenceDetector.SentPosDetect(System.String)">
            <summary>
            Detects the position of the sentences in the specified string.
            </summary>
            <param name="text">The string to be sentence detected.</param>
            <returns>The <see cref="T:Span[]"/> with the spans (offsets into <paramref name="text"/>) for each detected sentence as the individuals array elements.</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.Language.Factory">
            <summary>
            Represents the sentence detection factory.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.Factory.CreateEndOfSentenceScanner(System.String)">
            <summary>
            Creates the end of sentence scanner for the specified language.
            </summary>
            <param name="languageCode">The language code.</param>
            <returns>IEndOfSentenceScanner.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.Factory.CreateEndOfSentenceScanner(System.Char[])">
            <summary>
            Creates the end of sentence scanner with the specified end of sentence characters.
            </summary>
            <param name="customEOSCharacters">The custom eos characters.</param>
            <returns>IEndOfSentenceScanner.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.Factory.CreateSentenceContextGenerator(System.String)">
            <summary>
            Creates the sentence context generator.
            </summary>
            <param name="languageCode">The language code.</param>
            <returns>ISentenceContextGenerator.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.Factory.CreateSentenceContextGenerator(System.Collections.Generic.List{System.String},System.Char[])">
            <summary>
            Creates the sentence context generator with the specified abbreviation set and the custom EOS characters.
            </summary>
            <param name="abbreviations">The abbreviations.</param>
            <param name="customEOSCharacters">The custom eos characters.</param>
            <returns>The context generator.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.Factory.CreateSentenceContextGenerator(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates the sentence context generator with the specified abbreviation set.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="abbreviations">The abbreviations.</param>
            <returns>The context generator.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.Factory.GetEOSCharacters(System.String)">
            <summary>
            Gets the end of sentence characters for the specified language.
            </summary>
            <param name="languageCode">The language code.</param>
            <returns>System.Char[].</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator">
            <summary>
            Generate event contexts for maxent decisions for sentence detection.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator"/> with no induced abbreviations.
            </summary>
            <param name="eosCharacters">The eos characters.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator.#ctor(System.Collections.Generic.List{System.String},System.Char[])">
            <summary>
            Creates a new <see cref="T:SentenceContextGenerator"/> instance which uses the set of induced abbreviations.
            </summary>
            <param name="inducedAbbreviations">The induced abbreviations. Example: "Mr."</param>
            <param name="eosCharacters">The eos characters.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inducedAbbreviations"/>
            or
            <paramref name="eosCharacters"/>
            </exception>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator.GetContext(System.String,System.Int32)">
            <summary>
            Returns an array of contextual features for the potential sentence boundary at the
            specified position within the specified string buffer.
            </summary>
            <param name="value">The value for which sentences are being determined.</param>
            <param name="position">An index into the specified string buffer when a sentence boundary may occur.</param>
            <returns>An array of contextual features for the potential sentence boundary at the specified position within the specified string buffer.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator.CollectFeatures(System.String,System.String,System.String,System.String,System.Char)">
            <summary>
            Determines some of the features for the sentence detector and adds them to list features.
            </summary>
            <param name="prefix">String preceding the eos character in the eos token.</param>
            <param name="suffix">String following the eos character in the eos token.</param>
            <param name="previous">Space delimited token preceding token containing eos character.</param>
            <param name="next">Space delimited token following token containing eos character.</param>
            <param name="eosChar">The eos character.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator.IsFirstUpper(System.String)">
            <summary>
            Determines whether the first character of specified string is categorized as an uppercase letter.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the first character of specified string is categorized as an uppercase letter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator.NextSpaceIndex(System.String,System.Int32,System.Int32)">
            <summary>
            Finds the index of the nearest space after a specified index.
            </summary>
            <param name="value">The string buffer which contains the text being examined.</param>
            <param name="seek">The index to begin searching from.</param>
            <param name="lastIndex">The highest index of the <paramref name="value"/>.</param>
            <returns>The index which contains the nearest space.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.pt.PtSentenceContextGenerator.PreviousSpaceIndex(System.String,System.Int32)">
            <summary>
            Finds the index of the nearest space before a specified index which is not
            itself preceded by a space.
            </summary>
            <param name="value">The string buffer which contains the text being examined.</param>
            <param name="seek">The index to begin searching from.</param>
            <returns>The index which contains the nearest space.</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.Language.pt.PtSentenceDetectorFactory">
            <summary>
            Represents a portuguese sentence detection factory.
            </summary>
        </member>
        <member name="T:SharpNL.SentenceDetector.SentenceDetectorFactory">
            <summary>
            The factory that provides SentenceDetector default implementations and resources.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorFactory.CreateArtifactMap">
            <summary>
            Creates a dictionary with pairs of keys and objects. 
            The models implementation should call this constructor that creates a model programmatically.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorFactory.CreateManifestEntries">
            <summary>
            Creates the manifest entries that will be added to the model manifest
            </summary>
            <returns>The manifest entries to added to the model manifest.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorFactory.GetEndOfSentenceScanner">
            <summary>
            Gets the end of sentence scanner.
            </summary>
            <returns>IEndOfSentenceScanner.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorFactory.GetContextGenerator">
            <summary>
            Gets the context generator.
            </summary>
            <returns>ISentenceContextGenerator.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorFactory.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts. 
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Invalid artifact map.</exception>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceDetectorFactory.AbbreviationDictionary">
            <summary>
            Gets the abbreviation dictionary.
            </summary>
            <value>The abbreviation dictionary.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceDetectorFactory.EOSCharacters">
            <summary>
            Gets the EOS characters.
            </summary>
            <value>The EOS characters.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceDetectorFactory.LanguageCode">
            <summary>
            Gets the language code.
            </summary>
            <value>The language code.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceDetectorFactory.UseTokenEnd">
            <summary>
            Gets a value indicating whether this instance is use token end.
            </summary>
            <value><c>true</c> if this instance is use token end; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.pt.PtSentenceDetectorFactory.GetContextGenerator">
            <summary>
            Gets the portuguese context generator.
            </summary>
            <returns>The portuguese context generator.</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.NewlineSentenceDetector">
            <summary>
            The Newline Sentence Detector assumes that sentences are line delimited and 
            recognizes one sentence per non-empty line.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.NewlineSentenceDetector.SentDetect(System.String)">
            <summary>
            Detects the sentences in the specified string.
            </summary>
            <param name="text">The string to be sentence detected.</param>
            <returns>The <see cref="T:string[]"/> with the individual sentences as the array elements.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.NewlineSentenceDetector.SentPosDetect(System.String)">
            <summary>
            Detects the position of the sentences in the specified string.
            </summary>
            <param name="text">The string to be sentence detected.</param>
            <returns>The <see cref="T:Span[]"/> with the spans (offsets into <paramref name="text"/>) for each detected sentence as the individuals array elements.</returns>
        </member>
        <member name="P:SharpNL.SentenceDetector.NewlineSentenceDetector.Instance">
            <summary>
            Gets the <see cref="T:SharpNL.SentenceDetector.NewlineSentenceDetector"/> instance.
            </summary>
            <value>The <see cref="T:SharpNL.SentenceDetector.NewlineSentenceDetector"/> instance.</value>
        </member>
        <member name="T:SharpNL.SentenceDetector.Language.th.ThSentenceContextGenerator">
            <summary>
            Creates contexts/features for end-of-sentence detection in Thai text.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.Language.th.ThSentenceContextGenerator.CollectFeatures(System.String,System.String,System.String,System.String,System.Nullable{System.Char})">
            <summary>
            Determines some of the features for the sentence detector and adds them to list features.
            </summary>
            <param name="prefix">String preceding the eos character in the eos token.</param>
            <param name="suffix">String following the eos character in the eos token.</param>
            <param name="previous">Space delimited token preceding token containing eos character.</param>
            <param name="next">Space delimited token following token containing eos character.</param>
            <param name="eosChar">The EOS character been analyzed.</param>
        </member>
        <member name="T:SharpNL.SentenceDetector.SentenceDetectorEvaluator">
            <summary>
            The SentenceDetectorEvaluator measures the performance of the given <see cref="T:SharpNL.SentenceDetector.ISentenceDetector"/>
            with the provided reference <see cref="T:SharpNL.SentenceDetector.SentenceSample"/>s.
            </summary>
            <seealso cref="T:SharpNL.Utility.Evaluation.Evaluator`2"/>
            <seealso cref="T:SharpNL.SentenceDetector.ISentenceDetector"/>
            <seealso cref="T:SharpNL.SentenceDetector.SentenceSample"/>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorEvaluator.#ctor(SharpNL.SentenceDetector.ISentenceDetector,SharpNL.Utility.Evaluation.IEvaluationMonitor{SharpNL.SentenceDetector.SentenceSample}[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.SentenceDetectorEvaluator"/> class.
            </summary>
            <param name="sentenceDetector">The sentence detector.</param>
            <param name="listeners">The evaluation sample listeners.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorEvaluator.ProcessSample(SharpNL.SentenceDetector.SentenceSample)">
            <summary>
            Evaluates the given reference sample object.
            The implementation has to update the score after every invocation.
            </summary>
            <param name="reference">The reference sample.</param>
            <returns>The predicted sample</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.SentenceDetectorME">
            <summary>
            A maximum entropy model is used to evaluate end-of-sentence characters in a
            string to determine if they signify the end of a sentence.
            </summary>
        </member>
        <member name="F:SharpNL.SentenceDetector.SentenceDetectorME.SPLIT">
            <summary>
            Constant indicates a sentence split.
            </summary>
        </member>
        <member name="F:SharpNL.SentenceDetector.SentenceDetectorME.NO_SPLIT">
            <summary>
            Constant indicates no sentence split.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorME.#ctor(SharpNL.SentenceDetector.SentenceModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.SentenceDetectorME"/> using the given sentence model.
            </summary>
            <param name="sentenceModel">The sentence model.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="sentenceModel"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorME.SentDetect(System.String)">
            <summary>
            Detects the sentences in the specified string.
            </summary>
            <param name="value">The string to be sentence detected.</param>
            <returns>The <see cref="T:string[]"/> with the individual sentences as the array elements.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorME.SentPosDetect(System.String)">
            <summary>
            Detects the position of the sentences in the specified string.
            </summary>
            <param name="text">The string to be sentence detected.</param>
            <returns>The <see cref="T:Span[]"/> with the spans (offsets into <paramref name="text"/>) for each detected sentence as the individuals array elements.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorME.IsAcceptableBreak(System.String,System.Int32,System.Int32)">
            <summary>
            Allows subclasses to check an overzealous (read: poorly trained) model from flagging 
            obvious non-breaks as breaks based on some boolean determination of a breaks acceptability. 
            </summary>
            <param name="s">The string in which the break occurred.</param>
            <param name="fromIndex">The start of the segment currently being evaluated.</param>
            <param name="candidateIndex">The index of the candidate sentence ending.</param>
            <returns><c>true</c> if if the break is acceptable; otherwise, <c>false</c>.</returns>
            <remarks>
            The default behavior of this method was changed to accept the 
            abbreviations when the sentence model has a dictionary specified.
            </remarks>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorME.GetSentenceProbabilities">
            <summary>
            Gets the probabilities associated with the most recent calls to <see cref="M:SentDetect"/>.
            </summary>
            <returns>
            Probability for each sentence returned for the most recent call to sentDetect.
            If not applicable an empty array is returned.
            </returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.SentenceDetector.SentenceSample},SharpNL.SentenceDetector.SentenceDetectorFactory,SharpNL.Utility.TrainingParameters)">
            <summary>
            Trains sentence detection model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="factory">The sentence detector factory.</param>
            <returns>The trained <see cref="T:SharpNL.SentenceDetector.SentenceModel"/> object.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceDetectorME.Train(System.String,SharpNL.Utility.IObjectStream{SharpNL.SentenceDetector.SentenceSample},SharpNL.SentenceDetector.SentenceDetectorFactory,SharpNL.Utility.TrainingParameters,SharpNL.Monitor)">
            <summary>
            Trains sentence detection model with the given parameters.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="samples">The data samples.</param>
            <param name="factory">The sentence detector factory.</param>
            <param name="parameters">The machine learnable parameters.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The trained <see cref="T:SharpNL.SentenceDetector.SentenceModel"/> object.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.SentenceDetector.SentenceSample},SharpNL.SentenceDetector.ISentenceContextGenerator,SharpNL.SentenceDetector.IEndOfSentenceScanner)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.SentenceEventStream"/> class.
            </summary>
            <param name="samples">The samples.</param>
            <param name="cg">The sentence context generator.</param>
            <param name="scanner">The end of sentence scanner.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceEventStream.CreateEvents(SharpNL.SentenceDetector.SentenceSample)">
            <summary>
            Creates events for the provided sample.
            </summary>
            <param name="sample">The sample the sample for which training <see cref="T:Event"/>s are be created.</param>
            <returns>The events enumerator.</returns>
        </member>
        <member name="T:SharpNL.SentenceDetector.SentenceModel">
            <summary>
            The <see cref="T:SharpNL.SentenceDetector.SentenceModel"/> is the model used by a learnable <see cref="T:SharpNL.SentenceDetector.ISentenceDetector"/>.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceModel.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes the current instance. The sub-class constructor should call the method <see cref="M:SharpNL.Utility.Model.BaseModel.CheckArtifactMap"/> to check the artifact map is OK.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="manifestInfoEntries">Additional information in the manifest.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceModel.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="stream">The input stream containing the model.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="fileName">The model filename.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file does not exist.</exception>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceModel.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts.
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unable to find the manifest entry.</exception>
            <remarks>Subclasses should generally invoke super.validateArtifactMap at the beginning of this method.</remarks>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceModel.Abbreviations">
            <summary>
            Gets the abbreviation dictionary.
            </summary>
            <value>The abbreviation dictionary.</value>
            <remarks>Default value is null.</remarks>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceModel.DefaultFactory">
            <summary>
            Gets the default tool factory.
            </summary>
            <returns>The default tool factory.</returns>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceModel.EosCharacters">
            <summary>
            Gets the EOS characters.
            </summary>
            <value>The EOS characters.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceModel.MaxentModel">
            <summary>
            Gets the maximum entropy model.
            </summary>
            <value>The maximum entropy model.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceModel.Factory">
            <summary>
            Gets the factory.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceModel.UseTokenEnd">
            <summary>
            Gets a value indicating whether end token is used.
            </summary>
            <value><c>true</c> if the end token is used.; otherwise, <c>false</c>.</value>
            <remarks>Default value is <c>true</c>.</remarks>
        </member>
        <member name="T:SharpNL.SentenceDetector.SentenceSample">
            <summary>
            Represents a document with begin indexes of the individual sentences.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceSample.#ctor(System.String,SharpNL.Utility.Span[])">
            <summary>Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.SentenceSample"/> class.</summary>
            <param name="document">The document.</param>
            <param name="sentences">The sentences.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceSample.#ctor(SharpNL.Tokenize.IDetokenizer,System.String[][])">
            <summary>Initializes a new instance of the <see cref="T:SharpNL.SentenceDetector.SentenceSample"/> with de specified detokenizer and sentences.</summary>
            <param name="detokenizer">The detokenizer.</param>
            <param name="sentences">The sentences.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceSample.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceSample.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:SentenceSample" />.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceSample.Equals(SharpNL.SentenceDetector.SentenceSample)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceSample.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceSample.Document">
            <summary>Gets the document.</summary>
            <value>The document.</value>
        </member>
        <member name="P:SharpNL.SentenceDetector.SentenceSample.Sentences">
            <summary>Gets the sentences.</summary>
            <value>The the begin indexes of the sentences in the document.</value>
        </member>
        <member name="T:SharpNL.SentenceDetector.SentenceSampleStream">
            <summary>
            This class is a stream filter which reads a sentence by line samples from
            a reader and converts them into <see cref="T:SentenceSample"/> objects.
            An empty line indicates the begin of a new document.
            </summary>
        </member>
        <member name="M:SharpNL.SentenceDetector.SentenceSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Tokenize.AbstractTokenizer">
            <summary>
            Represents an abstract tokenizer.
            </summary>
        </member>
        <member name="T:SharpNL.Tokenize.ITokenizer">
            <summary>
            The interface for tokenizers, which segment a string into its tokens.
            </summary>
            <remarks>
            Tokenization is a necessary step before more complex NLP tasks can be applied,
            these usually process text on a token level. The quality of tokenization is
            important because it influences the performance of high-level task applied to it.
            
            In segmented languages like English most words are segmented by white spaces
            expect for punctuations, etc. which is directly attached to the word without a white space
            in between, it is not possible to just split at all punctuations because in abbreviations dots
            are a part of the token itself. A tokenizer is now responsible to split these tokens
            correctly.
            
            In non-segmented languages like Chinese tokenization is more difficult since words
            are not segmented by a whitespace.
            
            Tokenizers can also be used to segment already identified tokens further into more
            atomic parts to get a deeper understanding. This approach helps more complex task
            to gain insight into tokens which do not represent words like numbers, units or tokens
            which are part of a special notation.
            
            For most further task it is desirable to over tokenize rather than under tokenize.
            </remarks>
        </member>
        <member name="M:SharpNL.Tokenize.ITokenizer.Tokenize(System.String)">
            <summary>
            Splits a string into its atomic parts.
            </summary>
            <param name="value">The string to be tokenized.</param>
            <returns>The String[] with the individual tokens as the array elements.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.ITokenizer.TokenizePos(System.String)">
            <summary>
            Finds the boundaries of atomic parts in a string.
            </summary>
            <param name="value">The string to be tokenized.</param>
            <returns>The <see cref="T:Span[]"/> with the spans (offsets into s) for each token as the individuals array elements.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.AbstractTokenizer.Tokenize(System.String)">
            <summary>
            Splits a string into its atomic parts.
            </summary>
            <param name="value">The string to be tokenized.</param>
            <returns>The String[] with the individual tokens as the array elements.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.AbstractTokenizer.TokenizePos(System.String)">
            <summary>
            Finds the boundaries of atomic parts in a string.
            </summary>
            <param name="value">The string to be tokenized.</param>
            <returns>The <see cref="T:Span[]"/> with the spans (offsets into s) for each token as the individuals array elements.</returns>
        </member>
        <member name="T:SharpNL.Tokenize.DefaultTokenContextGenerator">
            <summary>
            Generate events for maxent decisions for tokenization.
            </summary>
        </member>
        <member name="T:SharpNL.Tokenize.ITokenContextGenerator">
            <summary>
            Interface for <see cref="T:SharpNL.Tokenize.TokenizerME"/> context generators.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.ITokenContextGenerator.GetContext(System.String,System.Int32)">
            <summary>
            Returns an array of features for the specified sentence string at the specified index.
            </summary>
            <param name="sentence">The string for a sentence.</param>
            <param name="index">The index to consider splitting as a token.</param>
            <returns>An array of features for the specified sentence string at the specified index.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.DefaultTokenContextGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.DefaultTokenContextGenerator"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.DefaultTokenContextGenerator.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.DefaultTokenContextGenerator"/> class.
            </summary>
            <param name="inducedAbbreviations">The induced abbreviations.</param>
        </member>
        <member name="M:SharpNL.Tokenize.DefaultTokenContextGenerator.GetContext(System.String,System.Int32)">
            <summary>
            Returns an array of features for the specified sentence string at the specified index. 
            </summary>
            <param name="sentence">The string for a sentence.</param>
            <param name="index">The index to consider splitting as a token.</param>
            <returns>An array of features for the specified sentence string at the specified index.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.DefaultTokenContextGenerator.CreateContext(System.String,System.Int32)">
            <summary>
            Returns an array of features for the specified sentence string at the specified index. 
            Extensions of this class can override this method to create a customized <see cref="T:SharpNL.Tokenize.ITokenContextGenerator"/>
            </summary>
            <param name="sentence">The string for a sentence.</param>
            <param name="index">The index to consider splitting as a token.</param>
            <returns>An array of features for the specified sentence string at the specified index.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.DefaultTokenContextGenerator.AddCharPreds(System.String,System.Char,System.Collections.Generic.List{System.String})">
            <summary>
            Adds the character preds. Helper function for getContext.
            </summary>
            <param name="key">The key.</param>
            <param name="c">The c.</param>
            <param name="preds">The preds.</param>
        </member>
        <member name="T:SharpNL.Tokenize.DetokenizationDictionary">
            <summary>
            Class DetokenizationDictionary.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.DetokenizationDictionary.ParseOperation(System.String)">
            <summary>
            Parses the operation string into a valid <see cref="T:SharpNL.Tokenize.DetokenizationDictionary.Operation"/> value. Return null if the string cannot be parsed.
            </summary>
            <param name="operation">The operation.</param>
            <returns><see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:SharpNL.Tokenize.DetokenizationDictionary.GetOperationString(SharpNL.Tokenize.DetokenizationDictionary.Operation)">
            <summary>
            Gets the equivalent/compatible string value from the operation enum.
            </summary>
            <param name="operation">The operation.</param>
            <returns>The equivalent/compatible string value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">operation</exception>
        </member>
        <member name="M:SharpNL.Tokenize.DetokenizationDictionary.Add(System.String,SharpNL.Tokenize.DetokenizationDictionary.Operation)">
            <summary>
            Adds the specified token and its operation value.
            </summary>
            <param name="token">The token.</param>
            <param name="operation">The operation.</param>
            <exception cref="T:System.ArgumentNullException">token</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">operation</exception>
        </member>
        <member name="M:SharpNL.Tokenize.DetokenizationDictionary.Contains(System.String)">
            <summary>
            Determines whether the dictionary contains the specified token operation.
            </summary>
            <param name="token">The token.</param>
            <returns><c>true</c> if  the dictionary contains the specified token operation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.DetokenizationDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:String"/> key that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Tokenize.DetokenizationDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Tokenize.DetokenizationDictionary.Serialize(System.IO.Stream)">
            <summary>
            Serializes this dictionary to the specified output stream.
            </summary>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="P:SharpNL.Tokenize.DetokenizationDictionary.Count">
            <summary>
            Gets the number of operations contained in this dictionary.
            </summary>
            <value>The number of operations contained in this dictionary.</value>
        </member>
        <member name="P:SharpNL.Tokenize.DetokenizationDictionary.Item(System.String)">
            <summary>
            Gets the <see cref="T:SharpNL.Tokenize.DetokenizationDictionary.Operation"/> for the specified token.
            </summary>
            <param name="token">The key.</param>
            <returns>DetokenizationOperation.</returns>
        </member>
        <member name="T:SharpNL.Tokenize.DetokenizationDictionary.Operation">
            <summary>
            Enumerates the dictionary detokenization operations.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.DetokenizationDictionary.Operation.MoveRight">
            <summary>
            Attaches the token to the token on the right side.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.DetokenizationDictionary.Operation.MoveLeft">
            <summary>
            Attaches the token to the token on the left side.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.DetokenizationDictionary.Operation.MoveBoth">
            <summary>
            Attaches the token to the token on the left and right sides.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.DetokenizationDictionary.Operation.RightLeftMatching">
            <summary>
            Attaches the token token to the right token on first occurrence, and
            to the token on the left side on the second occurrence.
            </summary>
        </member>
        <member name="T:SharpNL.Tokenize.DetokenizationOperation">
            <summary>
            This enum contains an operation for every token to merge the tokens together to their detokenized form.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.DetokenizationOperation.MergeToRight">
            <summary>
            The current token should be attached to the begin token on the right side.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.DetokenizationOperation.MergeToLeft">
            <summary>
            The current token should be attached to the string on the left side.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.DetokenizationOperation.MergeBoth">
            <summary>
            The current token should be attached to the string on the left side, as well 
            as to the begin token on the right side.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.DetokenizationOperation.NoOperation">
            <summary>
            Do not perform a merge operation for this token, but is possible that another
            token can be attached to the left or right side of this one.
            </summary>
        </member>
        <member name="T:SharpNL.Tokenize.DictionaryDetokenizer">
            <summary>
            A rule based detokenizer. Simple rules which indicate in which direction a token should be 
            moved are looked up in a <see cref="T:SharpNL.Tokenize.DetokenizationDictionary"/> object.
            </summary>
        </member>
        <member name="T:SharpNL.Tokenize.IDetokenizer">
            <summary>A Detokenizer merges tokens back to their untokenized representation.</summary>
        </member>
        <member name="M:SharpNL.Tokenize.IDetokenizer.Detokenize(System.String[])">
            <summary>Detokenizes the specified tokens.</summary>
            <param name="tokens">The tokens to detokenize.</param>
            <returns>The merge operations to detokenize the input tokens.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.IDetokenizer.Detokenize(System.String[],System.String)">
            <summary>
            Detokenize the input tokens into a String. Tokens which are connected without a space in 
            between can be separated by a split marker.
            </summary>
            <param name="tokens">The token which should be concatenated.</param>
            <param name="splitMarker">The split marker or <c>null</c>.</param>
            <returns>The detokenized string.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.DictionaryDetokenizer.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.DictionaryDetokenizer"/> class.
            </summary>
            <param name="dictionaryFile">The dictionary file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionaryFile"/></exception>
            <exception cref="T:System.IO.FileNotFoundException">The dictionary file does not exist.</exception>
        </member>
        <member name="M:SharpNL.Tokenize.DictionaryDetokenizer.Detokenize(System.String[])">
            <summary>Detokenizes the specified tokens.</summary>
            <param name="tokens">The tokens to detokenize.</param>
            <returns>The merge operations to detokenize the input tokens.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.DictionaryDetokenizer.Detokenize(System.String[],System.String)">
            <summary>Detokenize the input tokens into a String. Tokens which are connected without a space inbetween can be
            separated by a split marker.</summary>
            <param name="tokens">The tokens to detokenize.</param>
            <param name="splitMarker">The split marker or null.</param>
            <returns>The detokenized string.</returns>
        </member>
        <member name="T:SharpNL.Tokenize.Language.en.EnTokenSampleStream">
            <summary>
            Class which produces an <see cref="T:System.Collections.Generic.IEnumerator`1"/> from a file of space delimited token.
            This class uses a number of English-specific heuristics to un-separate tokens which
            are typically found together in text.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.Language.en.EnTokenSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.Language.en.EnTokenSampleStream.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:SharpNL.Tokenize.Language.en.EnTokenSampleStream.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:SharpNL.Tokenize.Language.en.EnTokenSampleStream.Current">
            <summary>
            Gets the <see cref="T:SharpNL.Tokenize.TokenSample"/> in the collection at the current position of the <see cref="T:SharpNL.Tokenize.Language.en.EnTokenSampleStream"/>.
            </summary>
            <returns>
            The <see cref="T:SharpNL.Tokenize.TokenSample"/> in the collection at the current position of the <see cref="T:SharpNL.Tokenize.Language.en.EnTokenSampleStream"/>.
            </returns>
        </member>
        <member name="P:SharpNL.Tokenize.Language.en.EnTokenSampleStream.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="P:SharpNL.Tokenize.Language.en.EnTokenSampleStream.HasNext">
            <summary>
            Gets a value indicating whether this instance has a next <see cref="T:SharpNL.Tokenize.TokenSample"/>.
            </summary>
            <value><c>true</c> if this instance has a next <see cref="T:SharpNL.Tokenize.TokenSample"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharpNL.Tokenize.Language.Factory.GetAlphanumeric(System.String)">
            <summary>
            Gets the alpha numeric pattern for the language. Please save the value
            locally because this call is expensive. 
            </summary>
            <param name="languageCode">The language code. If null or unknown the default pattern will be returned.</param>
            <returns>The alpha numeric pattern for the language or the default pattern.</returns>
        </member>
        <member name="T:SharpNL.Tokenize.Language.pt.PtTokenizerFactory">
            <summary>
            Represents a portuguese tokenizer factory.
            </summary>
        </member>
        <member name="T:SharpNL.Tokenize.TokenizerFactory">
            <summary>
            The factory that provides <see cref="T:SharpNL.Tokenize.ITokenizer"/> default implementations and
            resources. Users can extend this class if their application requires
            overriding the <see cref="T:SharpNL.Tokenize.ITokenContextGenerator"/>, <see cref="T:SharpNL.Dictionary.Dictionary"/> etc.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenizerFactory"/> class.
            This constructor should be used only burring de deserialization process. Use other constructors to create this tool factory.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerFactory.#ctor(System.String,SharpNL.Dictionary.Dictionary,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenizerFactory"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="abbreviationDictionary">The abbreviation dictionary.</param>
            <param name="useAlphaNumericOptimization">if true alpha numerics are skipped.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerFactory.#ctor(System.String,SharpNL.Dictionary.Dictionary,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenizerFactory"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="abbreviationDictionary">The abbreviation dictionary.</param>
            <param name="useAlphaNumericOptimization">if true alpha numerics are skipped.</param>
            <param name="alphaNumericPattern">The alpha numeric pattern.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerFactory.CreateArtifactMap">
            <summary>
            Creates a dictionary with pairs of keys and objects. 
            The models implementation should call this constructor that creates a model programmatically.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerFactory.CreateManifestEntries">
            <summary>
            Creates the manifest entries that will be added to the model manifest
            </summary>
            <returns>The manifest entries to added to the model manifest.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerFactory.ValidateArtifactMap">
            <summary>
            Validates the parsed artifacts. 
            </summary>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Invalid artifact map.</exception>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerFactory.AbbreviationDictionary">
            <summary>
            Gets the abbreviation dictionary.
            </summary>
            <value>The abbreviation dictionary.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerFactory.AlphaNumericPattern">
            <summary>
            Gets the alpha numeric pattern.
            </summary>
            <value>The user specified alpha numeric pattern or a default.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerFactory.ContextGenerator">
            <summary>
            Gets the context generator.
            </summary>
            <value>The context generator.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerFactory.LanguageCode">
            <summary>
            Gets the language code.
            </summary>
            <value>The language code.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerFactory.UseAlphaNumericOptimization">
            <summary>
            Gets a value indicating whether to use alpha numeric optimization.
            </summary>
            <value><c>true</c> if alpha numeric optimization will be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Tokenize.Language.pt.PtTokenizerFactory.ContextGenerator">
            <summary>
            Gets the context generator.
            </summary>
            <value>The context generator.</value>
        </member>
        <member name="T:SharpNL.Tokenize.Language.pt.PtTokenContextGenerator">
            <summary>
            Represents a portuguese token context generator.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.Language.pt.PtTokenContextGenerator.CreateContext(System.String,System.Int32)">
            <summary>
            Returns an array of features for the specified sentence string at the specified index. 
            Extensions of this class can override this method to create a customized <see cref="T:SharpNL.Tokenize.ITokenContextGenerator"/>
            </summary>
            <param name="sentence">The string for a sentence.</param>
            <param name="index">The index to consider splitting as a token.</param>
            <returns>An array of features for the specified sentence string at the specified index.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.Language.pt.PtTokenContextGenerator.AddCharPreds(System.String,System.Char,System.Collections.Generic.List{System.String})">
            <summary>
            Adds the character preds. Helper function for getContext.
            </summary>
            <param name="key">The key.</param>
            <param name="c">The c.</param>
            <param name="preds">The preds.</param>
        </member>
        <member name="M:SharpNL.Tokenize.SimpleTokenizer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SharpNL.Tokenize.SimpleTokenizer"/> class from being created.
            </summary>
            <remarks>Use the <see cref="P:SharpNL.Tokenize.SimpleTokenizer.Instance"/> to retrieve the <see cref="T:SharpNL.Tokenize.SimpleTokenizer"/> </remarks>
        </member>
        <member name="M:SharpNL.Tokenize.SimpleTokenizer.TokenizePos(System.String)">
            <summary>
            Finds the boundaries of atomic parts in a string.
            </summary>
            <param name="value">The string to be tokenized.</param>
            <returns>The <see cref="T:Span[]"/> with the spans (offsets into s) for each token as the individuals array elements.</returns>
        </member>
        <member name="P:SharpNL.Tokenize.SimpleTokenizer.Instance">
            <summary>
            Gets the instance of the simple tokenizer.
            </summary>
            <value>The instance of the simple tokenizer.</value>
            <remarks>Use this static reference to retrieve an instance of the <see cref="T:SharpNL.Tokenize.SimpleTokenizer"/>.</remarks>
        </member>
        <member name="T:SharpNL.Tokenize.TokenizerME">
            <summary>
            A Tokenizer for converting raw text into separated tokens.
            </summary>
            <remarks>
            The features are loosely based off of Jeff Reynar's UPenn thesis: 
            <see href="http://repository.upenn.edu/ircs_reports/66/">Topic Segmentation: Algorithms and Applications.</see>
            This tokenizer needs a statistical model to tokenize a text which reproduces the tokenization observed in the training data used to create the model.
            The <see cref="T:SharpNL.Tokenize.TokenizerModel"/> class encapsulates the model and provides methods to create it from the binary representation.
            </remarks>
            <seealso cref="T:SharpNL.Tokenize.ITokenizer"/>
            <seealso cref="T:SharpNL.Tokenize.TokenizerModel"/>
            <seealso cref="T:SharpNL.Tokenize.TokenSample"/>
        </member>
        <member name="F:SharpNL.Tokenize.TokenizerME.Split">
            <summary>
            Constant indicates a token split.
            </summary>
        </member>
        <member name="F:SharpNL.Tokenize.TokenizerME.NoSplit">
            <summary>
            Constant indicates no token split.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerME.#ctor(SharpNL.Tokenize.TokenizerModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenizerME"/> class.
            </summary>
            <param name="model">The tokenizer model.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerME.TokenizePos(System.String)">
            <summary>
            Finds the boundaries of atomic parts in a string.
            </summary>
            <param name="value">The string to be tokenized.</param>
            <returns>The <see cref="T:Span[]"/> with the spans (offsets into s) for each token as the individuals array elements.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerME.Train(SharpNL.Utility.IObjectStream{SharpNL.Tokenize.TokenSample},SharpNL.Tokenize.TokenizerFactory,SharpNL.Utility.TrainingParameters)">
            <summary>
            Trains a model for the <see cref="T:SharpNL.Tokenize.TokenizerME"/>.
            </summary>
            <param name="samples">The samples used for the training.</param>
            <param name="factory">A <see cref="T:SharpNL.Tokenize.TokenizerFactory"/> to get resources from.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <returns>The trained <see cref="T:SharpNL.Tokenize.TokenizerModel"/>.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerME.Train(SharpNL.Utility.IObjectStream{SharpNL.Tokenize.TokenSample},SharpNL.Tokenize.TokenizerFactory,SharpNL.Utility.TrainingParameters,SharpNL.Monitor)">
            <summary>
            Trains a model for the <see cref="T:SharpNL.Tokenize.TokenizerME"/>.
            </summary>
            <param name="samples">The samples used for the training.</param>
            <param name="factory">A <see cref="T:SharpNL.Tokenize.TokenizerFactory"/> to get resources from.</param>
            <param name="parameters">The machine learning train parameters.</param>
            <param name="monitor">
            A evaluation monitor that can be used to listen the messages during the training or it can cancel the training operation.
            This argument can be a <c>null</c> value.
            </param>
            <returns>The trained <see cref="T:SharpNL.Tokenize.TokenizerModel"/>.</returns>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerME.TokenProbabilities">
            <summary>
            Gets the probabilities associated with the most recent calls to 
            <see cref="!:TokenizerME.Tokenize"/> or <see cref="M:SharpNL.Tokenize.TokenizerME.TokenizePos(System.String)"/>.
            </summary>
            <value>
            The probability for each token returned for the most recent call to tokenize. 
            If not applicable an empty array is returned.
            </value>
        </member>
        <member name="T:SharpNL.Tokenize.TokenizerModel">
            <summary>
            The <see cref="T:SharpNL.Tokenize.TokenizerModel"/> is the model used by a learnable <see cref="T:SharpNL.Tokenize.ITokenizer"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerModel.#ctor(SharpNL.ML.Model.IMaxentModel,System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Tokenize.TokenizerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenizerModel"/> class.
            </summary>
            <param name="tokenizerModel">The tokenizer model.</param>
            <param name="manifestInfoEntries">The manifest information entries.</param>
            <param name="tokenizerFactory">The tokenizer factory.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerModel.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="stream">The input stream containing the model.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Model.BaseModel"/> class.
            </summary>
            <param name="fileName">The model filename.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file does not exist.</exception>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerModel.Abbreviations">
            <summary>
            Gets the abbreviation dictionary.
            </summary>
            <value>The abbreviation dictionary.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerModel.DefaultFactory">
            <summary>
            Gets the default tool factory.
            </summary>
            <returns>The default tool factory.</returns>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerModel.Factory">
            <summary>
            Gets the tokenizer factory.
            </summary>
            <value>The tokenizer factory.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerModel.MaxentModel">
            <summary>
            Gets the maxent model.
            </summary>
            <value>The maxent model.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenizerModel.UseAlphaNumericOptimization">
            <summary>
            Gets a value indicating whether to use alpha numeric optimization.
            </summary>
            <value><c>true</c> if alpha numeric optimization will be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.Tokenize.TokenizerStream">
            <summary>
            The <see cref="T:SharpNL.Tokenize.TokenizerStream"/> uses a tokenizer to tokenize the input string and output <see cref="T:SharpNL.Tokenize.TokenSample"/>s.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerStream.#ctor(SharpNL.Tokenize.ITokenizer,SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenizerStream"/> class.
            </summary>
            <param name="tokenizer">The tokenizer.</param>
            <param name="input">The input stream object.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Tokenize.TokenizerStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:SharpNL.Tokenize.TokenSample">
            <summary>
            A <see cref="T:SharpNL.Tokenize.TokenSample"/> is text with token spans.
            </summary>
            <seealso cref="T:SharpNL.Utility.Span"/>
        </member>
        <member name="F:SharpNL.Tokenize.TokenSample.DefaultSeparator">
            <summary>
            The default separator
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenSample.Equals(SharpNL.Tokenize.TokenSample)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if if the specified object is equal to the current object<c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Tokenize.TokenSample.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenSample.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Tokenize.TokenSample.ToString">
            <summary>
            Returns a string that represents the current token sample.
            </summary>
            <returns>
            A string that represents the current token sample.
            </returns>
        </member>
        <member name="P:SharpNL.Tokenize.TokenSample.Separator">
            <summary>
            Gets or sets the separator chars.
            </summary>
            <value>The separator chars.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenSample.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:SharpNL.Tokenize.TokenSample.TokenSpans">
            <summary>
            Gets the token spans.
            </summary>
            <value>The token spans.</value>
        </member>
        <member name="T:SharpNL.Tokenize.TokenSampleStream">
            <summary>
            This class is a stream filter which reads in string encoded samples and creates
            <see cref="T:SharpNL.Tokenize.TokenSample"/>s out of them. The input string sample is tokenized if a
            whitespace or the special separator chars occur.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.TokenSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenSampleStream"/> class.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokenSampleStream.#ctor(SharpNL.Utility.IObjectStream{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokenSampleStream"/> class.
            </summary>
            <param name="samples">The samples.</param>
            <param name="separatorChars">The separator chars.</param>
            <exception cref="T:System.ArgumentNullException">separatorChars</exception>
        </member>
        <member name="M:SharpNL.Tokenize.TokenSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Tokenize.TokSpanEventStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.Tokenize.TokenSample},System.Boolean,System.String,SharpNL.Tokenize.ITokenContextGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.TokSpanEventStream"/> class.
            </summary>
            <param name="samples">The samples.</param>
            <param name="skipAlphaNumerics">if set to <c>true</c> [skip alpha numerics].</param>
            <param name="alphaNumericPattern">The alpha numeric pattern.</param>
            <param name="cg">The token context generator.</param>
        </member>
        <member name="M:SharpNL.Tokenize.TokSpanEventStream.CreateEvents(SharpNL.Tokenize.TokenSample)">
            <summary>
            Creates events for the provided sample.
            </summary>
            <param name="sample">The sample the sample for which training <see cref="T:Event"/>s are be created.</param>
            <returns>The events enumerator.</returns>
        </member>
        <member name="T:SharpNL.Tokenize.WhitespaceTokenizer">
            <summary>
            This tokenizer uses white spaces to tokenize the input text.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.WhitespaceTokenizer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SharpNL.Tokenize.WhitespaceTokenizer"/> class from being created.
            </summary>
            <remarks>The the <see cref="P:SharpNL.Tokenize.WhitespaceTokenizer.Instance"/> to retrieve the instance.</remarks>
        </member>
        <member name="M:SharpNL.Tokenize.WhitespaceTokenizer.TokenizePos(System.String)">
            <summary>
            Finds the boundaries of atomic parts in a string.
            </summary>
            <param name="value">The string to be tokenized.</param>
            <returns>The <see cref="T:Span[]"/> with the spans (offsets into s) for each token as the individuals array elements.</returns>
        </member>
        <member name="P:SharpNL.Tokenize.WhitespaceTokenizer.Instance">
            <summary>
            Gets the instance of the whitespace tokenizer.
            </summary>
            <value>The instance of the whitespace tokenizer.</value>
            <remarks>Use this static reference to retrieve an instance of the <see cref="T:SharpNL.Tokenize.WhitespaceTokenizer"/>.</remarks>
        </member>
        <member name="T:SharpNL.Tokenize.WhitespaceTokenStream">
            <summary>
            This stream formats a <see cref="T:SharpNL.Tokenize.TokenSample"/>s into whitespace separated token strings.
            </summary>
        </member>
        <member name="M:SharpNL.Tokenize.WhitespaceTokenStream.#ctor(SharpNL.Utility.IObjectStream{SharpNL.Tokenize.TokenSample})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Tokenize.WhitespaceTokenStream"/> class.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="M:SharpNL.Tokenize.WhitespaceTokenStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Utility.BeamSearch`1">
            <summary>
            Performs k-best search over sequence.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <remarks>This is based on the description in Ratnaparkhi (1998), PhD diss, Univ. of Pennsylvania.</remarks>
        </member>
        <member name="M:SharpNL.Utility.BeamSearch`1.#ctor(System.Int32,SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.ML.Model.IMaxentModel)">
            <summary>
            Creates new search object.
            </summary>
            <param name="size">The size of the beam (k).</param>
            <param name="cg">The context generator for the model.</param>
            <param name="model">The model for assigning probabilities to the sequence outcomes.</param>
        </member>
        <member name="M:SharpNL.Utility.BeamSearch`1.#ctor(System.Int32,SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.ML.Model.IMaxentModel,System.Int32)">
            <summary>
            Creates new search object.
            </summary>
            <param name="size">The size of the beam (k).</param>
            <param name="cg">The context generator for the model.</param>
            <param name="model">The model for assigning probabilities to the sequence outcomes.</param>
            <param name="cacheSize">Size of the cache.</param>
        </member>
        <member name="M:SharpNL.Utility.BeamSearch`1.#ctor(System.Int32,SharpNL.Utility.IBeamSearchContextGenerator{`0},SharpNL.ML.Model.IMaxentModel,SharpNL.Utility.ISequenceValidator{`0},System.Int32)">
            <summary>
            Creates new search object.
            </summary>
            <param name="size">The size of the beam (k).</param>
            <param name="cg">The context generator for the model.</param>
            <param name="model">The model for assigning probabilities to the sequence outcomes.</param>
            <param name="validator">The sequence validator.</param>
            <param name="cacheSize">Size of the cache.</param>
        </member>
        <member name="M:SharpNL.Utility.BeamSearch`1.BestSequence(`0[],System.Object[])">
            <summary>
            Returns the best sequence of outcomes based on model for this object.
            </summary>
            <param name="sequence">The input sequence.</param>
            <param name="additionalContext">An <see cref="T:object[]"/> of additional context. This is passed to the context generator blindly with the assumption that the context are appropriate.</param>
            <returns>The top ranked sequence of outcomes or null if no sequence could be found.</returns>
        </member>
        <member name="M:SharpNL.Utility.BeamSearch`1.BestSequences(System.Int32,`0[],System.Object[])">
            <summary>
            Finds the n most probable sequences.
            </summary>
            <param name="numSequences">The number sequences.</param>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <returns>The n most probable sequences.</returns>
        </member>
        <member name="M:SharpNL.Utility.BeamSearch`1.BestSequences(System.Int32,`0[],System.Object[],System.Double)">
            <summary>
            Finds the n most probable sequences.
            </summary>
            <param name="numSequences">The number sequences.</param>
            <param name="sequence">The sequence.</param>
            <param name="additionalContext">The additional context.</param>
            <param name="minSequenceScore">The minimum sequence score.</param>
        </member>
        <member name="M:SharpNL.Utility.BeamSearch`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.BeamSearch`1.GetOutcomes">
            <summary>
            Gets all possible outcomes.
            </summary>
            <returns>all possible outcomes.</returns>
        </member>
        <member name="T:SharpNL.Utility.Cache">
            <summary>
            Provides fixed size, pre-allocated, least recently used (LRU) replacement cache.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Cache.first">
            <summary>
            The element in the linked list which was most recently used.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Cache.last">
            <summary>
            The element in the linked list which was least recently used.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Cache.lastKey">
            <summary>
            Temporary holder of the key of the least-recently-used element.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Cache.temp">
            <summary>
            Temporary value used in swap.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Cache.wrappers">
            <summary>
            Holds the object wrappers which the keys are mapped to.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Cache.map">
            <summary>
            Map which stores the keys and values of the cache.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Cache.size">
            <summary>
            The size of the cache.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Cache.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Cache"/> of the specified size.
            </summary>
            <param name="size">The size of the cache.</param>
        </member>
        <member name="M:SharpNL.Utility.Cache.Clear">
            <summary>
            Removes all items from the <see cref="T:Cache"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Cache.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Cache.Get(System.Object)">
            <summary>
            Gets the value associated with the specified key in this cache object.
            </summary>
            <param name="key">The key.</param>
            <returns>The cached object.</returns>
        </member>
        <member name="M:SharpNL.Utility.Cache.GetOrPut``1(System.Object,System.Lazy{``0})">
            <summary>
            Gets the value associated with the specified key in this cache object or initialize the <paramref name="lazy"/>
            object and add the entry in the cache and return it. 
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="lazy">The lazy object that will be initialized if the key is not present in the cache.</param>
            <returns>The cached value or the initialized value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/>
            or
            <paramref name="lazy"/>
            </exception>
        </member>
        <member name="M:SharpNL.Utility.Cache.Put(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Cache"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:SharpNL.Utility.Cache.ContainsKey(System.Object)">
            <summary>
            Determines whether the <see cref="T:Cache"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:Cache"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:Cache"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="T:SharpNL.Utility.CollectionObjectStream`1">
            <summary>
            Represents a collection of objects as a <see cref="T:SharpNL.Utility.IObjectStream`1"/>
            </summary>
            <typeparam name="T">The object type.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.CollectionObjectStream`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.CollectionObjectStream`1"/> with only one object.
            </summary>
            <param name="single">A single object.</param>
        </member>
        <member name="M:SharpNL.Utility.CollectionObjectStream`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.CollectionObjectStream`1"/> with the specified objects.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:SharpNL.Utility.CollectionObjectStream`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.CollectionObjectStream`1.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns, null will return each object from the underlying source exactly once.
            </summary>
            <returns>The next object or null to signal that the stream is exhausted.</returns>
            <exception cref="T:System.ObjectDisposedException">The CollectionObjectStream instance has been disposed and can no longer be used for operations.</exception>
        </member>
        <member name="M:SharpNL.Utility.CollectionObjectStream`1.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The CollectionObjectStream instance has been disposed and can no longer be used for operations.</exception>
        </member>
        <member name="T:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1">
            <summary>
            Provides access to training and test partitions for n-fold cross validation.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.HasNext">
            <summary>
            Gets a value indicating whether there are more partitions available.
            </summary>
            <value><c>true</c> if there are more partitions available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.NumberOfPartitions">
            <summary>
            Gets the number of partitions.
            </summary>
            <value>The number of partitions.</value>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.TrainingSampleStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.TrainingSampleStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.TrainingSampleStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.TrainingSampleStream.GetTestSampleStream">
            <summary>
            Retrieves the <see cref="T:IObjectStream{T}"/> over the test/evaluations elements and poisons this <see cref="T:SharpNL.Utility.Evaluation.CrossValidationPartitioner`1.TrainingSampleStream"/>.
            </summary>
            <returns>IObjectStream&lt;T&gt;.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <remarks>From now on calls to the hasNext and next methods are forbidden and will raise an <see cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="T:SharpNL.Utility.Evaluation.FMeasure`1">
            <summary>
            The FMeasure is an utility class for evaluators which measure precision,
            recall and the resulting f-measure (weighted harmonic mean).
            </summary>
            <typeparam name="T">The type of the objects to be evaluated.</typeparam>
            <remarks>Evaluation results are the arithmetic mean of the precision scores calculated
            for each reference sample and the arithmetic mean of the recall scores
            calculated for each reference sample.</remarks>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.FMeasure`1.CountTruePositives(`0[],`0[])">
            <summary>
            This method counts the number of objects which are equal and occur in the references and predictions arrays.
            Matched items are removed from the prediction list.
            </summary>
            <param name="references">The references.</param>
            <param name="predictions">The predictions.</param>
            <returns>The number of true positives.</returns>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.FMeasure`1.UpdateScores(`0[],`0[])">
            <summary>
            Updates the score based on the number of true positives and the number of predictions and references.
            </summary>
            <param name="references">The references.</param>
            <param name="predictions">The predictions.</param>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.FMeasure`1.MergeInto(SharpNL.Utility.Evaluation.FMeasure{`0})">
            <summary>
            Merge results into FMeasure metric.
            </summary>
            <param name="measure">The measure.</param>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.FMeasure`1.Precision(`0[],`0[])">
            <summary>
            Calculates the precision score for the given reference and predicted spans.
            </summary>
            <param name="references">The references.</param>
            <param name="predictions">The predictions.</param>
            <returns>The precision score or NaN if there are no predicted spans.</returns>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.FMeasure`1.Recall(`0[],`0[])">
            <summary>
            Calculates the recall score for the given reference and predicted spans.
            </summary>
            <param name="references">The references.</param>
            <param name="predictions">The predictions.</param>
            <returns>The recall score or NaN if there are no reference spans.</returns>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.FMeasure`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.FMeasure`1.PrecisionScore">
            <summary>
            Retrieves the arithmetic mean of the precision scores calculated for each evaluated sample. 
            </summary>
            <value>The arithmetic mean of all precision scores</value>
            <remarks>In other words the precision score means the percent of selected items that are correct.</remarks>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.FMeasure`1.RecallScore">
            <summary>
            Retrieves the arithmetic mean of the recall score calculated for each evaluated sample.
            </summary>
            <value>The arithmetic mean of all recall scores</value>
            <remarks>
            In other words is the opposite measure of <see cref="P:SharpNL.Utility.Evaluation.FMeasure`1.PrecisionScore"/>, means the percent
            of correct items that are selected. 
            </remarks>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.FMeasure`1.Value">
            <summary>
            Retrieves the f-measure score.
            <para>
              f-measure = 2 * precision * recall / (precision + recall)
            </para>
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:SharpNL.Utility.Evaluation.Mean">
            <summary>
            Calculates the arithmetic mean of values added with the <see cref="M:Add"/> method.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.Mean.Add(System.Double)">
            <summary>
            Adds a value to the arithmetic mean.
            </summary>
            <param name="value">The value which should be added to the arithmetic mean..</param>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.Mean.Add(System.Double,System.Int64)">
            <summary>
            Adds a value count times to the arithmetic mean.
            </summary>
            <param name="value">The value which should be added to the arithmetic mean.</param>
            <param name="count">Number of times the value should be added to arithmetic mean.</param>
        </member>
        <member name="M:SharpNL.Utility.Evaluation.Mean.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.Mean.Count">
            <summary>
            Gets the number of times a value was added to the mean.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.Mean.Sum">
            <summary>
            Gets the sum.
            </summary>
            <value>The sum.</value>
        </member>
        <member name="P:SharpNL.Utility.Evaluation.Mean.Value">
            <summary>
            Gets the mean of all values added or 0 if there are zero added values.
            </summary>
            <value>The mean of all values added or 0 if there are zero added values.</value>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.AdditionalContextFeatureGenerator">
            <summary>
            The <see cref="T:SharpNL.Utility.FeatureGen.AdditionalContextFeatureGenerator"/> generates the context from the passed 
            in additional context.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.AdditionalContextFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator">
            <summary>
            The <see cref="T:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator"/> aggregates a set of <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/>s
            and calls them to generate the features.
            </summary>
            <seealso cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator.#ctor(System.Collections.Generic.IEnumerable{SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator"/> class.
            </summary>
            <param name="featureGenerators">The feature generators.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator.#ctor(SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator"/> class.
            </summary>
            <param name="featureGenerators">The feature generators.</param>
            <exception cref="T:System.ArgumentException">null values in generators are not permitted!</exception>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator.ClearAdaptiveData">
            <summary>
            Informs the aggregated feature generators that the context of the adaptive data (typically a document)
            is no longer valid.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features for all
            aggregated feature generators.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs the aggregated feature generators that the specified tokens have been classified with the
            corresponding set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator.Generators">
            <summary>
            Gets a readonly collection of all aggregated feature generators.
            </summary>
            <value>All aggregated generators.</value>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.BigramNameFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.CachedFeatureGenerator">
            <summary>
            Caches features of the aggregated <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/>s.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CachedFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CachedFeatureGenerator.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CachedFeatureGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs the feature generator that the specified tokens have been classified with the
            corresponding set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CachedFeatureGenerator.ClearAdaptiveData">
            <summary>
            Informs the feature generator that the context of the adaptive data (typically a document)
            is no longer valid.
            </summary>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.CachedFeatureGenerator.NumberOfCacheHits">
            <summary>
            Gets the number of times a cache hit occurred.
            </summary>
            <value>The number of cache hits.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.CachedFeatureGenerator.NumberOfCacheMisses">
            <summary>
            Gets the number of times a cache miss occurred.
            </summary>
            <value>The number of cache misses.</value>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.CharacterNgramFeatureGenerator">
            <summary>
            The <see cref="T:SharpNL.Utility.FeatureGen.CharacterNgramFeatureGenerator"/> uses character ngrams to generate features about each token.
            The minimum and maximum length can be specified.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CharacterNgramFeatureGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.CharacterNgramFeatureGenerator"/> 
            with min 2 length and max 5 length of ngrams.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CharacterNgramFeatureGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.CharacterNgramFeatureGenerator"/> 
            with the specified minimum and maximum length values.
            </summary>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CharacterNgramFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.CustomFeatureGenerator">
            <summary>
            Represents a base class for custom feature generators.
            </summary>
            <seealso cref="T:SharpNL.Utility.FeatureGen.GeneratorFactory"/>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CustomFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CustomFeatureGenerator.Init(System.Collections.Generic.Dictionary{System.String,System.String},SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Initialized the Custom Feature Generator with defined properties and loaded resources.
            </summary>
            <param name="properties">The properties.</param>
            <param name="provider">The resource provider.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CustomFeatureGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs the feature generator that the specified tokens have been classified with the
            corresponding set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.CustomFeatureGenerator.ClearAdaptiveData">
            <summary>
            Informs the feature generator that the context of the adaptive data (typically a document)
            is no longer valid.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator">
            <summary>
            The <see cref="T:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator"/> uses the <see cref="T:SharpNL.NameFind.DictionaryNameFinder"/>
            to generated features for detected names based on the <see cref="T:SharpNL.Utility.FeatureGen.InSpanGenerator"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator.#ctor(SharpNL.Dictionary.Dictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator"/> with the given dictionary.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator.#ctor(System.String,SharpNL.Dictionary.Dictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator"/> with the given prefix and dictionary.
            </summary>
            <param name="prefix">The prefix/name used to distinguish the generated features.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator.SetDictionary(SharpNL.Dictionary.Dictionary)">
            <summary>
            Sets the dictionary.
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator.SetDictionary(System.String,SharpNL.Dictionary.Dictionary)">
            <summary>
            Sets the dictionary.
            </summary>
            <param name="name">The name used to distinguish the generated features.</param>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.DictionaryFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.AggregatedFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.BigramNameFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.CachedFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.CharacterNgramFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.CustomFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.DefinitionFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.DictionaryFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.DocumentBeginFeatureGenerator.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.PrefixFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.PreviousMapFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.SentenceFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.SuffixFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.TokenClassFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.TokenFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.TokenPatternFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.Factories.WordClusterFeatureGeneratorFactory">
            <summary>
            Defines a word cluster generator factory; it reads an element containing
            'w2vwordcluster' as a tag name; these clusters are typically produced by
            word2vec or clark pos induction systems.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.WordClusterFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.Factories.WindowFeatureGeneratorFactory.Create(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from a the describing XML element.
            </summary>
            <param name="generatorElement">The element which contains the configuration.</param>
            <param name="provider">The resource provider which could be used to access referenced resources.</param>
            <returns>The configured <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> </returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.FeatureGeneratorException">
            <summary>
            Represents errors that occur with feature generators.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.FeatureGeneratorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FeatureGeneratorException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.FeatureGeneratorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FeatureGeneratorException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param><param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.FeatureGeneratorUtil">
            <summary>
            This class provide common utilities for feature generation.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.FeatureGeneratorUtil.#cctor">
            <summary>
            Initializes static members of the <see cref="T:SharpNL.Utility.FeatureGen.FeatureGeneratorUtil"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.FeatureGeneratorUtil.TokenFeature(System.String)">
            <summary>
            Generates a class name for the specified token.
            The classes are as follows where the first matching class is used:
            <ul>
            <li>lc - lowercase alphabetic</li>
            <li>2d - two digits </li>
            <li>4d - four digits </li>
            <li>an - alpha-numeric </li>
            <li>dd - digits and dashes </li>
            <li>ds - digits and slashes </li>
            <li>dc - digits and commas </li>
            <li>dp - digits and periods </li>
            <li>num - digits </li>
            <li>sc - single capital letter </li>
            <li>ac - all capital letters </li>
            <li>ic - initial capital letter </li>
            <li>other - other </li>
            </ul>
            </summary>
            <param name="token">A token or word.</param>
            <returns>The class name that the specified token belongs in.</returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.GeneratorFactory">
            <summary>
            Creates a set of feature generators based on a provided XML descriptor.
            </summary>
            <example>
            Example of an XML descriptor:
            <p>
             &lt;generators&gt;
               &lt;charngram min = "2" max = "5"/&gt;
               &lt;definition/&gt;
               &lt;cache&gt;
                 &lt;window prevLength = "3" nextLength = "3"&gt;
                   &lt;generators&gt;
                     &lt;prevmap/&gt;
                     &lt;sentence/&gt;
                     &lt;tokenclass/&gt;
                     &lt;tokenpattern/&gt;
                     &lt;/generators&gt;
                 &lt;/window&gt;
               &lt;/cache&gt;
             &lt;/generators&gt;
            </p>
            </example>
            <remarks>
            Each XML element is mapped to a <see cref="T:SharpNL.Utility.FeatureGen.XmlFeatureGeneratorFactory"/> which
            is responsible to process the element and create the specified
            <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/>. Elements can contain other elements 
            in this case it is the responsibility of the mapped factory to process the 
            child elements correctly. In some factories this leads to recursive calls 
            the <see cref="M:SharpNL.Utility.FeatureGen.GeneratorFactory.Create(System.IO.Stream,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)"/> method.
            
            In the example above the generators element is mapped to the
            <see cref="T:SharpNL.Utility.FeatureGen.Factories.AggregatedFeatureGeneratorFactory"/> <see cref="T:SharpNL.Utility.FeatureGen.GeneratorFactory"/> which then
            creates all the aggregated <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> to
            accomplish this it evaluates the mapping with the same mechanism
            and gives the child element to the corresponding factories. All
            created generators are added to a new instance of the
            <see cref="T:SharpNL.Utility.FeatureGen.AggregatedFeatureGenerator"/>  which is then returned.
            </remarks>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.GeneratorFactory.Create(System.IO.Stream,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates an <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> from an provided XML descriptor.
            
            Usually this XML descriptor contains a set of nested feature generators
            which are then used to generate the features by one of the opennlp components.
            </summary>
            <param name="inputStream">The <see cref="T:System.IO.Stream"/> from which the descriptor is read, the stream remains open and must be closed by the caller.</param>
            <param name="provider">The resource provider which is used to resolve resources referenced by a key in the descriptor.</param>
            <returns>Created feature generators.</returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.GeneratorFactory.CreateGenerator(System.Xml.XmlElement,SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider)">
            <summary>
            Creates a <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/> for the provided element.
            To accomplish this it looks up the corresponding factory by the
            element tag name. The factory is then responsible for the creation
            of the generator from the element.
            </summary>
            <param name="generatorElement">The generator element.</param>
            <param name="provider">The resource provider which is used to resolve resources referenced by a key in the descriptor.</param>
            <returns>IAdaptiveFeatureGenerator.</returns>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">Unexpected element:  + generatorElement.Name</exception>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.IdentityFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.FeatureGeneratorResourceProvider">
            <summary>
            Retrieves the resource object for the given name/identifier.
            </summary>
            <param name="resourceIdentifier">The identifier which names the resource.</param>
            <returns>The resource object.</returns>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.InSpanGenerator">
            <summary>
            Generates features if the tokens are recognized by the provided <see cref="T:SharpNL.NameFind.ITokenNameFinder"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.InSpanGenerator.#ctor(System.String,SharpNL.NameFind.ITokenNameFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.InSpanGenerator"/> class.
            </summary>
            <param name="prefix">
            The prefix is used to distinguish the generated features from 
            features generated by other instances of <see cref="T:SharpNL.Utility.FeatureGen.InSpanGenerator"/>s.</param>
            <param name="finder">The <see cref="T:SharpNL.NameFind.ITokenNameFinder"/> used to detect the names.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="prefix"/>
            or
            <paramref name="finder"/>
            </exception>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.InSpanGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.OutcomePriorFeatureGenerator">
            <summary>
            The definition feature maps the underlying distribution of outcomes.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.OutcomePriorFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.PrefixFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.PreviousMapFeatureGenerator">
            <summary>
            This class generates features indicating the outcome associated with a previously occurring word.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.PreviousMapFeatureGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.PreviousMapFeatureGenerator"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.PreviousMapFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.PreviousMapFeatureGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs the feature generator that the specified tokens have been classified with the
            corresponding set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.PreviousMapFeatureGenerator.ClearAdaptiveData">
            <summary>
            Informs the feature generator that the context of the adaptive data (typically a document)
            is no longer valid.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.SentenceFeatureGenerator">
            <summary>
            This feature generator creates sentence begin and end features.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.SentenceFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.StringPattern">
            <summary>
            Recognizes predefined patterns in strings.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.StringPattern.Recognize(System.String)">
            <summary>
            Recognizes the <see cref="T:SharpNL.Utility.FeatureGen.StringPattern"/> of the specified string.
            </summary>
            <param name="value">The string to be recognized.</param>
            <returns>The recognized <see cref="T:SharpNL.Utility.FeatureGen.StringPattern"/> object.</returns>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.AllCapitalLetter">
            <summary>
            Gets a value indicating whether if all letters are capital.
            </summary>
            <value><c>true</c> if all letters are capital; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.AllDigit">
            <summary>
            Gets a value indicating whether if all chars are digits.
            </summary>
            <value><c>true</c> if all chars are digits; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.AllLetter">
            <summary>
            Gets a value indicating whether the characters are all letters.
            </summary>
            <value><c>true</c> if all characters are letters.; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.AllLowerCaseLetter">
            <summary>
            Gets a value indicating whether if all letters are lower case.
            </summary>
            <value><c>true</c> if all letters are lower case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.ContainsComma">
            <summary>
            Gets a value indicating whether this pattern contains an comma.
            </summary>
            <value><c>true</c> if this pattern contains comma; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.ContainsDigit">
            <summary>
            Gets a value indicating whether this pattern contains an digit.
            </summary>
            <value><c>true</c> if this pattern contains an digit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.ContainsHyphen">
            <summary>
            Gets a value indicating whether this pattern contains an hyphen.
            </summary>
            <value><c>true</c> if this pattern contains an hyphen; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.ContainsLetters">
            <summary>
            Gets a value indicating whether this pattern contains letters.
            </summary>
            <value><c>true</c> if this pattern contains letters; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.ContainsPeriod">
            <summary>
            Gets a value indicating whether this pattern contains period.
            </summary>
            <value><c>true</c> if this pattern contains period; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.ContainsSlash">
            <summary>
            Gets a value indicating whether this pattern contains slash.
            </summary>
            <value><c>true</c> if this pattern contains slash; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.Digits">
            <summary>
            Gets the number of digits.
            </summary>
            <value>The number of digits.</value>
        </member>
        <member name="P:SharpNL.Utility.FeatureGen.StringPattern.InitialCapitalLetter">
            <summary>
            Gets a value indicating whether the first letter is capital.
            </summary>
            <value><c>true</c> if first letter is capital; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.SuffixFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.TokenClassFeatureGenerator">
            <summary>
            Generates features for different for the class of the token.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.TokenClassFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.TokenFeatureGenerator">
            <summary>
            Generates a feature which contains the token itself.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.TokenFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.TokenPatternFeatureGenerator">
            <summary>
            Partitions tokens into sub-tokens based on character classes and generates
            class features for each of the sub-tokens and combinations of those sub-tokens.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.TokenPatternFeatureGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.TokenPatternFeatureGenerator"/> using
            the <see cref="T:SharpNL.Tokenize.SimpleTokenizer"/> as the default tokenizer.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.TokenPatternFeatureGenerator.#ctor(SharpNL.Tokenize.ITokenizer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.FeatureGen.TokenPatternFeatureGenerator"/> using a
            specified <see cref="T:SharpNL.Tokenize.ITokenizer"/> object.
            </summary>
            <param name="tokenizer">The tokenizer.</param>
            <exception cref="T:System.ArgumentNullException">tokenizer</exception>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.TokenPatternFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.FeatureGen.WindowFeatureGenerator">
            <summary>
            Generates previous and next features for a given <see cref="T:SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator"/>
            The window size can be specified.
            </summary>
            <remarks>
            Features:
            Current token is always included unchanged
            Previous tokens are prefixed with p distance
            Next tokens are prefix with n distance
            </remarks>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WindowFeatureGenerator.#ctor(SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator)">
            <summary>
            Initializes the current instance. The previous and next window size is 5.
            </summary>
            <param name="generator">The feature generator.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WindowFeatureGenerator.#ctor(SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator[])">
            <summary>
            Initializes the current instance with the given parameters.
            </summary>
            <param name="generators">The feature generators.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WindowFeatureGenerator.#ctor(System.Int32,System.Int32,SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator[])">
            <summary>
            Initializes the current instance with the given parameters.
            </summary>
            <param name="prevWindowSize">Size of the window to the left of the current token.</param>
            <param name="nextWindowSize">Size of the window to the right of the current token.</param>
            <param name="generators">The feature generators.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WindowFeatureGenerator.#ctor(SharpNL.Utility.FeatureGen.IAdaptiveFeatureGenerator,System.Int32,System.Int32)">
            <summary>
            Initializes the current instance with the given parameters.
            </summary>
            <param name="generator">Feature generator to apply to the window.</param>
            <param name="prevWindowSize">Size of the window to the left of the current token.</param>
            <param name="nextWindowSize">Size of the window to the right of the current token.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WindowFeatureGenerator.ClearAdaptiveData">
            <summary>
            Informs the feature generator that the context of the adaptive data (typically a document)
            is no longer valid.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WindowFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WindowFeatureGenerator.UpdateAdaptiveData(System.String[],System.String[])">
            <summary>
            Informs the feature generator that the specified tokens have been classified with the
            corresponding set of specified outcomes.
            </summary>
            <param name="tokens">The tokens of the sentence or other text unit which has been processed.</param>
            <param name="outcomes">The outcomes associated with the specified tokens.</param>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WindowFeatureGenerator.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.FeatureGen.WordClusterFeatureGenerator.CreateFeatures(System.Collections.Generic.List{System.String},System.String[],System.Int32,System.String[])">
            <summary>
            Adds the appropriate features for the token at the specified index with the
            specified array of previous outcomes to the specified list of features.
            </summary>
            <param name="features">The list of features to be added to.</param>
            <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
            <param name="index">The index of the token which is currently being processed.</param>
            <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        </member>
        <member name="T:SharpNL.Utility.GenericObjectStream`1">
            <summary>
            Represents an generic object stream.
            </summary>
            <typeparam name="T">The type of the objects in this instance.</typeparam>
        </member>
        <member name="M:SharpNL.Utility.GenericObjectStream`1.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.GenericObjectStream`1.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.GenericObjectStream`1.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.IHeap`1">
            <summary>
            Interface for interacting with a Heap data structure.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            This implementation extract objects from smallest to largest based on either
            their natural ordering or the comparator provided to an implementation.
            While this is a typical of a heap it allows this objects natural ordering to
            match that of other sorted collections.
            </remarks>
        </member>
        <member name="M:SharpNL.Utility.IHeap`1.Extract">
            <summary>
            Removes the smallest element from the heap and returns it.
            </summary>
            <returns>The smallest element from the heap.</returns>
        </member>
        <member name="M:SharpNL.Utility.IHeap`1.First">
            <summary>
            Returns the smallest element of the heap.
            </summary>
            <returns>The top element of the heap.</returns>
        </member>
        <member name="M:SharpNL.Utility.IHeap`1.Last">
            <summary>
            Returns the largest element of the heap.
            </summary>
            <returns>The largest element of the heap.</returns>
        </member>
        <member name="M:SharpNL.Utility.IHeap`1.Add(`0)">
            <summary>
            Adds the specified object to the heap.
            </summary>
            <param name="value">The object to add to the heap.</param>
        </member>
        <member name="M:SharpNL.Utility.IHeap`1.Size">
            <summary>
            Returns the size of the heap.
            </summary>
            <returns>The size of the heap.</returns>
        </member>
        <member name="M:SharpNL.Utility.IHeap`1.IsEmpty">
            <summary>
            Returns whether the heap is empty.
            </summary>
            <returns><c>true</c> if the heap is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.IHeap`1.Clear">
            <summary>
            Clears the contents of the heap.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.IInputStreamFactory">
            <summary>
            Allows repeated reads through a stream for certain types of model building.
            Use <see cref="T:SharpNL.Utility.MockInputStreamFactory"/> for default behavior.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.IInputStreamFactory.CreateInputStream">
            <summary>
            Creates the input stream.
            </summary>
            <returns>Stream.</returns>
        </member>
        <member name="T:SharpNL.Utility.InvalidFormatException">
            <summary>
            This exception indicates that a resource violates the expected data format.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.ListHeap`1">
            <summary>
            Represents a generic heap list.
            </summary>
            <typeparam name="T">The value type of this heap list.</typeparam>
            <remarks>
            This class implements the heap interface using a <see cref="T:List{T}"/> as the underlying
            data structure.  This heap allows values which are equals to be inserted.  The heap will
            return the top K values which have been added where K is specified by the size passed to
            the constructor. K+1 values are not gaurenteed to be kept in the heap or returned in a
            particular order.
            </remarks>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.#ctor(System.Int32)">
            <summary>
            Creates a new heap with the specified size using the sorted based on the default object comparator.
            </summary>
            <param name="size">The size of the heap.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The heap size cannot be negative.</exception>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new heap with the specified size using the sorted based on the specified comparator.
            </summary>
            <param name="size">The size of the heap.</param>
            <param name="comparer">The comparer to be used to sort heap elements.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The heap size cannot be negative.</exception>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.Add(`0)">
            <summary>
            Adds the specified object to the heap.
            </summary>
            <param name="value">The object to add to the heap.</param>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.Extract">
            <summary>
            Removes the smallest element from the heap and returns it.
            </summary>
            <returns>The smallest element from the heap.</returns>
            <exception cref="T:System.InvalidOperationException">Heap underflow.</exception>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.First">
            <summary>
            Returns the smallest element of the heap.
            </summary>
            <returns>The top element of the heap.</returns>
            <exception cref="T:System.InvalidOperationException">Heap underflow.</exception>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.Last">
            <summary>
            Returns the largest element of the heap.
            </summary>
            <returns>The largest element of the heap.</returns>
            <exception cref="T:System.InvalidOperationException">Heap underflow.</exception>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.Size">
            <summary>
            Returns the size of the heap.
            </summary>
            <returns>The size of the heap.</returns>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.IsEmpty">
            <summary>
            Returns whether the heap is empty.
            </summary>
            <returns><c>true</c> if the heap is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.ListHeap`1.Clear">
            <summary>
            Clears the contents of the heap.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.MockInputStreamFactory">
            <summary>
            Class MockInputStreamFactory.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.MockInputStreamFactory.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.MockInputStreamFactory"/> class.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
        </member>
        <member name="M:SharpNL.Utility.MockInputStreamFactory.CreateInputStream">
            <summary>
            Creates the input stream.
            </summary>
            <returns>Stream.</returns>
        </member>
        <member name="T:SharpNL.Utility.ParagraphStream">
            <summary>
            Stream filter which merges text lines into paragraphs. The boundary of paragraph is defined
            by an empty text line. If the last paragraph in the stream is not terminated by an empty line
            the left over is assumed to be a paragraph.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.ParagraphStream.Read">
            <summary>
            Returns the next object. Calling this method repeatedly until it returns ,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="T:SharpNL.Utility.Parameters">
            <summary>
            Utility class to store common parameters.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.Algorithm">
            <summary>
            The algorithm parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.BeamSize">
            <summary>
            The beam size parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.Cutoff">
            <summary>
            The cutoff parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.DataIndexer">
            <summary>
            The data indexer parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.Iterations">
            <summary>
            The iterations parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.Tolerance">
            <summary>
            The tolerance parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.TrainerType">
            <summary>
            The trainer type parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.TrainingEventhash">
            <summary>
            The training eventhash parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.StepSizeDecrease">
            <summary>
            The step size decrease parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.UseAverage">
            <summary>
            The use average parameter
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.UseSkippedAveraging">
            <summary>
            The use skipped averaging parameter.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.Threads">
            <summary>
            The threads parameter.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.Parameters.Algorithms">
            <summary>
            Represents the supported algorithms.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.Algorithms.Perceptron">
            <summary>
            The perceptron algorithm.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.Algorithms.MaxEnt">
            <summary>
            The maximum entropy algorithm.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.Parameters.DataIndexers">
            <summary>
            Represents the supported data indexers.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.DataIndexers.OnePass">
            <summary>
            The one pass data indexer.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Parameters.DataIndexers.TwoPass">
            <summary>
            The two pass data indexer.
            </summary>
        </member>
        <member name="T:SharpNL.Utility.Model.GenericModelSerializer">
            <summary>
            Represents the standard OpenNLP model serializer.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Model.GenericModelSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the artifact using the specified input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not readable.</exception>
        </member>
        <member name="M:SharpNL.Utility.Model.GenericModelSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the the artifact into the specified stream.
            </summary>
            <param name="artifact">The artifact.</param>
            <param name="outputStream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">outputStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not writable.</exception>
        </member>
        <member name="T:SharpNL.Utility.Model.ModelUtility">
            <summary>
            Utility class for handling of <see cref="T:SharpNL.ML.Model.IMaxentModel"/>.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Model.ModelUtility.ValidateOutcomes(SharpNL.ML.Model.IMaxentModel,System.String[])">
            <summary>
            Checks if the expected outcomes are all contained as outcomes in the given model.
            </summary>
            <param name="model">The model.</param>
            <param name="expectedOutcomes">The expected outcomes.</param>
            <returns><c>true</c> if all expected outcomes are the only outcomes of the model;<c>false</c> otherwise.</returns>
        </member>
        <member name="T:SharpNL.Utility.PlainTextByLineStream">
            <summary>
            Reads a plain text file and return each line as a <see cref="T:string"/> object.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.PlainTextByLineStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.PlainTextByLineStream"/> using a <see cref="T:System.IO.Stream"/> object encoded as UTF-8.
            </summary>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:SharpNL.Utility.PlainTextByLineStream.#ctor(System.IO.StreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.PlainTextByLineStream"/> using a <see cref="T:System.IO.StreamReader"/> object.
            </summary>
            <param name="reader">The stream reader.</param>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:SharpNL.Utility.PlainTextByLineStream.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.PlainTextByLineStream"/> class.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="encoderName">The code page name of the preferred encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            inputStream
            or
            encoderName
            </exception>
            <exception cref="T:System.ArgumentException">The specified stream is not readable.</exception>
            <exception cref="T:System.ArgumentException">
            <code>encoderName</code> is not a valid code page name.
            or
            The code page indicated by name is not supported by the underlying platform.
            </exception>
        </member>
        <member name="M:SharpNL.Utility.PlainTextByLineStream.DisposeManagedResources">
            <summary>
            Releases the managed resources.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.PlainTextByLineStream.Read">
            <summary>
            Returns the next line. Calling this method repeatedly until it returns,
            null will return each object from the underlying source exactly once.
            </summary>
            <returns>
            The next object or null to signal that the stream is exhausted.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.PlainTextByLineStream.Reset">
            <summary>
            Repositions the stream at the beginning and the previously seen object 
            sequence will be repeated exactly. This method can be used to re-read the
            stream if multiple passes over the objects are required.
            </summary>
        </member>
        <member name="P:SharpNL.Utility.PlainTextByLineStream.CurrentLine">
            <summary>
            Gets the current line.
            </summary>
            <value>The current line.</value>
        </member>
        <member name="P:SharpNL.Utility.PlainTextByLineStream.Progress">
            <summary>
            Gets the current progress on the stream.
            </summary>
            <value>The progress.</value>
            <remarks>The progress depends by the buffer size of the <see cref="T:StreamReader"/>.</remarks>
        </member>
        <member name="T:SharpNL.Utility.Properties">
            <summary>
            Represents a property file.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Properties.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:SharpNL.Utility.Properties"/> contains the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns><c>true</c> if this instance contains the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:SharpNL.Utility.Properties.ContainsAnyValue(System.String,System.String[])">
            <summary>
            Determines whether the key contains any specified value.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values to check.</param>
            <returns><c>true</c> if the key contains ANY specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.Properties.Clear">
            <summary>
            Remove all properties in this instance.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Properties.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the artifact using the specified input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">inputStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not readable.</exception>
        </member>
        <member name="M:SharpNL.Utility.Properties.Get``1(System.String,``0)">
            <summary>
            Gets the value of the specified key as a type. 
            If the key does not exist or the value can't be converted, the <paramref name="defaultValue"/> 
            will be returned as result.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The <paramref name="defaultValue"/> if value does not exist or if the value can't be
            converted; otherwise, the value associated with the specified <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.Properties.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the element is successfully found and removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Utility.Properties.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the the artifact into the specified stream.
            </summary>
            <param name="artifact">The artifact.</param>
            <param name="outputStream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">outputStream</exception>
            <exception cref="T:System.ArgumentException">Stream was not writable.</exception>
        </member>
        <member name="M:SharpNL.Utility.Properties.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.Properties.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.Properties.Count">
            <summary>
            Gets the number of properties in this instance.
            </summary>
            <value>The number of properties in this instance.</value>
        </member>
        <member name="P:SharpNL.Utility.Properties.Item(System.String)">
            <summary>
            Gets or sets the property with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The property value.</returns>
        </member>
        <member name="T:SharpNL.Utility.Sequence">
            <summary>
            Represents a weighted sequence of outcomes.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Sequence.Add(System.String,System.Double)">
            <summary>
            Adds the specified outcome with its probability to this sequence.
            </summary>
            <param name="outcome">The outcome to be added.</param>
            <param name="probability">The probability associated with this outcome.</param>
        </member>
        <member name="M:SharpNL.Utility.Sequence.Clone">
            <summary>
            Creates a new <see cref="T:Sequence"/> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:Sequence"/> that is a copy of this instance.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.Sequence.CompareTo(SharpNL.Utility.Sequence)">
            <summary>
            Compares the current sequence with another sequence.
            </summary>
            <returns>
            A value that indicates the relative order of the sequence being compared. The return value has the following meanings: Value Meaning Less than zero This sequence is less than the <paramref name="other"/> parameter.Zero This sequence is equal to <paramref name="other"/>. Greater than zero This sequence is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Utility.Sequence.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.Sequence.Outcomes">
            <summary>
            Gets the outcomes for this sequence.
            </summary>
            <value>The outcomes for this sequence.</value>
        </member>
        <member name="P:SharpNL.Utility.Sequence.Probabilities">
            <summary>
            Gets the probabilities associated with the outcomes of this sequence.
            </summary>
            <value>The probabilities associated with the outcomes of this sequence.</value>
        </member>
        <member name="P:SharpNL.Utility.Sequence.Score">
            <summary>
            Gets the score of this sequence.
            </summary>
            <value>The score of this sequence.</value>
        </member>
        <member name="T:SharpNL.Utility.Serialization.SerializeDelegate">
            <summary>
            A delegate to serialize a <paramref name="artifact"/> into the <paramref name="outputStream"/> stream object.
            </summary>
            <param name="artifact">The artifact to be serialized.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="T:SharpNL.Utility.Serialization.DeserializeDelegate">
            <summary>
            A delegate to deserialize a artifact from a <see cref="T:System.IO.Stream"/> object.
            </summary>
            <param name="inputStream">The input stream.</param>
            <returns>The deserialized artifact.</returns>
        </member>
        <member name="T:SharpNL.Utility.Span">
            <summary>
            Represents an span object.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Span.#ctor(SharpNL.Utility.Span,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Span"/> class using a span and its probability.
            </summary>
            <param name="span">The span.</param>
            <param name="probability">The probability.</param>
        </member>
        <member name="M:SharpNL.Utility.Span.#ctor(SharpNL.Utility.Span,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Span"/> class with shifted span object.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:SharpNL.Utility.Span.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Span"/> class with the <paramref name="start"/> and <paramref name="end"/> positions.
            </summary>
            <param name="start">The start index position.</param>
            <param name="end">The end index position.</param>
        </member>
        <member name="M:SharpNL.Utility.Span.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Span"/> class with the <paramref name="start"/> and <paramref name="end"/> positions
            and a probability value.
            </summary>
            <param name="start">The start index position.</param>
            <param name="end">The end index position.</param>
            <param name="probability">The probability.</param>
        </member>
        <member name="M:SharpNL.Utility.Span.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Span"/> class with the start and 
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:SharpNL.Utility.Span.#ctor(System.Int32,System.Int32,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.Span"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="type">The type.</param>
            <param name="probability">The probability.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="start"/> index must be zero or greater.
            or
            The <paramref name="end"/> index must be zero or greater.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="start"/> index must not be larger than <paramref name="end"/> index.
            </exception>
        </member>
        <member name="M:SharpNL.Utility.Span.CompareTo(SharpNL.Utility.Span)">
            <summary>
            Compares the current span with another span
            </summary>
            <returns>
            A value that indicates the relative order of the spans being compared. 
            The return value has the following meanings: Value Meaning Less than zero This span is less than the <paramref name="other"/> parameter. Zero This span is equal to <paramref name="other"/>. Greater than zero This span is greater than <paramref name="other"/>.  
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Utility.Span.Contains(SharpNL.Utility.Span)">
            <summary>
            Determines whether specified span is contained by this span.
            </summary>
            <param name="span">The span to compare with this span.</param>
            <returns><c>true</c> if specified span is contained by this span; otherwise, <c>false</c>.</returns>
            <remarks>Identical spans are considered to contain each other.</remarks>
        </member>
        <member name="M:SharpNL.Utility.Span.Contains(System.Int32)">
            <summary>
            Determines whether specified index is contained inside this span.
            </summary>
            <param name="index">The index to test with this span.</param>
            <returns><c>true</c> if specified index is contained inside this span.; otherwise, <c>false</c>.</returns>
            <remarks>An index with the value of end is considered outside the span.</remarks>
        </member>
        <member name="M:SharpNL.Utility.Span.Crosses(SharpNL.Utility.Span)">
            <summary>
            Determines whether the specified span crosses this span.
            </summary>
            <param name="span">The span to compare with this span.</param>
            <returns><c>true</c> if specified span overlaps this span and contains a non-overlapping section, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Utility.Span.DropOverlappingSpans(SharpNL.Utility.Span[])">
            <summary>
            Removes spans with are intersecting or crossing in anyway.
            </summary>
            <param name="spans">The spans.</param>
            <returns>A array of non-overlapping spans.</returns>
            <remarks>
            The following rules are used to remove the spans: <br />
            Identical spans: The first span in the array after sorting it remains<br />
            Intersecting spans: The first span after sorting remains<br />
            Contained spans: All spans which are contained by another are removed<br />
            </remarks>
        </member>
        <member name="M:SharpNL.Utility.Span.IsOverlapping(SharpNL.Utility.Span[])">
            <summary>
            Determines whether the any of the specified spans is overlapping.
            </summary>
            <param name="spans">The spans to check.</param>
            <returns><c>true</c> if the one of the specified spans is overlapping with another span; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="spans"/>.</exception>
        </member>
        <member name="M:SharpNL.Utility.Span.Equals(SharpNL.Utility.Span)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current span is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An span object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Utility.Span.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Utility.Span.GetCoveredText(System.String)">
            <summary>
            Gets the text covered by the current span.
            </summary>
            <param name="text">The text.</param>
            <returns>The substring covered by the current span.</returns>
            <exception cref="T:System.ArgumentException">The span is outside the given text.</exception>
        </member>
        <member name="M:SharpNL.Utility.Span.GetCoveredText(System.String[])">
            <summary>
            Gets the covered text by the given tokens using the <see cref="P:SharpNL.Utility.Span.Start"/> and <see cref="P:SharpNL.Utility.Span.End"/> positions.
            </summary>
            <param name="tokens">The tokens.</param>
            <returns>The substring covered by the current span.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tokens"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">tokens
            <paramref name="tokens"/>
            </exception>
        </member>
        <member name="M:SharpNL.Utility.Span.GetCoveredText(System.Collections.Generic.IEnumerable{SharpNL.Tokenize.IToken})">
            <summary>
            Gets the covered text by the given tokens using the <see cref="P:SharpNL.Utility.Span.Start"/> and <see cref="P:SharpNL.Utility.Span.End"/> positions.
            </summary>
            <param name="tokens">The tokens.</param>
            <returns>The substring covered by the current span.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tokens"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">tokens
            <paramref name="tokens"/>
            </exception>
        </member>
        <member name="M:SharpNL.Utility.Span.GetSpanPosition(SharpNL.SentenceDetector.ISentence)">
            <summary>
            Gets the span position in the specified sentence.
            </summary>
            <param name="sentence">The sentence.</param>
            <returns>TextPosition.</returns>
            <exception cref="T:System.ArgumentNullException">sentence</exception>
            <exception cref="T:System.ArgumentException">The specified sentence has no tokens.</exception>
        </member>
        <member name="M:SharpNL.Utility.Span.Intersects(SharpNL.Utility.Span)">
            <summary>
            Determines whether the span intersects with the specified span.
            </summary>
            <param name="span">The span to compare with this span.</param>
            <returns><c>true</c> if the span intersects with the specified span, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Utility.Span.StartsWith(SharpNL.Utility.Span)">
            <summary>
            Determines whether the specified span is the begin of this span and the specified span is contained in this span.
            </summary>
            <param name="span">The span.</param>
            <returns><c>true</c> if the specified span starts with this span and is contained in this span, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Utility.Span.Trim(System.String)">
            <summary>
            Returns a copy of this span with leading and trailing white spaces removed.
            </summary>
            <param name="text">The text.</param>
            <returns>The trimmed span or the same object if already trimmed.</returns>
        </member>
        <member name="M:SharpNL.Utility.Span.GetHashCode">
            <summary>
            Generates a hash code of the current span.
            </summary>
            <returns>
            A int hash code for the current <see cref="T:SharpNL.Utility.Span"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.Span.ToString">
            <summary>
            Returns a string that represents the current span.
            </summary>
            <returns>
            A string that represents the current span.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.Span.SpansToStrings(SharpNL.Utility.Span[],System.String)">
            <summary>
            Converts an array of <see cref="T:Span"/> to an array of <see cref="T:string"/>.
            </summary>
            <param name="spans">The spans.</param>
            <param name="text">The text.</param>
            <returns>The strings.</returns>
        </member>
        <member name="M:SharpNL.Utility.Span.SpansToStrings(SharpNL.Utility.Span[],System.String[])">
            <summary>
            Returns the equivalent tokens from the given spans.
            </summary>
            <param name="spans">The spans.</param>
            <param name="tokens">The tokens.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="P:SharpNL.Utility.Span.End">
            <summary>
            Gets the end position of the span.
            </summary>
            <value>The end position of the span.</value>
        </member>
        <member name="P:SharpNL.Utility.Span.Length">
            <summary>
            Gets the length of the span.
            </summary>
            <value>The length of the span.</value>
        </member>
        <member name="P:SharpNL.Utility.Span.Start">
            <summary>
            Gets the start position of the span.
            </summary>
            <value>The start position of the span.</value>
        </member>
        <member name="P:SharpNL.Utility.Span.Probability">
            <summary>
            Gets the probability of the span.
            </summary>
        </member>
        <member name="P:SharpNL.Utility.Span.Type">
            <summary>
            Gets the type of the span.
            </summary>
            <value>The type of the span.</value>
        </member>
        <member name="T:SharpNL.Utility.StringList">
            <summary>
            Represents a immutable list of strings.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.StringList.#ctor(System.String)">
            <summary>
            Initializes the current instance..
            </summary>
            <param name="value">The value.</param>
            <remarks>Token String will be replaced by identical internal String object.</remarks>
        </member>
        <member name="M:SharpNL.Utility.StringList.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.StringList"/> class.
            </summary>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">values;@The values must not be empty.</exception>
        </member>
        <member name="M:SharpNL.Utility.StringList.CompareToIgnoreCase(SharpNL.Utility.StringList)">
            <summary>
            Compares to another <see cref="T:StringList"/> and ignores the case of the values.
            </summary>
            <param name="list">The list to compare.</param>
            <returns><c>true</c> if if identically with ignore the case, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SharpNL.Utility.StringList.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Utility.StringList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.StringList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.StringList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.StringList.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:StringList"/>.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.StringList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The string at given index.</returns>
        </member>
        <member name="P:SharpNL.Utility.StringList.Count">
            <summary>
            Retrieves the number of values inside this list.
            </summary>
            <value>The number of values.</value>
        </member>
        <member name="M:SharpNL.Utility.ToolFactoryManager.CreateFactory(System.String)">
            <summary>
            Creates the factory with the given name.
            </summary>
            <param name="factoryName">Name of the factory.</param>
            <returns>BaseToolFactory.</returns>
        </member>
        <member name="M:SharpNL.Utility.ToolFactoryManager.IsRegistered(System.String)">
            <summary>
            Determines whether the specified factory name is registered.
            </summary>
            <param name="factoryName">Name of the factory.</param>
            <returns><c>true</c> if the specified factory name is registered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.ToolFactoryManager.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified factory type is registered.
            </summary>
            <param name="factoryType">Type of the factory.</param>
            <returns><c>true</c> if the specified factory type is registered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.ToolFactoryManager.LoadToolFactories(System.Boolean)">
            <summary>
            Loads the tool factories from the current application domain.
            </summary>
            <param name="forceReload">
            if set to <c>true</c> the known types will be refreshed from the current 
            application domain. The default value is <c>false</c>.
            </param>
            <remarks>
            Use the <paramref name="forceReload"/> only when is extreme necessary.
            </remarks>
        </member>
        <member name="M:SharpNL.Utility.ToolFactoryManager.Register(System.String,System.Type)">
            <summary>
            Registers the specified tool factory type.
            </summary>
            <param name="name">The name.</param>
            <param name="factoryType">Type of the factory.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/>
            or
            <paramref name="factoryType"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified factory name is already registered.
            or
            The specified factory type does not extends the BaseToolFactory class.
            </exception>
            <remarks>
            Theoretically this method is not necessary, because <seealso cref="M:LoadToolFactories"/> should handle all the factories,
            but if an assembly is loaded during the runtime, this method allows the factory registration without reloading all the 
            factories.
            </remarks>
        </member>
        <member name="P:SharpNL.Utility.ToolFactoryManager.IsFactoriesLoaded">
            <summary>
            Gets a value indicating whether the factories in this application domain are loaded.
            </summary>
            <value><c>true</c> if the factories in this application domain are loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.Utility.TrainingParameters">
            <summary>
            Represents the training parameters.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.TrainingParameters"/> class.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.Utility.TrainingParameters"/> by deserializing the input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.DefaultParameters">
            <summary>
            Gets the default parameters.
            </summary>
            <returns>The default parameters.</returns>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Contains(System.String)">
            <summary>
            Determines whether the training parameters contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if this instance contains the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Contains(System.String,System.String)">
            <summary>
            Determines whether the training parameters contains the key in the specified namespace.
            </summary>
            <param name="ns">The namespace.</param>
            <param name="key">The key.</param>
            <returns><c>true</c> if this instance contains the key in the specified namespace; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ns"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Get(System.String)">
            <summary>
            Gets the assigned value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The assigned value with the specified key.</returns>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Get(System.String,System.String)">
            <summary>
            Gets the assigned value with the specified key and namespace.
            </summary>
            <param name="ns">The namespace.</param>
            <param name="key">The key.</param>
            <returns>The assigned value with the specified key and namespace.</returns>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Get``1(System.String,``0)">
            <summary>
            Gets the value of the specified key as a type. 
            If the key does not exist or the value can't be converted, the <paramref name="defaultValue"/> 
            will be returned as result.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The <paramref name="defaultValue"/> if value does not exist or if the value can't be
            converted; otherwise, the value associated with the specified <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Get``1(System.String,System.String,``0)">
            <summary>
            Gets the value of the specified namespace + key as a type. 
            If the key does not exist or the value can't be converted, the <paramref name="defaultValue"/> 
            will be returned as result.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="ns">The namespace.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The <paramref name="defaultValue"/> if value does not exist or if the value can't be
            converted; otherwise, the value associated with the specified <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.GetNamespace(System.String)">
            <summary>
            Gets the properties in the specified namespace.
            </summary>
            <param name="ns">The namespace.</param>
            <returns>A <see cref="T:SharpNL.Utility.TrainingParameters"/> containing the properties in the specified namespace.</returns>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Set(System.String,System.String)">
            <summary>
            Sets the specified value to an given key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Set(System.String,System.String,System.String)">
            <summary>
            Sets the specified value to an given key and namespace.
            </summary>
            <param name="ns">The namespace.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ns"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.IsValid">
            <summary>
            Determines whether the basic parameters (algorithm, cutoff and iterations) are valid.
            </summary>
            <returns><c>true</c> if the basic parameters are valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNL.Utility.TrainingParameters.Serialize(System.IO.Stream)">
            <summary>
            Serializes the properties into a given stream.
            </summary>
            <param name="output">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
            <exception cref="T:System.ArgumentException">The stream is not writable.</exception>
        </member>
        <member name="T:SharpNL.Utility.Version">
            <summary>
            Represents the OpenNLP Tools library version.
            </summary>
        </member>
        <member name="F:SharpNL.Utility.Version.DevVersion">
            <summary>
            The development version representation.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes the current instance with the provided versions.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.Version.Parse(System.String)">
            <summary>
            Converts the string representation of a version to its <see cref="T:SharpNL.Utility.Version"/> equivalent.
            </summary>
            <param name="value">A string containing a version to convert.</param>
            <returns>A <see cref="T:SharpNL.Utility.Version"/> object equivalent to the number contained in <paramref name="value"/>.</returns>
            <exception cref="T:SharpNL.Utility.InvalidFormatException">
            Invalid version format! Expected two dots.
            or
            Invalid version number.
            </exception>
        </member>
        <member name="M:SharpNL.Utility.Version.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other"/> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="other"/>. Greater than zero This instance follows <paramref name="other"/> in the sort order. 
            </returns>
            <param name="other">An object to compare with this instance. </param><exception cref="T:System.ArgumentException"><paramref name="other"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:SharpNL.Utility.Version.CompareTo(SharpNL.Utility.Version)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. 
            The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="version"/> parameter.Zero This object is equal to <paramref name="version"/>. Greater than zero This object is greater than <paramref name="version"/>. 
            </returns>
            <param name="version">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Utility.Version.Equals(SharpNL.Utility.Version)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpNL.Utility.Version.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Utility.Version.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.Version.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.Version.Major">
            <summary>
            Gets the value of the major component of the version number for the current <see cref="T:SharpNL.Utility.Version"/> object.
            </summary>
            <value>The major version number.</value>
        </member>
        <member name="P:SharpNL.Utility.Version.Minor">
            <summary>
            Gets the value of the minor component of the version number for the current <see cref="T:SharpNL.Utility.Version"/> object.
            </summary>
            <value>The minor version number.</value>
        </member>
        <member name="P:SharpNL.Utility.Version.Revision">
            <summary>
            Gets the value of the revision component of the version number for the current <see cref="T:SharpNL.Utility.Version"/> object.
            </summary>
            <value>The revision number, or -1 if the revision number is undefined.</value>
        </member>
        <member name="P:SharpNL.Utility.Version.Snapshot">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpNL.Utility.Version"/> is a snapshot.
            </summary>
            <value><c>true</c> if snapshot; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SharpNL.Utility.UnclosableStream">
            <summary>
            A Stream which ignores calls to <see cref="M:UnclosableStream.Close()"/> for situations where a consumer of a stream assumes control which is undesired.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param><param name="count">The maximum number of bytes to be read from the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param><param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.
            </summary>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"/> instead; see the Remarks section.)
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.
            </returns>
            <param name="buffer">The buffer to read the data into. </param><param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param><param name="count">The maximum number of bytes to read. </param><param name="callback">An optional asynchronous callback, to be called when the read is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"/> instead; see the Remarks section.)
            </summary>
            <returns>
            An IAsyncResult that represents the asynchronous write, which could still be pending.
            </returns>
            <param name="buffer">The buffer to write data from. </param><param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param><param name="count">The maximum number of bytes to write. </param><param name="callback">An optional asynchronous callback, to be called when the write is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.
            </summary>
            <returns>
            A task that represents the asynchronous copy operation.
            </returns>
            <param name="destination">The stream to which the contents of the current stream will be copied.</param><param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 4096.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is negative or zero.</exception><exception cref="T:System.ObjectDisposedException">Either the current stream or the destination stream is disposed.</exception><exception cref="T:System.NotSupportedException">The current stream does not support reading, or the destination stream does not support writing.</exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.CreateObjRef(System.Type)">
            <summary>
            Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.
            </summary>
            <returns>
            Information required to generate a proxy.
            </returns>
            <param name="requestedType">The <see cref="T:System.Type"/> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef"/> will reference. </param><exception cref="T:System.Runtime.Remoting.RemotingException">This instance is not a valid remoting object. </exception><exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/></PermissionSet>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"/> instead; see the Remarks section.)
            </summary>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <param name="asyncResult">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException">A handle to the pending read operation is not available.-or-The pending operation does not support reading.</exception><exception cref="T:System.InvalidOperationException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"/> instead; see the Remarks section.)
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException">A handle to the pending write operation is not available.-or-The pending operation does not support writing.</exception><exception cref="T:System.InvalidOperationException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.
            </summary>
            <returns>
            A task that represents the asynchronous flush operation.
            </returns>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param><exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.
            </summary>
            <returns>
            A task that represents the asynchronous read operation. The value of the parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. 
            </returns>
            <param name="buffer">The buffer to write the data into.</param><param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data from the stream.</param><param name="count">The maximum number of bytes to read.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception><exception cref="T:System.NotSupportedException">The stream does not support reading.</exception><exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception><exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous read operation. </exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.
            </summary>
            <returns>
            A task that represents the asynchronous write operation.
            </returns>
            <param name="buffer">The buffer to write data from.</param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> from which to begin copying bytes to the stream.</param><param name="count">The maximum number of bytes to write.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.</exception><exception cref="T:System.NotSupportedException">The stream does not support writing.</exception><exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception><exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation. </exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:SharpNL.Utility.UnclosableStream.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.UnclosableStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.UnclosableStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.UnclosableStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.UnclosableStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:SharpNL.Utility.UnclosableStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:SharpNL.Utility.UnclosableStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <returns>
            A value that determines whether the current stream can time out.
            </returns>
        </member>
        <member name="P:SharpNL.Utility.UnclosableStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out. 
            </summary>
            <returns>
            A value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.ReadTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception>
        </member>
        <member name="P:SharpNL.Utility.UnclosableStream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out. 
            </summary>
            <returns>
            A value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.WriteTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception>
        </member>
        <member name="T:SharpNL.WordNet.IWordNetProvider">
            <summary>
            Represents a WordNet provider, which provides the data for the WordNet engine.
            </summary>
        </member>
        <member name="M:SharpNL.WordNet.IWordNetProvider.Initialize(SharpNL.WordNet.WordNet)">
            <summary>
            Initializes the WordNet provider.
            </summary>
            <param name="wordNet">The WordNet.</param>
        </member>
        <member name="M:SharpNL.WordNet.IWordNetProvider.GetSynSets(System.String,SharpNL.WordNet.WordNetPos)">
            <summary>
            Gets all synsets for a word, optionally restricting the returned synsets to one or more parts of speech. This
            method does not perform any morphological analysis to match up the given word.
            </summary>
            <param name="word">Word to get SynSets for.</param>
            <param name="pos">Part-of-speech to search.</param>
            <returns>A readonly collection of SynSets that contain the requested word.</returns>
        </member>
        <member name="M:SharpNL.WordNet.IWordNetProvider.GetSynSetDefinition(SharpNL.WordNet.WordNetPos,System.Int32)">
            <summary>
            Gets the definition for a synset
            </summary>
            <param name="pos">Part-of-speech to get definition for.</param>
            <param name="offset">Offset or a index into data file.</param>
        </member>
        <member name="M:SharpNL.WordNet.IWordNetProvider.GetAllWords(SharpNL.WordNet.WordNetPos)">
            <summary>
            Gets all words with the specified part-of-speech.
            </summary>
            <param name="pos">The part-of-speech to get words for.</param>
            <returns>A readonly collection containing all the words with the specified part-of-speech tag.</returns>
        </member>
        <member name="T:SharpNL.WordNet.LexicographerFileName">
            <summary>
            Lexicographer file names
            </summary>
        </member>
        <member name="T:SharpNL.WordNet.Providers.WordNetFileProvider">
            <summary>
            Represents a default WordNet data provider, which uses files to provide the data
            for the WordNet engine. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetFileProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.WordNet.Providers.WordNetFileProvider"/> class.
            </summary>
            <param name="dataPath">The data path.</param>
            <exception cref="T:System.ArgumentNullException">dataPath</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The data directory does not exist.</exception>
            <exception cref="T:System.IO.FileNotFoundException">A required WordNet file does not exist: [filename]</exception>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetFileProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetFileProvider.Initialize(SharpNL.WordNet.WordNet)">
            <summary>
            Initializes the WordNet provider.
            </summary>
            <param name="wordnet">The WordNet.</param>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetFileProvider.GetAllWords(SharpNL.WordNet.WordNetPos)">
            <summary>
            Gets all words with the specified part-of-speech.
            </summary>
            <param name="pos">The part-of-speech to get words for.</param>
            <returns>A readonly collection containing all the words with the specified part-of-speech tag.</returns>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetFileProvider.GetSynSetDefinition(SharpNL.WordNet.WordNetPos,System.Int32)">
            <summary>
            Gets the definition for a synset
            </summary>
            <param name="pos">Part-of-speech to get definition for.</param>
            <param name="offset">Offset or a index into data file.</param>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetFileProvider.GetSynSets(System.String,SharpNL.WordNet.WordNetPos)">
            <summary>
            Gets all synsets for a word, optionally restricting the returned synsets to one or more parts of speech. This
            method does not perform any morphological analysis to match up the given word.
            </summary>
            <param name="word">Word to get SynSets for.</param>
            <param name="pos">Part-of-speech to search.</param>
            <returns>A readonly collection of SynSets that contain the requested word.</returns>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetFileProvider.GetSynSetShells(System.String,SharpNL.WordNet.WordNetPos,SharpNL.WordNet.SynSet@,SharpNL.WordNet.WordNet)">
            <summary>
            Gets synset shells from a word index line. A synset shell is an instance of SynSet with only the POS and Offset
            members initialized. These members are enough to look up the full synset within the corresponding data file. This
            method is static to prevent inadvertent references to a current WordNetEngine, which should be passed via the
            corresponding parameter.
            </summary>
            <param name="wordIndexLine">Word index line from which to get synset shells</param>
            <param name="pos">POS of the given index line</param>
            <param name="mostCommonSynSet">Returns the most common synset for the word</param>
            <param name="wordNet">The WordNet instance</param>
            <returns>Synset shells for the given index line</returns>
            <exception cref="T:System.Exception">Failed to get most common synset</exception>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetFileProvider.GetSynSetDefinition(SharpNL.WordNet.WordNetPos,System.Int64)">
            <summary>
            Gets definition line for synset from data file
            </summary>
            <param name="pos">POS to get definition for</param>
            <param name="offset">Offset into data file</param>
        </member>
        <member name="T:SharpNL.WordNet.Providers.WordNetMemoryProvider">
            <summary>
            Represents a WordNet memory provider, which reads the standard WordNet files and store everyting in 
            memory improving performance but this provider requires ~200mb of RAM using the default WordNet db.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="F:SharpNL.WordNet.Providers.WordNetMemoryProvider.posWordSynSets">
            <summary>
            In-memory pos-word synsets lookup
            </summary>
        </member>
        <member name="F:SharpNL.WordNet.Providers.WordNetMemoryProvider.idSynset">
            <summary>
            in-memory id-synset lookup where id is POS:Offset
            </summary>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetMemoryProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNL.WordNet.Providers.WordNetMemoryProvider"/> class.
            </summary>
            <param name="dataPath">The data path.</param>
            <exception cref="T:System.ArgumentNullException">dataPath</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The data directory does not exist.</exception>
            <exception cref="T:System.IO.FileNotFoundException">A required WordNet file does not exist: [filename]</exception>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetMemoryProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetMemoryProvider.Initialize(SharpNL.WordNet.WordNet)">
            <summary>
            Initializes the WordNet provider.
            </summary>
            <param name="wordnet">The WordNet instance.</param>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetMemoryProvider.GetSynSets(System.String,SharpNL.WordNet.WordNetPos)">
            <summary>
            Gets all synsets for a word, optionally restricting the returned synsets to one or more parts of speech. This
            method does not perform any morphological analysis to match up the given word.
            </summary>
            <param name="word">Word to get SynSets for.</param>
            <param name="pos">Part-of-speech to search.</param>
            <returns>A readonly collection of SynSets that contain the requested word.</returns>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetMemoryProvider.GetSynSetDefinition(SharpNL.WordNet.WordNetPos,System.Int32)">
            <summary>
            Gets the definition for a synset
            </summary>
            <param name="pos">Part-of-speech to get definition for.</param>
            <param name="offset">Offset or a index into data file.</param>
        </member>
        <member name="M:SharpNL.WordNet.Providers.WordNetMemoryProvider.GetAllWords(SharpNL.WordNet.WordNetPos)">
            <summary>
            Gets all words with the specified part-of-speech.
            </summary>
            <param name="pos">The part-of-speech to get words for.</param>
            <returns>A readonly collection containing all the words with the specified part-of-speech tag.</returns>
        </member>
        <member name="T:SharpNL.WordNet.SynSet">
            <summary>
            Represents synonym ring or synset, is a group of data elements that are considered 
            semantically equivalent for the purposes of information retrieval.
            </summary>
            <remarks>
            <para>
            This class is a modified/revamped version from <b>Matt Gerber</b> implementation: <br /> 
            <see href="http://ptl.sys.virginia.edu/ptl/software" />
            </para>
            <para>
            Original license: <br /> <b>Free.</b> Do whatever you want with it.
            </para>
            </remarks>
        </member>
        <member name="F:SharpNL.WordNet.SynSet.isMostCommonSynsetForWords">
            <summary>
            Words for which the current synset is the most common sense
            </summary>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.#ctor(SharpNL.WordNet.WordNetPos,System.Int32,SharpNL.WordNet.WordNet)">
            <summary>
            Constructor. Creates the shell of a SynSet without any actual information.
            To gain access to SynSet words, gloss, and related SynSets, call SynSet.Instantiate.
            </summary>
            <param name="pos">POS of SynSet</param>
            <param name="offset">Byte location of SynSet definition within data file</param>
            <param name="wordnet">WordNet engine used to instantiate this synset.</param>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.Instantiate(System.String,System.Collections.Generic.Dictionary{System.String,SharpNL.WordNet.SynSet})">
            <summary>
            Instantiates the current synset. If idSynset is non-null, related synsets references are set to those from 
            idSynset; otherwise, related synsets are created as shells.
            </summary>
            <param name="definition">Definition line of synset from data file</param>
            <param name="idSynset">Lookup for related synsets. If null, all related synsets will be created as shells.</param>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetField(System.String,System.Int32)">
            <summary>
            Gets a space-delimited field from a synset definition line
            </summary>
            <param name="line">SynSet definition line</param>
            <param name="fieldNum">Number of field to get</param>
            <returns>Field value</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetField(System.String,System.Int32,System.Int32@)">
            <summary>
            Gets a space-delimited field from a synset definition line
            </summary>
            <param name="line">SynSet definition line</param>
            <param name="fieldNum">Number of field to get</param>
            <param name="startIndex">Start index of field within the line</param>
            <returns>Field value</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetPos(System.String)">
            <summary>
            Gets the POS from its code
            </summary>
            <param name="pos">POS code</param>
            <returns>POS</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetRelatedSynSetCount(SharpNL.WordNet.SynSetRelation)">
            <summary>
            Gets the number of synsets related to the current one by the given relation
            </summary>
            <param name="relation">Relation to check</param>
            <returns>Number of synset related to the current one by the given relation</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetRelatedSynSets(SharpNL.WordNet.SynSetRelation,System.Boolean)">
            <summary>
            Gets synsets related to the current synset
            </summary>
            <param name="relation">Synset relation to follow</param>
            <param name="recursive">Whether or not to follow the relation recursively for all related synsets</param>
            <returns>Synsets related to the given one by the given relation</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetRelatedSynSets(System.Collections.Generic.IEnumerable{SharpNL.WordNet.SynSetRelation},System.Boolean)">
            <summary>
            Gets synsets related to the current synset
            </summary>
            <param name="relations">Synset relations to follow</param>
            <param name="recursive">Whether or not to follow the relations recursively for all related synsets</param>
            <returns>Synsets related to the given one by the given relations</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetRelatedSynSets(System.Collections.Generic.IEnumerable{SharpNL.WordNet.SynSetRelation},System.Boolean,System.Collections.Generic.List{SharpNL.WordNet.SynSet})">
            <summary>
            Private version of GetRelatedSynSets that avoids cyclic paths in WordNet. The current synset must itself be instantiated.
            </summary>
            <param name="relations">Synset relations to get</param>
            <param name="recursive">Whether or not to follow the relation recursively for all related synsets</param>
            <param name="currSynSets">Current collection of synsets, which we'll add to.</param>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetShortestPathTo(SharpNL.WordNet.SynSet,System.Collections.Generic.IEnumerable{SharpNL.WordNet.SynSetRelation})">
            <summary>
            Gets the shortest path from the current synset to another, following the given synset relations.
            </summary>
            <param name="destination">Destination synset</param>
            <param name="relations">Relations to follow, or null for all relations.</param>
            <returns>Synset path, or null if none exists.</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetClosestMutuallyReachableSynset(SharpNL.WordNet.SynSet,System.Collections.Generic.IEnumerable{SharpNL.WordNet.SynSetRelation})">
            <summary>
            Gets the closest synset that is reachable from the current and another synset along the given relations. For example, 
            given two synsets and the Hypernym relation, this will return the lowest synset that is a hypernym of both synsets. If 
            the hypernym hierarchy forms a tree, this will be the lowest common ancestor.
            </summary>
            <param name="synset">Other synset</param>
            <param name="relations">Relations to follow</param>
            <returns>Closest mutually reachable synset</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetDepth(System.Collections.Generic.IEnumerable{SharpNL.WordNet.SynSetRelation})">
            <summary>
            Computes the depth of the current synset following a set of relations. Returns the minimum of all possible depths. Root nodes
            have a depth of zero.
            </summary>
            <param name="relations">Relations to follow</param>
            <returns>Depth of current SynSet</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetDepth(System.Collections.Generic.IEnumerable{SharpNL.WordNet.SynSetRelation},System.Collections.Generic.List{SharpNL.WordNet.SynSet}@)">
            <summary>
            Computes the depth of the current synset following a set of relations. Returns the minimum of all possible depths. Root
            nodes have a depth of zero.
            </summary>
            <param name="relations">Relations to follow</param>
            <param name="synsetsEncountered">Synsets that have already been encountered. Prevents cycles from being entered.</param>
            <returns>Depth of current SynSet</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetLexicallyRelatedWords">
            <summary>
            Gets lexically related words for the current synset. Many of the relations in WordNet are lexical instead of semantic. Whereas
            the latter indicate relations between entire synsets (e.g., hypernym), the former indicate relations between specific 
            words in synsets. This method retrieves all lexical relations and the words related thereby.
            </summary>
            <returns>Mapping from relations to mappings from words in the current synset to related words in the related synsets</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.GetHashCode">
            <summary>
            Gets hash code for this synset
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.op_Equality(SharpNL.WordNet.SynSet,SharpNL.WordNet.SynSet)">
            <summary>
            Checks whether two synsets are equal
            </summary>
            <param name="first">First synset</param>
            <param name="second">Second synset</param>
            <returns>True if synsets are equal, false otherwise</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.op_Inequality(SharpNL.WordNet.SynSet,SharpNL.WordNet.SynSet)">
            <summary>
            Checks whether two synsets are unequal
            </summary>
            <param name="first">First synset</param>
            <param name="second">Second synset</param>
            <returns>True if synsets are unequal, false otherwise</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.Equals(System.Object)">
            <summary>
            Checks whether the current synset equals another
            </summary>
            <param name="obj">Other synset</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.ToString">
            <summary>
            Gets description of synset
            </summary>
            <returns>Description</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.IsMostCommonSynsetFor(System.String)">
            <summary>
            Checks whether this is the most common synset for a word
            </summary>
            <param name="word">Word to check</param>
            <returns>True if this is the most common synset, false otherwise</returns>
        </member>
        <member name="M:SharpNL.WordNet.SynSet.SetAsMostCommonSynsetFor(System.String)">
            <summary>
            Set the current synset as the most common for a word
            </summary>
            <param name="word">Word to set</param>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.Gloss">
            <summary>
            Gets the gloss of the current SynSet
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.Id">
            <summary>
            Gets the ID of this synset in the form POS:Offset
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.Instantiated">
            <summary>
            Gets whether or not the current synset has been instantiated
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.LexicalRelations">
            <summary>
            Gets lexical relations that exist between words in this synset and words in another synset
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.LexicographerFileName">
            <summary>
            Gets the lexicographer file name for this synset (see the lexnames file in the WordNet distribution).
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.Offset">
            <summary>
            Gets the byte offset of synset definition within the data file
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.Pos">
            <summary>
            Gets the part-of-speech of the current synset
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.SearchBackPointer">
            <summary>
            Gets or sets the back-pointer used when searching WordNet
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.SemanticRelations">
            <summary>
            Gets semantic relations that exist between this synset and other synsets
            </summary>
        </member>
        <member name="P:SharpNL.WordNet.SynSet.Words">
            <summary>
            Gets the words in the current SynSet
            </summary>
        </member>
        <member name="T:SharpNL.WordNet.WordNetPos">
            <summary>
            Enumerates the WordNet part-of-speech
            </summary>
        </member>
        <member name="T:SharpNL.WordNet.SynSetRelation">
            <summary>
            Enumerates the SynSet relations
            </summary>
        </member>
        <member name="T:SharpNL.WordNet.WordNet">
            <summary>
            Represents a WordNet 3.0 API. This class cannot be inherited.
            </summary>
            <remarks>
            This class is a revamped version from Matt Gerber implementation 
            <see href="http://ptl.sys.virginia.edu/ptl/software"/>
            
            Original license:
             Free. Do whatever you want with it.
            </remarks>
        </member>
        <member name="M:SharpNL.WordNet.WordNet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:SharpNL.WordNet.WordNet.GetAllWords">
            <summary>
            Gets a dictionary containing all words in the current instance organized by part-of-speech.
            </summary>
            <returns>A dictionary containing all words in the instance by part-of-speech</returns>
        </member>
        <member name="M:SharpNL.WordNet.WordNet.GetSynSets(System.String,SharpNL.WordNet.WordNetPos[])">
            <summary>
            Gets all synsets for a word, optionally restricting the returned synsets to one or more parts of speech. This
            method does not perform any morphological analysis to match up the given word. It does, however, replace all 
            spaces with underscores and call String.ToLower to normalize case.
            </summary>
            <param name="word">Word to get SynSets for. This method will replace all spaces with underscores and
            call ToLower() to normalize the word's case.</param>
            <param name="posRestriction">POSs to search. Cannot contain POS.None. Will search all POSs if no restriction
            is given.</param>
            <returns>Set of SynSets that contain word</returns>
        </member>
        <member name="M:SharpNL.WordNet.WordNet.GetSynSetRelation(SharpNL.WordNet.WordNetPos,System.String)">
            <summary>
            Gets the relation for a given POS and symbol
            </summary>
            <param name="pos">POS to get relation for</param>
            <param name="symbol">Symbol to get relation for</param>
            <returns>SynSet relation</returns>
        </member>
        <member name="M:SharpNL.WordNet.WordNet.GetMostCommonSynSet(System.String,SharpNL.WordNet.WordNetPos)">
            <summary>
            Gets the most common synset for a given word/pos pair. This is only available for memory-based
            engines (see constructor).
            </summary>
            <param name="word">Word to get SynSets for. This method will replace all spaces with underscores and
            will call String.ToLower to normalize case.</param>
            <param name="pos">Part of speech to find</param>
            <returns>Most common synset for given word/pos pair</returns>
        </member>
        <member name="P:SharpNL.WordNet.WordNet.Provider">
            <summary>
            Gets the WordNet provider from this instance.
            </summary>
            <value>The WordNet provider from this instance.</value>
        </member>
        <member name="T:SharpNL.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SharpNL.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SharpNL.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SharpNL.Properties.Resources.en_stopwords">
             <summary>
               Looks up a localized string similar to a
            a&apos;s
            able
            about
            above
            according
            accordingly
            across
            actually
            after
            afterwards
            again
            against
            ain&apos;t
            all
            allow
            allows
            almost
            alone
            along
            already
            also
            although
            always
            am
            among
            amongst
            an
            and
            another
            any
            anybody
            anyhow
            anyone
            anything
            anyway
            anyways
            anywhere
            apart
            appear
            appreciate
            appropriate
            are
            aren&apos;t
            around
            as
            aside
            ask
            asking
            associated
            at
            available
            away
            awfully
            b
            be
            became
            because
            become
            becomes
            becoming
            been
            before
            beforehand
            behind
            being
            b [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:SharpNL.Properties.Resources.pt_stopwords">
             <summary>
               Looks up a localized string similar to e 
            a 
            o 
            que 
            e 
            do 
            da 
            em 
            um 
            para 
            é 
            com 
            não 
            uma 
            os 
            no 
            se 
            na 
            por 
            mais 
            as 
            dos 
            como 
            mas 
            foi 
            ao 
            ele 
            das 
            tem 
            à 
            seu 
            sua 
            ou 
            ser 
            quando 
            muito 
            há 
            nos 
            já 
            está 
            eu 
            também 
            só 
            pelo 
            pela 
            até 
            isso 
            ela 
            entre 
            era 
            depois 
            sem 
            mesmo 
            aos 
            ter 
            seus 
            quem 
            nas 
            me 
            esse 
            eles 
            estão 
            você 
            tinha 
            foram 
            essa 
            num 
            nem 
            suas 
            meu 
            às 
            minha 
            têm 
            numa 
            pelos 
            elas 
            havia 
            seja 
            qual 
            será 
            nós 
            tenho 
            l [rest of string was truncated]&quot;;.
             </summary>
        </member>
    </members>
</doc>
